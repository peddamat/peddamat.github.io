{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":""},{"location":"index.html#hello","title":"Hello","text":"<p>Hi. I'm Sam.</p> <p> </p>  {{ blog_content }}"},{"location":"tags/index.html","title":"Tags","text":""},{"location":"tags/index.html#tags","title":"Tags","text":""},{"location":"tags/index.html#analysis","title":"analysis","text":"<ul> <li>Generating Complete Genomics build37 Files</li> <li>TARGET AML Data Analysis</li> <li>Hands On IoT MitM (Part 1)</li> <li>Hands On IoT MitM (Part 2)</li> <li>Reverse Engineering A Hunter Pro HC Controller</li> </ul>"},{"location":"tags/index.html#arduino","title":"arduino","text":"<ul> <li>ESP32</li> <li>Black Pill</li> <li>ITead Maple</li> <li>Super Blue Pill</li> </ul>"},{"location":"tags/index.html#binary-analysis","title":"binary-analysis","text":"<ul> <li>ATWINC1500 IoT Module Deep-Dive (Part 1)</li> <li>ATWINC1500 IoT Module Deep-Dive (Part 2)</li> </ul>"},{"location":"tags/index.html#cancer","title":"cancer","text":"<ul> <li>Generating Complete Genomics build37 Files</li> <li>TARGET AML Data Analysis</li> </ul>"},{"location":"tags/index.html#chatgpt","title":"chatgpt","text":"<ul> <li>Debugging Tools</li> <li>Reverse Engineering Tools</li> <li>Git Cheatsheet</li> <li>Rsync Cheatsheet</li> <li>TLS Cheatsheet</li> </ul>"},{"location":"tags/index.html#cheatsheet","title":"cheatsheet","text":"<ul> <li>Git Cheatsheet</li> <li>Rsync Cheatsheet</li> <li>Ruby Cheatsheet</li> <li>TLS Cheatsheet</li> </ul>"},{"location":"tags/index.html#datascience","title":"datascience","text":"<ul> <li>How To Size A Solar Battery Install</li> </ul>"},{"location":"tags/index.html#debugging","title":"debugging","text":"<ul> <li>Debugging Tools</li> </ul>"},{"location":"tags/index.html#diy","title":"diy","text":"<ul> <li>Introducing Sensie</li> </ul>"},{"location":"tags/index.html#dll","title":"dll","text":"<ul> <li>Creating A DLL With Rust</li> <li>Creating A Window With Rust</li> <li>Injecting DLLs With Rust</li> <li>Production Ready DLL Injection</li> </ul>"},{"location":"tags/index.html#docker","title":"docker","text":"<ul> <li>Learning Networking With Mininet</li> </ul>"},{"location":"tags/index.html#edgerouter","title":"edgerouter","text":"<ul> <li>How I Overengineered My Home Network</li> </ul>"},{"location":"tags/index.html#esp32","title":"esp32","text":"<ul> <li>ESP32</li> </ul>"},{"location":"tags/index.html#esp8266","title":"esp8266","text":"<ul> <li>Index</li> <li>ESP-01</li> <li>Wemos Mini</li> </ul>"},{"location":"tags/index.html#firmware","title":"firmware","text":"<ul> <li>ATWINC1500 IoT Module Deep-Dive (Part 1)</li> <li>ATWINC1500 IoT Module Deep-Dive (Part 2)</li> <li>Hands On IoT MitM (Part 1)</li> <li>Hands On IoT MitM (Part 2)</li> <li>Reverse Engineering A Hunter Pro HC Controller</li> </ul>"},{"location":"tags/index.html#git","title":"git","text":"<ul> <li>Git Cheatsheet</li> </ul>"},{"location":"tags/index.html#github","title":"github","text":"<ul> <li>How I Setup This Blog</li> </ul>"},{"location":"tags/index.html#home","title":"home","text":"<ul> <li>How I Overengineered My Home Network</li> </ul>"},{"location":"tags/index.html#home-assistant","title":"home assistant","text":"<ul> <li>My Smart Home Devices</li> </ul>"},{"location":"tags/index.html#howto","title":"howto","text":"<ul> <li>Creating A DLL With Rust</li> <li>Creating A Window With Rust</li> <li>Injecting DLLs With Rust</li> <li>Production Ready DLL Injection</li> </ul>"},{"location":"tags/index.html#hunter","title":"hunter","text":"<ul> <li>A Look Inside A Hunter Pro-HC Controller</li> </ul>"},{"location":"tags/index.html#ios","title":"ios","text":"<ul> <li>CalibreSync Development Notes</li> </ul>"},{"location":"tags/index.html#iot","title":"iot","text":"<ul> <li>How To Quickly Setup A Wireless MitM Proxy</li> <li>Introducing Sensie</li> <li>My Smart Home Devices</li> <li>ATWINC1500 IoT Module Deep-Dive (Part 1)</li> <li>ATWINC1500 IoT Module Deep-Dive (Part 2)</li> <li>Hands On IoT MitM (Part 1)</li> <li>Hands On IoT MitM (Part 2)</li> </ul>"},{"location":"tags/index.html#irrigation","title":"irrigation","text":"<ul> <li>A Look Inside A Hunter Pro-HC Controller</li> </ul>"},{"location":"tags/index.html#kali","title":"kali","text":"<ul> <li>How To Quickly Setup A Wireless MitM Proxy</li> </ul>"},{"location":"tags/index.html#microchip","title":"microchip","text":"<ul> <li>ATWINC1500 IoT Module Deep-Dive (Part 1)</li> <li>ATWINC1500 IoT Module Deep-Dive (Part 2)</li> <li>Hands On IoT MitM (Part 1)</li> <li>Hands On IoT MitM (Part 2)</li> <li>Reverse Engineering A Hunter Pro HC Controller</li> </ul>"},{"location":"tags/index.html#mininet","title":"mininet","text":"<ul> <li>Learning Networking With Mininet</li> </ul>"},{"location":"tags/index.html#mitm","title":"mitm","text":"<ul> <li>How To Quickly Setup A Wireless MitM Proxy</li> <li>Hands On IoT MitM (Part 1)</li> <li>Hands On IoT MitM (Part 2)</li> </ul>"},{"location":"tags/index.html#mkdocs","title":"mkdocs","text":"<ul> <li>How I Setup This Blog</li> <li>How I Write MkDocs Plugins</li> </ul>"},{"location":"tags/index.html#network","title":"network","text":"<ul> <li>How I Overengineered My Home Network</li> </ul>"},{"location":"tags/index.html#networking","title":"networking","text":"<ul> <li>Learning Networking With Mininet</li> </ul>"},{"location":"tags/index.html#obsidian","title":"obsidian","text":"<ul> <li>How I Setup This Blog</li> </ul>"},{"location":"tags/index.html#openssl","title":"openssl","text":"<ul> <li>TLS Cheatsheet</li> </ul>"},{"location":"tags/index.html#plugin","title":"plugin","text":"<ul> <li>How I Write MkDocs Plugins</li> </ul>"},{"location":"tags/index.html#powertoys","title":"powertoys","text":"<ul> <li>Fancy Zones Development Environment Setup</li> <li>Fancy Zones Internals</li> </ul>"},{"location":"tags/index.html#programming","title":"programming","text":"<ul> <li>Creating A DLL With Rust</li> <li>Creating A Window With Rust</li> <li>Injecting DLLs With Rust</li> <li>Production Ready DLL Injection</li> </ul>"},{"location":"tags/index.html#reversing","title":"reversing","text":"<ul> <li>Reverse Engineering Tools</li> </ul>"},{"location":"tags/index.html#rsync","title":"rsync","text":"<ul> <li>Rsync Cheatsheet</li> </ul>"},{"location":"tags/index.html#ruby","title":"ruby","text":"<ul> <li>Ruby Cheatsheet</li> </ul>"},{"location":"tags/index.html#rust","title":"rust","text":"<ul> <li>Creating A DLL With Rust</li> <li>Creating A Window With Rust</li> <li>Injecting DLLs With Rust</li> <li>Production Ready DLL Injection</li> </ul>"},{"location":"tags/index.html#security","title":"security","text":"<ul> <li>How I Overengineered My Home Network</li> </ul>"},{"location":"tags/index.html#solar","title":"solar","text":"<ul> <li>How To Size A Solar Battery Install</li> </ul>"},{"location":"tags/index.html#sprinker","title":"sprinker","text":"<ul> <li>A Look Inside A Hunter Pro-HC Controller</li> </ul>"},{"location":"tags/index.html#stm32","title":"stm32","text":"<ul> <li>Black Pill</li> <li>ITead Maple</li> <li>Super Blue Pill</li> </ul>"},{"location":"tags/index.html#swift","title":"swift","text":"<ul> <li>CalibreSync Development Notes</li> </ul>"},{"location":"tags/index.html#teardown","title":"teardown","text":"<ul> <li>A Look Inside A Hunter Pro-HC Controller</li> </ul>"},{"location":"tags/index.html#tls","title":"tls","text":"<ul> <li>TLS Cheatsheet</li> </ul>"},{"location":"tags/index.html#uc","title":"uC","text":"<ul> <li>A Look Inside A Hunter Pro-HC Controller</li> <li>Reverse Engineering A Hunter Pro HC Controller</li> </ul>"},{"location":"tags/index.html#uc_1","title":"uc","text":"<ul> <li>ESP32</li> <li>Index</li> <li>ESP-01</li> <li>Wemos Mini</li> <li>Black Pill</li> <li>ITead Maple</li> <li>Super Blue Pill</li> </ul>"},{"location":"tags/index.html#unifi","title":"unifi","text":"<ul> <li>How I Overengineered My Home Network</li> </ul>"},{"location":"tags/index.html#vscode","title":"vscode","text":"<ul> <li>How I Write MkDocs Plugins</li> </ul>"},{"location":"tags/index.html#win32","title":"win32","text":"<ul> <li>Creating A Window With Rust</li> </ul>"},{"location":"tags/index.html#windows","title":"windows","text":"<ul> <li>Fancy Zones Development Environment Setup</li> <li>Fancy Zones Internals</li> <li>Creating A DLL With Rust</li> <li>Creating A Window With Rust</li> <li>Injecting DLLs With Rust</li> <li>Production Ready DLL Injection</li> <li>Debugging Tools</li> <li>Reverse Engineering Tools</li> </ul>"},{"location":"tags/index.html#windows-rs","title":"windows-rs","text":"<ul> <li>Creating A Window With Rust</li> </ul>"},{"location":"tags/index.html#wip","title":"wip","text":"<ul> <li>How I Overengineered My Home Network</li> <li>Production Ready DLL Injection</li> <li>Docker Cheatsheet</li> <li>Black Magic Probe</li> <li>Segger J-Link</li> <li>Adafruit Feather M0 WiFi</li> <li>Raspberry Pi</li> <li>Introducing Recon</li> <li>SerialMoose Serial Port Sniffer</li> <li>My Smart Home Devices</li> <li>Samsung Refrigerator Integration</li> </ul>"},{"location":"guides/index.html","title":"Guides","text":""},{"location":"guides/index.html#guides","title":"Guides","text":"<p>Longform articles on neat topics. </p> <p>{{ blog_content guides }}</p>"},{"location":"guides/learning-networking-with-mininet/index.html","title":"Learning Networking With Mininet","text":"<p>Mininet Mininet is an open-source network emulator that allows users to create virtual networks with a variety of topologies, protocols, and applications. It is widely used by network researchers, developers, and educators to test, prototype, and experiment with different networking concepts and architectures.</p> <p>To get started with Mininet, you need to have a Linux-based operating system installed on your machine. You can either install Mininet directly on your machine or use a pre-built virtual machine image that comes with Mininet pre-installed. Once you have Mininet up and running, you can use its Python API to create, configure, and interact with virtual networks.</p>","tags":["networking","docker","mininet"]},{"location":"guides/learning-networking-with-mininet/index.html#further-reading","title":"Further Reading","text":"<ul> <li>Introduction to Mininet</li> </ul>","tags":["networking","docker","mininet"]},{"location":"guides/learning-networking-with-mininet/index.html#creating-custom-topologies","title":"Creating Custom Topologies","text":"<p>One of the key features of Mininet is its ability to create custom network topologies. You can use Mininet's topology API to define your own network topology, which can include switches, hosts, links, and controllers. For example, you can create a tree topology with a single root switch and multiple child switches, or a mesh topology with multiple switches interconnected in a fully-connected mesh.</p> <p>To create a custom topology, you need to write a Python script that uses Mininet's topology API to define the network topology. You can then use the <code>mn</code> command to launch the virtual network and interact with it. For example, the following script creates a tree topology with a single root switch and two levels of child switches and hosts:</p> <pre><code>from mininet.topo import Topo\nfrom mininet.net import Mininet\nfrom mininet.node import RemoteController\nclass MyTopo(Topo):\ndef build(self):\ns1 = self.addSwitch('s1')\nfor i in range(1, 3):\ns2 = self.addSwitch('s%s' % (i+1))\nfor j in range(1, 3):\nh = self.addHost('h%s' % (i*j))\nself.addLink(h, s2)\nself.addLink(s1, s2)\ntopo = MyTopo()\nnet = Mininet(topo=topo, controller=RemoteController)\nnet.start()\nnet.pingAll()\nnet.stop()\n</code></pre> <p>This script defines a custom topology with a single root switch <code>s1</code> and two levels of child switches <code>s2</code> and hosts <code>h1</code> to <code>h4</code>. It also adds links between hosts and child switches, and between child switches and the root switch. Finally, it starts the virtual network, pings all hosts to test connectivity, and stops the network.</p> <pre><code>from mininet.net import Mininet\nfrom mininet.node import Controller, OVSSwitch\nfrom mininet.cli import CLI\n# Create a Mininet instance\nnet = Mininet(controller=Controller, switch=OVSSwitch)\n# Add hosts\nh1 = net.addHost('h1')\nh2 = net.addHost('h2')\nh3 = net.addHost('h3')\n# Add switches\ns1 = net.addSwitch('s1')\ns2 = net.addSwitch('s2')\n# Add links\nnet.addLink(h1, s1)\nnet.addLink(h2, s1)\nnet.addLink(s1, s2)\nnet.addLink(s2, h3)\n# Start the network\nnet.start()\n# Test connectivity\nprint('Testing connectivity...')\nnet.pingAll()\n# Launch the Mininet CLI\nCLI(net)\n# Stop the network\nnet.stop()\n</code></pre>","tags":["networking","docker","mininet"]},{"location":"guides/learning-networking-with-mininet/index.html#configuring-network-protocols-and-applications","title":"Configuring Network Protocols and Applications","text":"<p>Another key feature of Mininet is its ability to configure and test various network protocols and applications. You can use Mininet to simulate different types of traffic, such as TCP, UDP, and ICMP, and test their performance under various network conditions, such as bandwidth, delay, and loss.</p> <p>To configure network protocols and applications, you can use Mininet's CLI (command-line interface) to set various parameters and options. For example, you can use the <code>tc</code> command to configure the traffic control (TC) module, which allows you to simulate various network conditions. You can also use the <code>iperf</code> command to test the network throughput and latency, or the <code>ping</code> command to test the network connectivity and latency.</p> <p>For example, the following script creates a custom topology with a single root switch and two hosts, and configures the network to simulate a delay of 100ms and a loss rate of 10%:</p> <pre><code>from mininet.net import Mininet\nfrom mininet.topo import Topo\nfrom mininet.link import TCLink\nfrom mininet.util import dumpNodeConnections\nclass CustomTopo(Topo):\ndef build(self):\n# Add hosts\nh1 = self.addHost('h1')\nh2 = self.addHost('h2')\n# Add switch\ns1 = self.addSwitch('s1')\n# Add links with delay and loss rate\nself.addLink(h1, s1, cls=TCLink, delay='100ms', loss=10)\nself.addLink(h2, s1, cls=TCLink, delay='100ms', loss=10)\nif __name__ == '__main__':\ntopo = CustomTopo()\nnet = Mininet(topo=topo, link=TCLink)\n# Start the network\nnet.start()\nprint('Dumping host connections:')\ndumpNodeConnections(net.hosts)\n# Test connectivity\nprint('Testing connectivity...')\nnet.pingAll()\n# Launch the Mininet CLI\nnet.interact()\n# Stop the network\nnet.stop()\n</code></pre>","tags":["networking","docker","mininet"]},{"location":"guides/learning-networking-with-mininet/index.html#using-mininet-with-sdn-controllers","title":"Using Mininet with SDN Controllers","text":"<p>Mininet can be used with various software-defined networking (SDN) controllers, such as OpenDaylight, ONOS, Ryu, and POX. SDN controllers allow you to centralize the control and management of your virtual network, and program the network behavior using various SDN protocols, such as OpenFlow, P4, and NETCONF.</p> <p>To use Mininet with an SDN controller, you need to install and configure the controller first. You can then launch Mininet with the <code>--controller</code> option and specify the IP address and port number of the controller. For example, the following command launches Mininet with the Ryu controller:</p> <pre><code>sudo mn --controller=remote,ip=127.0.0.1,port=6653\n</code></pre> <p>Once you have launched Mininet with the controller, you can use the controller's API to program the network behavior, such as configuring flow rules, collecting statistics, and responding to events. You can also use Mininet's CLI to interact with the network and monitor its behavior in real-time.</p>","tags":["networking","docker","mininet"]},{"location":"guides/learning-networking-with-mininet/index.html#testing-multicast","title":"Testing Multicast","text":"<p>The <code>sudo mn</code> command launches a new Mininet instance with a default topology that includes a single switch and two hosts. The <code>xterm h1 h2</code> command opens two xterm windows, one for each host, to allow for easy command-line interaction with the hosts.</p> <p>The following commands configure the hosts to enable the reception of broadcast ICMP echo requests, add a route to the multicast network 224.0.0.0/4, and configure the hosts to join the multicast group 224.0.0.2 on their respective Ethernet interfaces. The <code>ip maddr show</code> command is used to display the current multicast group memberships of the hosts.</p> <p>Finally, the <code>h1 ping -I h1-eth0 224.0.0.2</code> command sends an ICMP echo request to the multicast address 224.0.0.2 using the <code>h1-eth0</code> interface. This command is used to test whether the hosts are properly configured to receive and process multicast packets.</p> <pre><code>sudo mn\nxterm h1 h2\n\nh1 sysctl net.ipv4.icmp_echo_ignore_broadcasts=0\nh2 sysctl net.ipv4.icmp_echo_ignore_broadcasts=0\n\nh1 route add -net 224.0.0.0 netmask 240.0.0.0 dev h1-eth0\nh2 route add -net 224.0.0.0 netmask 240.0.0.0 dev h2-eth0\n\nh1 ip addr add 224.0.0.2/32 dev h1-eth0 autojoin\nh2 ip addr add 224.0.0.2/32 dev h2-eth0 autojoin\n\nh1 ip maddr show\nh2 ip maddr show\n\nh1 ping -I h1-eth0 224.0.0.2\n</code></pre>","tags":["networking","docker","mininet"]},{"location":"guides/learning-networking-with-mininet/index.html#vlan-tagging-switch-port","title":"VLAN Tagging Switch Port","text":"<p>This Mininet example demonstrates how to use the Open vSwitch <code>ovs-vsctl</code> command to configure VLAN tagging and create internal interfaces in a network with two switches, <code>s1</code> and <code>s2</code>.</p> <p>The first two commands set the VLAN tag of port <code>s1-eth1</code> to 80 on switch <code>s1</code>, and set the type of interface <code>s1-eth1</code> to <code>internal</code>. Similarly, the third and fourth commands set the VLAN tag of port <code>s2-eth1</code> to 90 on switch <code>s2</code>, and set the type of interface <code>s2-eth1</code> to <code>internal</code>.</p> <p>The last command sets the VLAN tag of port <code>s2-eth3</code> to 20 on switch <code>s2</code>, and sets the type of interface <code>s2-eth3</code> to <code>internal</code>. This creates a new internal interface that can be used to connect the switch to a virtual machine or container running on the host.</p> <pre><code>s1 sudo ovs-vsctl set port s1-eth1 tag=80 -- set interface s1-eth1 type=internal\n\ns2 sudo ovs-vsctl set port s2-eth1 tag=90 -- set interface s2-eth1 type=internal\n\ns2 sudo ovs-vsctl set port s2-eth3 tag=20 -- set interface s2-eth3 type=internal\n</code></pre>","tags":["networking","docker","mininet"]},{"location":"guides/learning-networking-with-mininet/index.html#adding-default-route","title":"Adding Default Route","text":"<pre><code>h3 ip route add 192.168.1.0/24 dev h3-eth0\nh3 route add default gw 192.168.1.1 h3-eth0\n</code></pre>","tags":["networking","docker","mininet"]},{"location":"guides/learning-networking-with-mininet/index.html#troubleshooting","title":"Troubleshooting","text":"","tags":["networking","docker","mininet"]},{"location":"guides/learning-networking-with-mininet/index.html#finding-pid-of-container","title":"Finding pid of Container","text":"<pre><code>sudo docker inspect --format '{{.State.Pid}}' mininet-r0\n</code></pre>","tags":["networking","docker","mininet"]},{"location":"guides/learning-networking-with-mininet/index.html#entering-vyos-container","title":"Entering vyos Container","text":"<pre><code>sudo mnexec -c -e `sudo docker inspect --format '{{.State.Pid}}' mininet-r0`  sh -is\n</code></pre>","tags":["networking","docker","mininet"]},{"location":"guides/learning-networking-with-mininet/index.html#get-a-vyos-shell-where-show-works","title":"Get a vyos Shell Where <code>show</code> works","text":"<pre><code>sudo mnexec -e 70522 env -i PS1=\"#\" bash  -is mininet:r0\n</code></pre> <code>#networking</code> <code>#docker</code> <code>#mininet</code>","tags":["networking","docker","mininet"]},{"location":"guides/dotfiles/how-i-overengineered-my-home-network/index.html","title":"How I Overengineered My Home Network","text":"","tags":["home","network","security","edgerouter","unifi","wip"]},{"location":"guides/dotfiles/how-i-overengineered-my-home-network/index.html#how-i-overengineered-my-home-network","title":"How I Overengineered My Home Network","text":"<p>A long while back I stumbled across Ben Balter's post \"How I over-engineered my home network for privacy and security on HN, and appreciated his thoughtful, yet excessive, approach to designing his home's network.</p> <p>I created this note while architecting my own home network.</p>","tags":["home","network","security","edgerouter","unifi","wip"]},{"location":"guides/dotfiles/how-i-overengineered-my-home-network/index.html#10000-ft-view","title":"10000-ft View","text":"<p>My physical network looks something like this:</p> <p></p> <p>My logical network looks like this:</p> <p></p>","tags":["home","network","security","edgerouter","unifi","wip"]},{"location":"guides/dotfiles/how-i-overengineered-my-home-network/index.html#vlan-config","title":"VLAN Config","text":"<p>With the network segmented using VLANs:</p> VLAN Subnet Domain Name SSID Zone 1003 172.1.1.x guestwifi.home Guest WiFi guest-wifi GUEST 3 172.1.3.x iot.home IoT WiFi iot UNTRUSTED 4 172.1.4.x ha.home Home Assistant N/A GUEST 5 172.1.3.x iot-voice.home IoT Voice WiFi iot-voice UNTRUSTED 6 172.1.3.x iot-tv.home IoT TV WiFi iot-tv UNTRUSTED 10 192.168.1.x mgmt.home Management N/A LAN 11 192.168.1.x wired.home Wired N/A LAN <p>Each wireless SSID is assigned to a separate VLAN.</p> <p>Each wired connection is assigned a VLAN by defining VLAN IDs on each switch on the network:</p> <p>Edgerouter X Ports</p> Interface Description VLAN (PID) VLAN (VID) eth0 WAN/Internet eth1 Core Switch eth2 Living Room TV eth3 Home Assistant eth4 Living Room Wifi","tags":["home","network","security","edgerouter","unifi","wip"]},{"location":"guides/dotfiles/how-i-overengineered-my-home-network/index.html#wireless-config","title":"Wireless Config","text":"<p>The WAPs broadcast three SSIDs: <code>guest-wifi</code>, <code>iot-voice</code>, and <code>iot-voice</code>; the latter two being hidden.  </p>","tags":["home","network","security","edgerouter","unifi","wip"]},{"location":"guides/dotfiles/how-i-overengineered-my-home-network/index.html#firewall-config","title":"Firewall Config","text":"<p>My firewall uses zone-based policies to specifically enable traffic between zones.</p> Source Destination Policy LAN ALL Allow LOCAL ALL Allow WAN IN Established GUEST LAN Deny GUEST WAN Allow GUEST LOCAL Deny except DHCP/DNS UNTRUSTED LAN Deny UNTRUSTED WAN Deny UNTRUSTED GUEST Established GUEST LOCAL Deny except DHCP/DNS","tags":["home","network","security","edgerouter","unifi","wip"]},{"location":"guides/dotfiles/how-i-overengineered-my-home-network/index.html#edgerouter-x-setup","title":"Edgerouter X Setup","text":"","tags":["home","network","security","edgerouter","unifi","wip"]},{"location":"guides/dotfiles/how-i-overengineered-my-home-network/index.html#getting-started","title":"Getting Started","text":"<p>The EdgeRouter X is based on Vyatta, here are a few things you should know about working with Vyatta.</p> <p>Vyatta is a Linux-based router distribution based on Debian Jessie, which implements a configuration system which...</p> <p>The configuration system is installed via standard Debian packages:</p> <pre><code>apt search vyatta-cfg\ndpkg -L vyatta-cfg\n</code></pre> <p>Upon logging, you are in the \"operational\" mode.  </p> <p>To configure the system you have enter \"configuration\" mode:</p> <pre><code>$ configure\n# &lt;- indicates configuration mode\n</code></pre> <p>Now you are able to use the <code>set</code>, <code>delete</code>, and <code>show</code> commands to modify the system.</p> <ul> <li>Changes are staged until they are committed using <code>commit</code></li> <li>Changes can be discarded with <code>discard</code></li> <li>Changes are written to disk using <code>save</code></li> <li>Return to operational mode using <code>exit</code></li> </ul> <p>Logging into the router:</p> <pre><code>ssh-add ~/.ssh/coniferadmin\nssh coniferadmin@router.home\n</code></pre>","tags":["home","network","security","edgerouter","unifi","wip"]},{"location":"guides/dotfiles/how-i-overengineered-my-home-network/index.html#further-reading","title":"Further Reading","text":"<ul> <li>Boot Process.</li> </ul>","tags":["home","network","security","edgerouter","unifi","wip"]},{"location":"guides/dotfiles/how-i-overengineered-my-home-network/index.html#commands","title":"Commands","text":"<ul> <li> <p>Show configuration</p> <p>show configuration</p> </li> <li> <p>Show configuration as commands</p> <p>show configuration commands</p> </li> <li> <p>SSH</p> <ul> <li> <p>Show all public keys </p><pre><code>show configuration commands | egrep public-keys\n</code></pre> </li> <li> <p>Delete a user's public key  <code>delete system login user coniferadmin authentication public-keys</code></p> </li> </ul> </li> </ul>","tags":["home","network","security","edgerouter","unifi","wip"]},{"location":"guides/dotfiles/how-i-overengineered-my-home-network/index.html#configuration-directory","title":"Configuration Directory","text":"<p>The EdgeRouter config directory is located at /config\u00a0and is used to store various system files such as:</p> <ul> <li><code>Boot/startup configuration file</code> See the\u00a0Backup and Restore Configuration article for more information.</li> <li><code>OpenVPN certificates and key files</code>\u00a0See the\u00a0OpenVPN Server and\u00a0OpenVPN Site-to-Site articles for more information.</li> <li><code>VPN RSA keys</code> See the\u00a0Dynamic Site-to-Site IPsec VPN using FQDNs article for more information.</li> <li><code>Custom (boot/startup) scripts</code> See the\u00a0Run Operational Mode Command from Scripts article for more information.</li> <li><code>Commit archive</code> See the Archiving and Managing the Configuration Files\u00a0article for more information.</li> </ul> <p>Files stored in the config directory persist between reboots and firmware upgrades. The directory is only cleared when the device is reset to factory defaults. The contents of the config directory can either be downloaded through UNMS, the local Web UI (contained in the configuration backup archive) or transferred/copied from the Command Line. </p> <p>Each method is demonstrated below. - https://help.ui.com/hc/en-us/articles/360044753453-EdgeRouter-Backing-Up-the-Config-Directory</p> <p>.deb packages in <code>/config/data/firstboot/install-packages/</code> are automatically installed after firmware updates.</p> <p>The contents of <code>/config/scripts/firstboot.d/</code> are executed once after each firmware update.</p>","tags":["home","network","security","edgerouter","unifi","wip"]},{"location":"guides/dotfiles/how-i-overengineered-my-home-network/index.html#useful-articles","title":"Useful Articles","text":"<ul> <li>Getting Started</li> </ul>","tags":["home","network","security","edgerouter","unifi","wip"]},{"location":"guides/dotfiles/how-i-overengineered-my-home-network/index.html#administration-setup","title":"Administration Setup","text":"","tags":["home","network","security","edgerouter","unifi","wip"]},{"location":"guides/dotfiles/how-i-overengineered-my-home-network/index.html#ssh-setup","title":"SSH Setup","text":"<ol> <li>Enable OpenSSH on Windows</li> </ol> <pre><code># Set the sshd service to be started automatically\nGet-Service -Name ssh-agent | Set-Service -StartupType Automatic\n\n# Now start the sshd service\nStart-Service sshd\n</code></pre> 2. Generate coniferadmin SSH keypair: <code>ssh-keygen -t ed25519 -C coniferadmin -f coniferadmin</code> 3. Add key to ssh-agent: <code>ssh-add coniferadmin</code> 4. Copy key to router: <code>scp coniferadmin.pub coniferadmin@router.home:~/</code> 5. Load key on router: <pre><code>configure\nloadkey coniferadmin coniferadmin.pub\nset service ssh disable-password-authentication\ncommit; save; exit\nshow configuration commands | egrep public-keys\nrm coniferadmin.pub\n</code></pre>","tags":["home","network","security","edgerouter","unifi","wip"]},{"location":"guides/dotfiles/how-i-overengineered-my-home-network/index.html#setup-wireguard","title":"Setup Wireguard","text":"<ul> <li>https://www.erianna.com/wireguard-ubiquity-edgeos/</li> </ul> <pre><code>cd /tmp\n\n# Download the appropriate version\ncurl -qLs https://github.com/WireGuard/wireguard-vyatta-ubnt/releases/download/1.0.20210606-2/e50-v2-v1.0.20210606-v1.0.20210914.deb -o wireguard.deb\nsudo dpkg -i wireguard.deb\n\nwg genkey | tee /dev/tty | wg pubkey\n\n# Private key: abc\n# Public key: xxx\n\nconfigure\n\n# Adjust the address route as necessary\nset interfaces wireguard wg0 address 192.168.33.1/24\nset interfaces wireguard wg0 listen-port 51820\nset interfaces wireguard wg0 route-allowed-ips true\n\nset interfaces wireguard wg0 private-key abc\n\ncommit\n\n### Setup client then do the following\n\nset interfaces wireguard wg0 peer def allowed-ips 192.168.33.2/32\n\ncommit\nsave\n</code></pre>","tags":["home","network","security","edgerouter","unifi","wip"]},{"location":"guides/dotfiles/how-i-overengineered-my-home-network/index.html#dhcpdns-setup","title":"DHCP/DNS Setup","text":"<ul> <li>https://help.ui.com/hc/en-us/articles/115002673188</li> </ul>","tags":["home","network","security","edgerouter","unifi","wip"]},{"location":"guides/dotfiles/how-i-overengineered-my-home-network/index.html#create-static-dns-entry-for-unifi-controller","title":"Create Static DNS Entry for Unifi Controller","text":"<ul> <li>https://community.ui.com/questions/Create-DNS-enteries/ab712740-d579-4c89-824a-cda582a6bdd4</li> </ul> <pre><code>configure\ndelete system static-host-mapping host-name unifi.home\nset system static-host-mapping host-name unifi.home inet 192.168.1.74\ncommit;save;exit\n</code></pre>","tags":["home","network","security","edgerouter","unifi","wip"]},{"location":"guides/dotfiles/how-i-overengineered-my-home-network/index.html#set-router-domain","title":"Set Router Domain","text":"<pre><code>configure\nset system domain-name router.home\ncommit; save; exit\n</code></pre>","tags":["home","network","security","edgerouter","unifi","wip"]},{"location":"guides/dotfiles/how-i-overengineered-my-home-network/index.html#setup-dnsmasq","title":"Setup DNSMasq","text":"<pre><code>configure\nset service dhcp-server use-dnsmasq enable \ncommit ; save; exit\n</code></pre>","tags":["home","network","security","edgerouter","unifi","wip"]},{"location":"guides/dotfiles/how-i-overengineered-my-home-network/index.html#rename-dhcp-servers","title":"Rename DHCP Servers","text":"<pre><code>configure\nedit service dhcp-server\nrename shared-network-name LAN to shared-network-name mgmt.home\nrename shared-network-name LAN-WLAN-Untrusted to shared-network-name guestwifi.home\nrename shared-network-name WLAN-IoT to shared-network-name iot.home\ntop\ncommit; save; exit\n</code></pre>","tags":["home","network","security","edgerouter","unifi","wip"]},{"location":"guides/dotfiles/how-i-overengineered-my-home-network/index.html#redirect-dns-on-untrusted-vlans-to-internal-adguard-server","title":"Redirect DNS on Untrusted VLANs to Internal AdGuard Server","text":"<ul> <li>https://www.derekseaman.com/2019/10/redirect-hard-coded-dns-to-pi-hole-using-ubiquiti-edgerouter.html</li> </ul>","tags":["home","network","security","edgerouter","unifi","wip"]},{"location":"guides/dotfiles/how-i-overengineered-my-home-network/index.html#setup-1111-dns","title":"Setup 1.1.1.1 DNS","text":"<pre><code>sudo mkdir /config/dnsmasq\nsudo chown dnsmasq:nogroup /config/dnsmasq\n\nconfigure\nset service dns forwarding name-server 1.1.1.1\nset service dns forwarding name-server 1.0.0.1\nset service dns forwarding name-server '2606:4700:4700::1111'\nset service dns forwarding name-server '2606:4700:4700::1001'\nset service dns forwarding options dnssec\nset service dns forwarding options trust-anchor=.,19036,8,2,49AAC11D7B6F6446702E54A1607371607A1A41855200FD2CE1CDDE32F24E8FB5\nset service dns forwarding options trust-anchor=.,20326,8,2,E06D44B80B8F1D39A95C0B0D7C65D08458E880409BBC683457104237C7F8EC8D\nset service dns forwarding options dnssec-check-unsigned\nset service dns forwarding options dnssec-timestamp=/config/dnsmasq/dnsmasq.time\ndelete system name-server\nset system name-server 127.0.0.1\ncommit; save; exit\n\nshow dns forwarding nameservers\nshow dns forwarding statistics\n</code></pre> - https://help.ui.com/hc/en-us/articles/115010913367-EdgeRouter-DNS-Forwarding-Setup-and-Options","tags":["home","network","security","edgerouter","unifi","wip"]},{"location":"guides/dotfiles/how-i-overengineered-my-home-network/index.html#setup-encrypted-dns","title":"Setup Encrypted DNS","text":"<ul> <li>https://timmydouglas.com/2019/06/09/dns-over-tls.html</li> </ul> <pre><code>TBD\n</code></pre>","tags":["home","network","security","edgerouter","unifi","wip"]},{"location":"guides/dotfiles/how-i-overengineered-my-home-network/index.html#setup-mdns","title":"Setup mDNS","text":"<ul> <li>https://help.ui.com/hc/en-us/articles/360035256553-EdgeRouter-mDNS-Repeater</li> </ul> <p>Helps make Chromecast work across subnets.</p> <pre><code>configure\nset service mdns repeater interface switch0.1003\nset service mdns repeater interface switch0.4\nset service mdns repeater interface switch0\ncommit; save; exit\n</code></pre>","tags":["home","network","security","edgerouter","unifi","wip"]},{"location":"guides/dotfiles/how-i-overengineered-my-home-network/index.html#setup-igmp-proxying","title":"Setup IGMP Proxying","text":"<ul> <li>https://help.ui.com/hc/en-us/articles/204961854-EdgeRouter-IGMP-Proxy</li> </ul> <pre><code>set protocols igmp-proxy interface switch0 role upstream\nset protocols igmp-proxy interface switch0.1003 role downstream\n\nset protocols igmp-proxy interface switch0 threshold 1\nset protocols igmp-proxy interface switch0 alt-subnet 0.0.0.0/0\n\nset protocols igmp-proxy interface switch0.1003 threshold 1\nset protocols igmp-proxy interface switch0.1003 alt-subnet 0.0.0.0/0\n\ncommit; save; exit\n\nshow ip multicast mfc\nshow ip multicast interfaces\n</code></pre>","tags":["home","network","security","edgerouter","unifi","wip"]},{"location":"guides/dotfiles/how-i-overengineered-my-home-network/index.html#setup-vlans-subnets","title":"Setup VLANs / Subnets","text":"<pre><code>configure\n\nset interfaces switch switch0 vif 1003 address 172.16.1.1/24\nset interfaces switch switch0 vif 1003 description 'guestwifi.home'\nset interfaces switch switch0 vif 1003 mtu 1500\n\nset interfaces switch switch0 vif 2 address 172.16.2.1/24\nset interfaces switch switch0 vif 2 description 'printer.home'\nset interfaces switch switch0 vif 2 mtu 1500\n\nset interfaces switch switch0 vif 3 address 172.16.3.1/24\nset interfaces switch switch0 vif 3 description 'iot.home'\nset interfaces switch switch0 vif 3 mtu 1500\n\nset interfaces switch switch0 vif 4 address 172.16.4.1/24\nset interfaces switch switch0 vif 4 description 'ha.home'\nset interfaces switch switch0 vif 4 mtu 1500\n\nset interfaces switch switch0 vif 10 address 192.168.10.1/24\nset interfaces switch switch0 vif 10 description 'mgmt.home'\nset interfaces switch switch0 vif 10 mtu 1500\n\nset interfaces switch switch0 vif 11 address 192.168.11.1/24\nset interfaces switch switch0 vif 11 description 'wired.home'\nset interfaces switch switch0 vif 11 mtu 1500\n\nset interfaces switch switch0 vif 12 address 192.168.12.1/24\nset interfaces switch switch0 vif 12 description 'wifi.home'\nset interfaces switch switch0 vif 12 mtu 1500\n\nset interfaces switch switch0 switch-port interface eth1 vlan vid 1003\nset interfaces switch switch0 switch-port interface eth1 vlan vid 2\nset interfaces switch switch0 switch-port interface eth1 vlan vid 3 \nset interfaces switch switch0 switch-port interface eth1 vlan vid 4\nset interfaces switch switch0 switch-port interface eth1 vlan vid 10\nset interfaces switch switch0 switch-port interface eth1 vlan vid 11\nset interfaces switch switch0 switch-port interface eth1 vlan vid 12\n\nset service dns forwarding listen-on switch0\nset service dns forwarding listen-on switch0.1003\nset service dns forwarding listen-on switch0.2\nset service dns forwarding listen-on switch0.3\nset service dns forwarding listen-on switch0.4\nset service dns forwarding listen-on switch0.10\nset service dns forwarding listen-on switch0.11\nset service dns forwarding listen-on switch0.12\n</code></pre>","tags":["home","network","security","edgerouter","unifi","wip"]},{"location":"guides/dotfiles/how-i-overengineered-my-home-network/index.html#setup-dhcp-servers","title":"Setup DHCP Servers","text":"<pre><code>configure\n\nset service dhcp-server disabled false\nset service dhcp-server hostfile-update disable\n\nset service dhcp-server shared-network-name guestwifi.home authoritative enable\nset service dhcp-server shared-network-name guestwifi.home subnet 172.16.1.0/24 default-router 172.16.1.1\nset service dhcp-server shared-network-name guestwifi.home subnet 172.16.1.0/24 dns-server 172.16.1.1\nset service dhcp-server shared-network-name guestwifi.home subnet 172.16.1.0/24 domain-name guestwifi.home\nset service dhcp-server shared-network-name guestwifi.home subnet 172.16.1.0/24 lease 86400\nset service dhcp-server shared-network-name guestwifi.home subnet 172.16.1.0/24 start 172.16.1.50 stop 172.16.1.200\n\nset service dhcp-server shared-network-name printer.home authoritative enable\nset service dhcp-server shared-network-name printer.home subnet 172.16.2.0/24 default-router 172.16.2.1\nset service dhcp-server shared-network-name printer.home subnet 172.16.2.0/24 dns-server 172.16.2.1\nset service dhcp-server shared-network-name printer.home subnet 172.16.2.0/24 domain-name printer.home\nset service dhcp-server shared-network-name printer.home subnet 172.16.2.0/24 lease 86400\nset service dhcp-server shared-network-name printer.home subnet 172.16.2.0/24 start 172.16.2.50 stop 172.16.2.200\n\nset service dhcp-server shared-network-name iot.home authoritative enable\nset service dhcp-server shared-network-name iot.home subnet 172.16.3.0/24 default-router 172.16.3.1\nset service dhcp-server shared-network-name iot.home subnet 172.16.3.0/24 dns-server 172.16.3.1\nset service dhcp-server shared-network-name iot.home subnet 172.16.3.0/24 domain-name iot.home\nset service dhcp-server shared-network-name iot.home subnet 172.16.3.0/24 lease 86400\nset service dhcp-server shared-network-name iot.home subnet 172.16.3.0/24 start 172.16.3.50 stop 172.16.3.200\n\nset service dhcp-server shared-network-name ha.home authoritative enable\nset service dhcp-server shared-network-name ha.home subnet 172.16.4.0/24 default-router 172.16.4.1\nset service dhcp-server shared-network-name ha.home subnet 172.16.4.0/24 dns-server 172.16.4.1\nset service dhcp-server shared-network-name ha.home subnet 172.16.4.0/24 domain-name ha.home\nset service dhcp-server shared-network-name ha.home subnet 172.16.4.0/24 lease 86400\nset service dhcp-server shared-network-name ha.home subnet 172.16.4.0/24 start 172.16.4.50 stop 172.16.4.200\n\nset service dhcp-server shared-network-name native.home authoritative enable\nset service dhcp-server shared-network-name native.home subnet 192.168.1.0/24 default-router 192.168.1.1\nset service dhcp-server shared-network-name native.home subnet 192.168.1.0/24 dns-server 192.168.1.1\nset service dhcp-server shared-network-name native.home subnet 192.168.1.0/24 domain-name native.home\nset service dhcp-server shared-network-name native.home subnet 192.168.1.0/24 lease 86400\nset service dhcp-server shared-network-name native.home subnet 192.168.1.0/24 start 192.168.1.50 stop 192.168.1.200\n\nset service dhcp-server shared-network-name mgmt.home authoritative enable\nset service dhcp-server shared-network-name mgmt.home subnet 192.168.10.0/24 default-router 192.168.10.1\nset service dhcp-server shared-network-name mgmt.home subnet 192.168.10.0/24 dns-server 192.168.10.1\nset service dhcp-server shared-network-name mgmt.home subnet 192.168.10.0/24 domain-name mgmt.home\nset service dhcp-server shared-network-name mgmt.home subnet 192.168.10.0/24 lease 86400\nset service dhcp-server shared-network-name mgmt.home subnet 192.168.10.0/24 start 192.168.10.50 stop 192.168.10.200\n\nset service dhcp-server shared-network-name wired.home authoritative enable\nset service dhcp-server shared-network-name wired.home subnet 192.168.11.0/24 default-router 192.168.11.1\nset service dhcp-server shared-network-name wired.home subnet 192.168.11.0/24 dns-server 192.168.11.1\nset service dhcp-server shared-network-name wired.home subnet 192.168.11.0/24 domain-name wired.home\nset service dhcp-server shared-network-name wired.home subnet 192.168.11.0/24 lease 86400\nset service dhcp-server shared-network-name wired.home subnet 192.168.11.0/24 start 192.168.11.50 stop 192.168.11.200\n\nset service dhcp-server shared-network-name wifi.home authoritative enable\nset service dhcp-server shared-network-name wifi.home subnet 192.168.12.0/24 default-router 192.168.12.1\nset service dhcp-server shared-network-name wifi.home subnet 192.168.12.0/24 dns-server 192.168.12.1\nset service dhcp-server shared-network-name wifi.home subnet 192.168.12.0/24 domain-name wifi.home\nset service dhcp-server shared-network-name wifi.home subnet 192.168.12.0/24 lease 86400\nset service dhcp-server shared-network-name wifi.home subnet 192.168.12.0/24 start 192.168.12.50 stop 192.168.12.200\n\nset service dhcp-server static-arp disable\nset service dhcp-server use-dnsmasq enable\n\nconfigure; save; exit\n</code></pre>","tags":["home","network","security","edgerouter","unifi","wip"]},{"location":"guides/dotfiles/how-i-overengineered-my-home-network/index.html#setup-firewall","title":"Setup Firewall","text":"<ul> <li>https://help.ui.com/hc/en-us/articles/204952154-EdgeRouter-Zone-Based-Firewall</li> </ul> <pre><code>### CLEANUP\n\nconfigure\ndelete firewall name ALLOW_ALL\ndelete firewall name ALLOW_DNS_DHCP\ndelete firewall name ALLOW_DNS_DHCP_WEB_SSH\ndelete firewall name ALLOW_ESTABLISHED\ndelete firewall name ALLOW_PLEX\ndelete firewall name ALLOW_PLEX_REMOTE\ndelete firewall name ALLOW_WIREGUARD\n\ndelete firewall name ALLOW_ALL_IPv6\ndelete firewall ipv6-name ALLOW_ALL-IPv6\n\ndelete firewall ipv6-name ALLOW_ESTABLISHED-IPv6\ndelete firewall ipv6-name ALLOW_ESTABLISHED_IPv6\ncommit;save;exit;\nshow configuration commands | egrep firewall\n</code></pre> <pre><code>configure\n\n## Reusable rules to allow established connections and drop invalid packets\n# IPv4 rules\nedit firewall name ALLOW_ESTABLISHED\nset default-action drop\nset enable-default-log\nset rule 1 action accept\nset rule 1 state established enable\nset rule 1 state related enable\nset rule 2 action drop\nset rule 2 log enable\nset rule 2 state invalid enable\ntop\n\n# IPv6 rules (ICMP is required because of how IPv6 works)\nedit firewall ipv6-name ALLOW_ESTABLISHED_IPv6\nset default-action drop\nset enable-default-log\nset rule 1 action accept\nset rule 1 state established enable\nset rule 1 state related enable\nset rule 2 action drop\nset rule 2 log enable\nset rule 2 state invalid enable\nset rule 100 action accept\nset rule 100 protocol ipv6-icmp\ntop\n\n# Allow all connections\nedit firewall\ncopy name ALLOW_ESTABLISHED to name ALLOW_ALL\nset name ALLOW_ALL default-action accept\ndelete name ALLOW_ALL enable-default-log\ntop\n\nedit firewall\ncopy ipv6-name ALLOW_ESTABLISHED_IPv6 to ipv6-name ALLOW_ALL_IPv6\nset ipv6-name ALLOW_ALL_IPv6 default-action accept\ndelete ipv6-name ALLOW_ALL_IPv6 enable-default-log\ntop\n\n## Allow DNS/DHCP to Local from anywhere\nedit firewall\ncopy name ALLOW_ESTABLISHED to name ALLOW_DNS_DHCP\nedit name ALLOW_DNS_DHCP\n\nset rule 600 description \"Allow DNS\"\nset rule 600 action accept\nset rule 600 destination port 53\nset rule 600 protocol tcp_udp\n\nset rule 700 description \"Allow DHCP\"\nset rule 700 action accept\nset rule 700 destination port 67,68\nset rule 700 protocol udp\ntop\n\n## Allow Wireguard to Local\nedit firewall\ncopy name ALLOW_ESTABLISHED to name ALLOW_WIREGUARD\nedit name ALLOW_WIREGUARD\n\n#set firewall name ALLOW_WIREGUARD rule 600 description \"Allow Wireguard\"\n\nset rule 600 description \"Allow Wireguard\"\nset rule 600 action accept\nset rule 600 destination port 51820\nset rule 600 protocol udp\ntop\n\n## Allow guestwifi.home Access to Plex on Monolith\n# - https://support.plex.tv/articles/201543147-what-network-ports-do-i-need-to-allow-through-my-firewall/\nedit firewall\ncopy name ALLOW_ESTABLISHED to name ALLOW_PLEX\nedit name ALLOW_PLEX\n\nset rule 600 description \"Allow Plex TCP\"\nset rule 600 action accept\nset rule 600 destination port 8324,32400\nset rule 600 destination address 192.168.11.182\nset rule 600 protocol tcp\n\nset rule 700 description \"Allow Plex UDP\"\nset rule 700 action accept\nset rule 700 destination port 32410,32412,32413,32414 \nset rule 700 protocol udp\ntop\n\nedit firewall\ncopy name ALLOW_ESTABLISHED to name ALLOW_PLEX_REMOTE\nedit name ALLOW_PLEX_REMOTE\n\nset rule 600 description \"Allow Plex TCP\"\nset rule 600 action accept\nset rule 600 destination port 32400\nset rule 600 destination address 192.168.11.182\nset rule 600 protocol tcp\ntop\n\n## LAN to Local (to router)\nedit firewall\ncopy name ALLOW_DNS_DHCP to name ALLOW_DNS_DHCP_WEB_SSH\nedit name ALLOW_DNS_DHCP_WEB_SSH\nset rule 100 action accept\nset rule 100 protocol icmp\n\nset rule 200 description \"Allow HTTP/HTTPS\"\nset rule 200 action accept\nset rule 200 destination port 80,443\nset rule 200 protocol tcp\n\nset rule 800 description \"Allow SSH\"\nset rule 800 action accept\nset rule 800 destination port 22\nset rule 800 protocol tcp\ntop\ncommit\n\n## Zone Setup\n\n# Remove existing WAN Rules\ndelete interfaces ethernet eth0 firewall\ndelete firewall name WAN_IN\ndelete firewall name WAN_LOCAL\n\n# WAN Zone\nset zone-policy zone wan default-action drop\nset zone-policy zone wan from local firewall name ALLOW_ALL\nset zone-policy zone wan from lan firewall name ALLOW_ALL\nset zone-policy zone wan from guest firewall name ALLOW_ALL\nset zone-policy zone wan interface eth0\n\n# LAN Zone\nset zone-policy zone lan default-action drop\nset zone-policy zone lan from local firewall name ALLOW_ALL \nset zone-policy zone lan from wan firewall name ALLOW_PLEX_REMOTE\nset zone-policy zone lan from guest firewall name ALLOW_PLEX\nset zone-policy zone lan from wireguard firewall name ALLOW_ESTABLISHED\nset zone-policy zone lan interface switch0\nset zone-policy zone lan interface switch0.10\nset zone-policy zone lan interface switch0.11\nset zone-policy zone lan interface switch0.12\n\n# GUEST Zone\nset zone-policy zone guest default-action drop\nset zone-policy zone guest from local firewall name ALLOW_ALL\nset zone-policy zone guest from wan firewall name ALLOW_ESTABLISHED\nset zone-policy zone guest from lan firewall name ALLOW_ALL\nset zone-policy zone guest from untrusted firewall name ALLOW_ESTABLISHED\nset zone-policy zone guest from wireguard firewall name ALLOW_ALL\nset zone-policy zone guest interface switch0.4\nset zone-policy zone guest interface switch0.1003\n\n# LOCAL Zone (to Router)\nset zone-policy zone local default-action drop\nset zone-policy zone local from wan firewall name ALLOW_ESTABLISHED\nset zone-policy zone local from lan firewall name ALLOW_DNS_DHCP_WEB_SSH\nset zone-policy zone local from guest firewall name ALLOW_DNS_DHCP\nset zone-policy zone local from untrusted firewall name ALLOW_DNS_DHCP\nset zone-policy zone local from wireguard firewall name ALLOW_WIREGUARD\nset zone-policy zone local local-zone\n\n# UNTRUSTED Zone\nset zone-policy zone untrusted default-action drop\nset zone-policy zone untrusted from lan firewall name ALLOW_ALL\nset zone-policy zone untrusted from guest firewall name ALLOW_ALL\nset zone-policy zone untrusted from local firewall name ALLOW_ALL\nset zone-policy zone untrusted interface switch0.2\nset zone-policy zone untrusted interface switch0.3\n\n# WIREGUARD Zone\nset zone-policy zone wireguard from guest firewall name ALLOW_ALL\nset zone-policy zone wireguard from lan firewall name ALLOW_ALL\nset zone-policy zone wireguard from wan firewall name ALLOW_WIREGUARD\nset zone-policy zone wireguard interface wg0\n\ncommit; save\n</code></pre>","tags":["home","network","security","edgerouter","unifi","wip"]},{"location":"guides/dotfiles/how-i-overengineered-my-home-network/index.html#hardware-offloading","title":"Hardware Offloading","text":"<ul> <li>https://help.ui.com/hc/en-us/articles/115006567467-EdgeRouter-Hardware-Offloading</li> </ul> <pre><code>configure\n\nset system offload hwnat disable\nset system offload ipsec disable \n\ncommit ; save; exit\n</code></pre>","tags":["home","network","security","edgerouter","unifi","wip"]},{"location":"guides/dotfiles/how-i-overengineered-my-home-network/index.html#ubiquiti-usw-lite-8-poe","title":"Ubiquiti USW-Lite-8-Poe","text":"","tags":["home","network","security","edgerouter","unifi","wip"]},{"location":"guides/dotfiles/how-i-overengineered-my-home-network/index.html#ports","title":"Ports","text":"Port Description VLAN(s) 1 Upstairs Guest Bedroom 2 Downstairs Guest Bedroom (Left) 3 Kitchen 4 Downstairs Guest Bedroom (Right) 5 Unknown 6 Master Bedroom 1003 7 Living Room 1003 8 Family Room 1003","tags":["home","network","security","edgerouter","unifi","wip"]},{"location":"guides/dotfiles/how-i-overengineered-my-home-network/index.html#unifi-raspberry-pi","title":"UniFi Raspberry Pi","text":"<p>UniFi Controller is running as a Docker image on a BalenaOS-based Raspberry Pi host.</p>","tags":["home","network","security","edgerouter","unifi","wip"]},{"location":"guides/dotfiles/how-i-overengineered-my-home-network/index.html#accessing-host","title":"Accessing Host","text":"<pre><code>ssh pi@unifi.home -p 22222\n</code></pre>","tags":["home","network","security","edgerouter","unifi","wip"]},{"location":"guides/dotfiles/how-i-overengineered-my-home-network/index.html#docker-admin","title":"Docker Admin","text":"<p>The image used is: https://hub.docker.com/r/jacobalberty/unifi - Show running containers: <code>balena ps</code> - Update container image: <code>balena pull jacobalberty/unifi</code></p> <pre><code>balena stop &lt;container id&gt;\nbalena rm &lt;container id&gt;\nbalena run -d --restart unless-stopped --init -p 8080:8080 -p 8443:8443 -p 3478:3478/udp -e TZ='America/Los_Angeles' -v /mnt/data/unifi:/unifi --name unifi jacobalberty/unifi:latest\nbalena run -d --restart unless-stopped --init -p 8080:8080 -p 8443:8443 -p 3478:3478/udp -e TZ='America/Los_Angeles' -v /mnt/data/unifi:/unifi --name unifi jacobalberty/unifi:latest\n</code></pre>","tags":["home","network","security","edgerouter","unifi","wip"]},{"location":"guides/dotfiles/how-i-overengineered-my-home-network/index.html#todo","title":"TODO","text":"<ul> <li>Update HA config to separate Supervisor network from main interface network <ul> <li>https://github.com/home-assistant/operating-system/blob/dev/Documentation/network.md</li> </ul> </li> </ul>","tags":["home","network","security","edgerouter","unifi","wip"]},{"location":"guides/dotfiles/how-i-overengineered-my-home-network/index.html#tutorial","title":"Tutorial","text":"<ul> <li>Navigate to: https://searchitoperations.techtarget.com/tutorial/Use-Docker-and-Alpine-Linux-to-build-lightweight-containers</li> <li>Run <code>docker run -i -t alpine /bin/sh</code> </li> <li>Type <code>ip link add br0 type bridge</code></li> <li>Notice error message</li> <li>Explains how to resolve error: https://stackoverflow.com/questions/27708376/why-am-i-getting-an-rtnetlink-operation-not-permitted-when-using-pipework-with-d</li> <li> <p>Run <code>docker run --cap-add=NET_ADMIN -i -t alpine /bin/sh</code></p> </li> <li> <p>apk add iproute2</p> </li> </ul> <p></p> <code>#home</code> <code>#network</code> <code>#security</code> <code>#edgerouter</code> <code>#unifi</code> <code>#wip</code>","tags":["home","network","security","edgerouter","unifi","wip"]},{"location":"guides/dotfiles/how-i-setup-this-blog/index.html","title":"How I Setup This Blog","text":"","tags":["obsidian","mkdocs","github"]},{"location":"guides/dotfiles/how-i-setup-this-blog/index.html#how-i-setup-this-blog","title":"How I Setup This Blog","text":"<p>I recently migrated my, uh... pkm \"system\" from a Joplin and OneNote mashup to one centered solely around Obsidian. </p> <p>See, months ago I read about Zettelkasten, which began my foray into the world of roam-likes, starting with logseq and ending with Obsidian.</p> <p>What actually hooked me was the maturity of its vim bindings - Joplin\u2019s are great, logseq\u2019s feel clunky.</p>","tags":["obsidian","mkdocs","github"]},{"location":"guides/dotfiles/how-i-setup-this-blog/index.html#10000-ft-view","title":"10000-ft View","text":"<p>I write notes in Obsidian.  When I hit save, my changes are pushed to GitHub, which rebuilds and redeploys my site.  </p> <p>It looks something like this:</p> <p></p> <ul> <li>Write notes in Obsidian</li> <li>Store notes on GitHub</li> <li>Convert notes to HTML with MkDocs</li> <li>GitHub Pages used for hosting</li> </ul>","tags":["obsidian","mkdocs","github"]},{"location":"guides/dotfiles/how-i-setup-this-blog/index.html#obsidian-git","title":"Obsidian Git","text":"<p>Here is my Obsidian setup: the key component being Obsidian Git:</p> <p></p> <p>'Hitting save' entails a <code>git commit</code> using:</p> <p></p> <p>Followed by <code>git push</code> using:</p> <p></p> <p>Obsidian Git auto-generates a commit message, so the above is all it takes for me to deploy.</p>","tags":["obsidian","mkdocs","github"]},{"location":"guides/dotfiles/how-i-setup-this-blog/index.html#mkdocs","title":"MkDocs","text":"<p>MkDocs is a static-site generator: it converts Markdown (<code>.md</code>) files into <code>.html</code>, similar to Jekyll and Hugo.</p> <p>MkDocs-Material is an MkDocs distribution which comes with a pretty theme and a number of compelling extensions which make your site look and feel modern: see here</p>","tags":["obsidian","mkdocs","github"]},{"location":"guides/dotfiles/how-i-setup-this-blog/index.html#customization","title":"Customization","text":"<p>mkdocs-obsidian my customized MkDocs-Material configuration, based off mr-karan's repository.</p> <p>I wrote code to scratch itches, adding:</p> <ul> <li>A way to deploy only \"Published\" notes, keeping \"Drafts\" private</li> <li>A way to \"slugify\" filenames so my URLs would be SEO-friendly</li> <li>Fixes for buggy \"<code>[[wikistyle]]</code>\" link rendering</li> </ul>","tags":["obsidian","mkdocs","github"]},{"location":"guides/dotfiles/how-i-setup-this-blog/index.html#hooks","title":"Hooks","text":"","tags":["obsidian","mkdocs","github"]},{"location":"guides/dotfiles/how-i-setup-this-blog/index.html#only_include_publishedpy","title":"only_include_published.py","text":"<p>In lieu of using separate Obsidian vaults, or segregating my notes by subfolder, I prefer to distinguish \"Published\" notes from drafts through frontmatter metadata.  </p> <p>Specifically, by denoting \"Published\" notes as those that have the <code>publish</code> key set to <code>true</code>, which looks like:</p> <pre><code>---\npublish: true\n---\n</code></pre> <p>This simple MkDocs hook triggers when <code>on_files</code> fires, reading each note and filtering for notes with frontmatter containing <code>publish: true</code>.</p> <pre><code>import os, logging, typing, frontmatter\nfrom typing import Optional\nimport mkdocs.plugins\nfrom mkdocs.structure.pages import Page\nfrom mkdocs.structure.files import Files\nfrom mkdocs.config.defaults import MkDocsConfig\nlog = logging.getLogger('mkdocs')\ndef is_page_published(meta: typing.Dict) -&gt; bool:\nif 'publish' in meta:\nreturn meta['publish'] == True\ndef on_files(files: Files, *, config: MkDocsConfig) -&gt; Optional[Files]:\nbase_docs_url = config[\"docs_dir\"]\nfor file in files.documentation_pages():\nabs_path = os.path.join(base_docs_url, file.src_uri)\nwith open(abs_path, 'r') as raw_file:\ntry:\nmetadata = frontmatter.load(raw_file).metadata\nif is_page_published(metadata):\nlog.info(f\"Adding published document {file.src_uri}\")\nelse:\nfiles.remove(file)\nexcept:\nlog.error(f\"Found malformed frontmatter in {file.src_uri}!\")\nreturn files\ndef on_post_page(output: str, *, page: Page, config: MkDocsConfig) -&gt; Optional[str]:\nif not is_page_published(page.meta):\nreturn ''\nreturn output\n</code></pre>","tags":["obsidian","mkdocs","github"]},{"location":"guides/dotfiles/how-i-setup-this-blog/index.html#flatten_filenamespy","title":"flatten_filenames.py","text":"<p>This is even simpler MkDocs hook triggers when <code>on_files</code> fires, converting filenames such as <code>How To Write A Dll In Rust (part 1).md</code> to <code>how-to-write-a-dll-in-rust-part-1.md</code>.</p> <pre><code>import logging, re\nimport mkdocs.plugins\nlog = logging.getLogger('mkdocs')\n# Rewrite using `python-slugify`\ndef on_files(files, config):\nfor f in files:\nif f.is_documentation_page() or f.is_media_file():\nf.abs_dest_path = f.abs_dest_path.replace(\" \", \"-\").lower()\nf.abs_dest_path = f.abs_dest_path.replace(\"(\", \"\").lower()\nf.abs_dest_path = f.abs_dest_path.replace(\")\", \"\").lower()\nf.dest_path = f.dest_path.replace(\" \", \"-\").lower()\nf.dest_path = f.dest_path.replace(\"(\", \"\").lower()\nf.dest_path = f.dest_path.replace(\")\", \"\").lower()\nf.url = f.dest_path.replace(\"%20\", \"-\").lower()\nreturn files\n</code></pre>","tags":["obsidian","mkdocs","github"]},{"location":"guides/dotfiles/how-i-setup-this-blog/index.html#plugins","title":"Plugins","text":"<p>mkdocs-obsidian includes these third-party plugins:</p> <ul> <li>mkdocs-roamlinks-plugin: converts  <code>[[wikilinks]]</code> links to proper website links</li> <li>mkdocs-blogging-plugin: generates homepage article list</li> <li>mkdocs-git-revision-date-plugin: adds \"Last updated\" footer tags </li> </ul>","tags":["obsidian","mkdocs","github"]},{"location":"guides/dotfiles/how-i-setup-this-blog/index.html#github","title":"GitHub","text":"<p>My setup uses three repositories:</p> <ol> <li>notes is a private repo containing my \"Obsidian vault\" (folder containing <code>.md</code> files)</li> <li>mkdocs-obsidian is a public repo containing my MkDocs configuration (mkdocs.yml)</li> <li>peddamat.github.io is a public repo containing static <code>.html</code> files</li> </ol> <p>When changes are pushed to the <code>notes</code> repository, the <code>mkdocs-obsidian</code> repository rebuilds all \"Published\" notes and pushes the results to the <code>peddamat.github.io</code> repository.</p> <p>This is all orchestrated using GitHub Action workflows, one in the <code>notes</code> repository and one in the <code>mkdocs-obsidian</code> repository, which we'll discuss below.</p>","tags":["obsidian","mkdocs","github"]},{"location":"guides/dotfiles/how-i-setup-this-blog/index.html#repositories","title":"Repositories","text":"","tags":["obsidian","mkdocs","github"]},{"location":"guides/dotfiles/how-i-setup-this-blog/index.html#notes-repository","title":"<code>notes</code> repository","text":"<p>This is a private repository containing my Obsidian vault:</p> <pre><code>$ tree\n.\n\u251c\u2500\u2500 .github\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 workflows\n|   \u2502\u00a0\u00a0 \u2514\u2500\u2500 main.yml # (1)\n\u251c\u2500\u2500 .obsidian\n\u251c\u2500\u2500 index.md\n\u251c\u2500\u2500 Coding\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Creating A DLL With Rust.md\n...\n\u251c\u2500\u2500 Dotfiles\n...\n\u251c\u2500\u2500 assets\n\u251c\u2500\u2500 img\n\u251c\u2500\u2500 resources\n\u251c\u2500\u2500 stylesheets\n\u2514\u2500\u2500 tags.md\n</code></pre>","tags":["obsidian","mkdocs","github"]},{"location":"guides/dotfiles/how-i-setup-this-blog/index.html#github-workflow","title":"GitHub Workflow","text":"<p>The GitHub Action workflow is defined in <code>.github/workflows/main.yml</code>.  </p> <pre><code>name: Trigger Deployment\non:\npush:\nbranches:\n- main\nenv:\nUSER: peddamat\nREPO: mkdocs-obsidian\njobs:\nbuild:\nruns-on: ubuntu-latest\nsteps:\n# Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it\n- name: Trigger Build and Deploy\nrun: |\ncurl -X POST https://api.github.com/repos/$USER/$REPO/dispatches \\\n-H 'Accept: application/vnd.github.everest-preview+json' \\\n-u ${{ secrets.API_TOKEN_GITHUB }} \\\n--data '{\"event_type\": \"Trigger Workflow\", \"client_payload\": { \"repository\": \"'\"$GITHUB_REPOSITORY\"'\" }}'\n- uses: actions/checkout@v3\n</code></pre> <p>The \"Trigger Deployment\" workflow, runs after commits are pushed to <code>main</code> branch of the <code>notes</code> repo,  its sole purpose being to  triggers the \"Build and Deploy Site\" workflow in the <code>mkdocs-obsidian</code> repository.</p>","tags":["obsidian","mkdocs","github"]},{"location":"guides/dotfiles/how-i-setup-this-blog/index.html#mkdocs-obsidian-repository","title":"<code>mkdocs-obsidian</code> repository","text":"<p>This is a public repository containing my fork of mr-karan/notes:</p> <pre><code>$ tree -L 1 -a\n.\n\u251c\u2500\u2500 .github\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 workflows\n|   \u2502\u00a0\u00a0 \u2514\u2500\u2500 main.yml\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 mkdocs.yml\n\u251c\u2500\u2500 hooks\n\u251c\u2500\u2500 overrides\n\u251c\u2500\u2500 Pipfile\n...\n</code></pre>","tags":["obsidian","mkdocs","github"]},{"location":"guides/dotfiles/how-i-setup-this-blog/index.html#github-workflow_1","title":"GitHub Workflow","text":"<pre><code>name: Build and Deploy Site\non:\nrepository_dispatch:\npush:\nbranches:\n- main\njobs:\ndeploy:\nruns-on: ubuntu-latest\nsteps:\n- name: Checkout mkdocs-obsidian repo\nuses: actions/checkout@v3\n- name: Checkout notes repo into ./notes\nuses: actions/checkout@v3\nwith:\ntoken:  ${{ secrets.PULL_NOTES }}\nrepository: peddamat/notes\npath: notes\n- name: Setup Python\nuses: actions/setup-python@v4\nwith:\npython-version: '3.8'\n- name: Upgrade pip\nrun: |\n# install pip=&gt;20.1 to use \"pip cache dir\"\npython3 -m pip install --upgrade pip\n- name: Get pip cache dir\nid: pip-cache\nrun: echo \"::set-output name=dir::$(pip cache dir)\"\n- name: Cache dependencies\nuses: actions/cache@v2\nwith:\npath: ${{ steps.pip-cache.outputs.dir }}\nkey: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}\nrestore-keys: |\n${{ runner.os }}-pip-\n- name: Install dependencies\nrun: python3 -m pip install -r ./requirements.txt\n- run: mkdocs build\n- name: Deploy\nuses: peaceiris/actions-gh-pages@v3\nwith:\npersonal_token: ${{ secrets.PULL_NOTES }}\nexternal_repository: peddamat/peddamat.github.io\npublish_branch: main  # default: gh-pages\npublish_dir: ./site\ncname: samrambles.com\n</code></pre>","tags":["obsidian","mkdocs","github"]},{"location":"guides/dotfiles/how-i-setup-this-blog/index.html#peddamatgithubio-repository","title":"<code>peddamat.github.io</code> repository","text":"<p>This is a public repository containing the output of MkDocs, a static <code>.html</code> render of my <code>.md</code> notes.</p>","tags":["obsidian","mkdocs","github"]},{"location":"guides/dotfiles/how-i-setup-this-blog/index.html#github-pages","title":"GitHub Pages","text":"<p>GitHub Pages provides free top-level domain hosting for one site, with the stipulation being the site must be hosted in a repository named: username.github.io, where username is your GitHub username.</p> <p>Meaning, my free website, <code>peddamat.github.io</code>, is served up from my peddamat.github.io repository, which is configured like this:</p> <p></p>","tags":["obsidian","mkdocs","github"]},{"location":"guides/dotfiles/how-i-setup-this-blog/index.html#github-workflow_2","title":"GitHub Workflow","text":"","tags":["obsidian","mkdocs","github"]},{"location":"guides/dotfiles/how-i-setup-this-blog/index.html#permissions","title":"Permissions","text":"<p>My <code>notes</code> and <code>mkdocs-obsidian</code> repositories need the following workflow permissions, found under \"Settings / Actions / General\" in each repository:</p> <p></p>","tags":["obsidian","mkdocs","github"]},{"location":"guides/dotfiles/how-i-setup-this-blog/index.html#personal-access-token-pat","title":"Personal Access Token (PAT)","text":"<p>Personal access tokens function like ordinary OAuth access tokens. They can be used instead of a password for Git over HTTPS, or can be used to authenticate to the API over Basic Authentication. </p> <p>The workflows used by the <code>notes</code> and <code>mkdocs-obsidian</code> repositories utilize PATs to allow inter-repository interaction, for example, allowing the <code>notes</code> repository to trigger workflows in the <code>mkdocs-obsidian</code> repository.</p> <p>To generate a PAT, click \"Generate new token (classic)\" on https://github.com/settings/tokens:</p> <p></p> <p>And select the following scopes:</p> <p></p>","tags":["obsidian","mkdocs","github"]},{"location":"guides/dotfiles/how-i-setup-this-blog/index.html#repository-secret","title":"Repository Secret","text":"<p>\"Repository Secrets\" enable passwords/tokens to be used by workflows without requiring them to be publically visible in workflow <code>.yaml</code>.</p> <p>Both the \"Trigger Deployment\" and \"Build and Deploy Site\" workflows use a secret named <code>secrets.API_TOKEN_GITHUB</code>, contains a \"GitHub Personal Access Token (PAT)\", configured as described in the Personal Access Token (PAT) section.</p> <p>Create the <code>secret.API_TOKEN_GITHUB</code> secret in each repository's \"Settings / Secrets and variables / Actions\" section:</p> <p></p> <p>Hit 'New repository secret':</p> <p></p> <p>And paste the PAT from Step 1.</p>","tags":["obsidian","mkdocs","github"]},{"location":"guides/dotfiles/how-i-setup-this-blog/index.html#mkdocs-development-setup","title":"MkDocs Development Setup","text":"<p>To work on the MkDocs code, I use WSL2 running Ubuntu under Windows 10, with VSCode as my editor.</p> <p>Setting up an development environment consists of the following steps:</p> <ul> <li>Clone <code>mkdocs-obsidian</code> repo</li> <li>Clone <code>notes</code> repo</li> <li>Install dependencies</li> <li>Start staging server</li> </ul> <p>Which translates to:</p> <pre><code>git clone git@github.com:peddamat/mkdocs-obsidian.git samrambles.com\ncd samrambles.com\ngit clone git@github.com:peddamat/notes.git notes\npipenv shell\npipenv install\nmake serve\n</code></pre> <p>And looks like:</p> <p></p>","tags":["obsidian","mkdocs","github"]},{"location":"guides/dotfiles/how-i-setup-this-blog/index.html#adding-mkdocs-plugins","title":"Adding MkDocs Plugins","text":"<p>MkDocs plugins are generally distributed as Python PyPi packages, installed using <code>pip</code>, for example:</p> <p>Installing the <code>mkdocs-git-revision-date-plugin</code>:</p> <pre><code>pip install mkdocs-git-revision-date-plugin\n</code></pre> <p>Since I am using <code>pipenv</code>, this would look like:</p> <pre><code>pipenv install mkdocs-git-revision-date-plugin\n</code></pre>","tags":["obsidian","mkdocs","github"]},{"location":"guides/dotfiles/how-i-setup-this-blog/index.html#deploying-directly","title":"Deploying Directly","text":"<p>Sometimes GitHub shits the bed, when that happens, I can manually deploy to <code>peddamat.github.io</code> using:</p> <pre><code>$ mkdocs gh-deploy --force --remote-branch main --remote-name https://peddamat:&lt;personal-access-token&gt;@github.com/peddamat/peddamat.github.io.git\n</code></pre> <p></p> <p></p> <code>#obsidian</code> <code>#mkdocs</code> <code>#github</code>","tags":["obsidian","mkdocs","github"]},{"location":"guides/dotfiles/how-i-write-mkdocs-plugins/index.html","title":"How I Write MkDocs Plugins","text":"<p>As I mentioned in How I Setup This Blog, MkDocs is a core part of this blog's publishing workflow and, I had to write a couple of plugins to get everything working just right.  </p> <p>In this post, I'll guide you through my development workflow for writing and debugging MkDocs plugins and hooks.</p> <p>Already know how to setup the development environment?  Skip to the next section.</p>","tags":["mkdocs","plugin","vscode"]},{"location":"guides/dotfiles/how-i-write-mkdocs-plugins/index.html#development-environment-setup","title":"Development Environment Setup","text":"<p>I use VSCode on Windows 10 for 95% of my development work.  However, I can't live without a Unix shell, so I almost always work out of a Windows Subsystem for Linux (WSL) environment.</p> <p>First do a <code>git clone</code> of my MkDocs repository from a WSL prompt:</p> <pre><code>me in ~\n[I] \u276f git clone https://github.com/peddamat/mkdocs-obsidian.git\nCloning into 'mk'...\nremote: Enumerating objects: 817, done.\nremote: Counting objects: 100% (284/284), done.\nremote: Compressing objects: 100% (120/120), done.\nremote: Total 817 (delta 127), reused 276 (delta 125), pack-reused 533\nReceiving objects: 100% (817/817), 686.36 KiB | 2.29 MiB/s, done.\nResolving deltas: 100% (420/420), done.\n</code></pre> <p>Then fire up a VSCode instance (DIRECTLY FROM THE WSL PROMPT!)</p> <pre><code>me in ~\n[I] \u276f cd mkdocs-obsidian\n[I] \u276f code .\nme in mkdocs-obsidian on \ue0a0 main took 2s\n</code></pre> <p>VSCode starts up in this nifty \"WSL\" mode, making interaction with the WSL environment completely seamless:</p> <p></p>","tags":["mkdocs","plugin","vscode"]},{"location":"guides/dotfiles/how-i-write-mkdocs-plugins/index.html#pull-obsidian-vault","title":"Pull Obsidian Vault","text":"<p>I store my Obsidian vault in a separate private repository (I explain the reasoning in How I Setup This Blog), so I clone it into a subdirectory called \"notes\".</p> <pre><code>[I] \u276f git clone git@github.com:peddamat/notes.git\nCloning into 'notes'...\nremote: Enumerating objects: 1521, done.\nremote: Counting objects: 100% (276/276), done.\nremote: Compressing objects: 100% (183/183), done.\nremote: Total 1521 (delta 171), reused 194 (delta 91), pack-reused 1245\nReceiving objects: 100% (1521/1521), 37.05 MiB | 15.31 MiB/s, done.\nResolving deltas: 100% (698/698), done.\nme in mkdocs-obsidian on \ue0a0 main took 4s\n</code></pre>","tags":["mkdocs","plugin","vscode"]},{"location":"guides/dotfiles/how-i-write-mkdocs-plugins/index.html#local-webserver-setup","title":"Local Webserver Setup","text":"<p>Now, from a VSCode terminal, I fire up a local development instance of my blog using:</p> <pre><code>[I] \u276f pipenv run mkdocs serve ...\nINFO     -  Documentation built in 3.84 seconds\nINFO     -  [21:37:00] Serving on http://127.0.0.1:8000/\n</code></pre> <p>Making my blog accessible at http://127.0.0.1:8000/ while I work on it.</p> <p></p> <p>At this point I'm ready to start developing.</p>","tags":["mkdocs","plugin","vscode"]},{"location":"guides/dotfiles/how-i-write-mkdocs-plugins/index.html#get-plugin-code","title":"Get Plugin Code","text":"<p>In this example, <code>mkdocs-roamlinks-plugin</code> is already locked and loaded into <code>mkdocs-obsidian</code>, using <code>pipenv install mkdocs-roamlinks-plugin</code>.</p> <p>So we'll need to <code>git clone</code> a local copy of the code to work on:</p> <pre><code>[I] \u276f git clone git@github.com:peddamat/mkdocs-roamlinks-plugin.git\nCloning into 'mkdocs-roamlinks-plugin'...\nremote: Enumerating objects: 101, done.\nremote: Counting objects: 100% (57/57), done.\nremote: Compressing objects: 100% (31/31), done.\nremote: Total 101 (delta 33), reused 43 (delta 26), pack-reused 44\nReceiving objects: 100% (101/101), 19.70 KiB | 3.94 MiB/s, done.\nResolving deltas: 100% (47/47), done.\nme in mkdocs-obsidian on \ue0a0 main [?] took 2s\n</code></pre> <p>If you'll notice, I'm pulling the code from my own personal fork of <code>mkdocs-roamlinks-plugin</code>.  It's good practice to always fork a repo before you <code>git clone</code> it  (so you can avoid having to Google the syntax for removing and adding a remote in git).</p>","tags":["mkdocs","plugin","vscode"]},{"location":"guides/dotfiles/how-i-write-mkdocs-plugins/index.html#configure-pipenv","title":"Configure Pipenv","text":"<p>Now that you've got a local copy of the plugin code:</p> <p></p> <p>We need to tell <code>pipenv</code> to install this local copy of the plugin code, rather than what it previously installed into the <code>packages</code> folder.</p> <p>This is done by using the <code>-e</code> flag (Note: the <code>-e</code> flag also works with plain <code>pip install</code>):</p> <pre><code>[I] \u276f pipenv install -e mkdocs-roamlinks-plugin\nInstalling -e mkdocs-roamlinks-plugin\u2026\nLooking in indexes: https://pypi.python.org/simple\nObtaining file:///home/me/mkdocs-obsidian/mkdocs-roamlinks-plugin\n...\nInstalling collected packages: mkdocs-roamlinks-plugin\n  Attempting uninstall: mkdocs-roamlinks-plugin\n    Found existing installation: mkdocs-roamlinks-plugin 0.2.0\n    Uninstalling mkdocs-roamlinks-plugin-0.2.0:\n      Successfully uninstalled mkdocs-roamlinks-plugin-0.2.0\n  Running setup.py develop for mkdocs-roamlinks-plugin\nSuccessfully installed mkdocs-roamlinks-plugin\n\nAdding -e mkdocs-roamlinks-plugin to Pipfile's [packages]\u2026\nPipfile.lock (43fcfc) out of date, updating to (e1b7fa)\u2026\nLocking [dev-packages] dependencies\u2026\nLocking [packages] dependencies\u2026\nUpdated Pipfile.lock (e1b7fa)!\nInstalling dependencies from Pipfile.lock (e1b7fa)\u2026\n  \ud83d\udc0d   \u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589 58/58 \u2014 00:00:27\nme in mkdocs-obsidian on \ue0a0 main [!?] took 52s\n</code></pre> <p>Now you have everything you need to start hacking on the plugin.</p> <p>One thing to note, however, <code>mkdocs serve</code> does not automatically refresh the site as you make changes to the plugin's code.  You will need to kill and rerun <code>mkdocs serve</code> as you work.</p>","tags":["mkdocs","plugin","vscode"]},{"location":"guides/dotfiles/how-i-write-mkdocs-plugins/index.html#alternatively","title":"Alternatively...","text":"<p>If you prefer discipline over speed, you can forgo making a local clone of your plugin, and simply work directly from your GitHub fork.</p> <p>You do this by:</p> <pre><code>[I] \u276f pipenv install git+https://github.com/peddamat/mkdocs-roamlinks-plugin@master\n\nInstalling git+https://github.com/peddamat/mkdocs-roamlinks-plugin@master\u2026\n\u280fWARNING: pipenv requires an #egg fragment for version controlled dependencies. Please install remote dependency in the form git+https://github.com/peddamat/mkdocs-roamlinks-plugin#egg=&lt;package-name&gt;.\n</code></pre> <p>Oops, I forgot the part about the <code>#egg=&lt;package-name&gt;</code>, as will you.</p> <p>You can find the <code>&lt;package-name&gt;</code> bit in the plugin's <code>setup.py</code>:</p> setup.py<pre><code>from setuptools import setup, find_packages\nsetup(\nname='mkdocs-roamlinks-plugin',\n...\nentry_points={\n'mkdocs.plugins': [\n'roamlinks = mkdocs_roamlinks_plugin.plugin:RoamLinksPlugin',\n]\n}\n)\n</code></pre> <p>It will be the bit at the end there. </p> <p>Anyways, add that and:</p> <pre><code>[I] \u276f pipenv install git+https://github.com/peddamat/mkdocs-roamlinks-plugin@master#egg=RoamLinksPlugin\nInstalling git+https://github.com/peddamat/mkdocs-roamlinks-plugin@master#egg=RoamLinksPlugin\u2026\n\u2819Warning: You installed a VCS dependency in non\u2013editable mode. This will work fine, but sub-dependencies will not be resolved by $ pipenv lock.\n  To enable this sub\u2013dependency functionality, specify that this dependency is editable.\nLooking in indexes: https://pypi.python.org/simple\nCollecting RoamLinksPlugin\n  Cloning https://github.com/peddamat/mkdocs-roamlinks-plugin (to revision master) to /tmp/pip-install-tmytxsvo/RoamLinksPlugin\n...\nBuilding wheels for collected packages: mkdocs-roamlinks-plugin, mkdocs-roamlinks-plugin\n  Building wheel for mkdocs-roamlinks-plugin (setup.py): started\n  Building wheel for mkdocs-roamlinks-plugin (setup.py): finished with status 'done'\nCreated wheel for mkdocs-roamlinks-plugin: filename=mkdocs_roamlinks_plugin-0.2.0-py3-none-any.whl size=5000 sha256=54562b59cb08d33050dc798f20af767b179d3fbbe431f47100fb71cfd2fa661b\n  Stored in directory: /tmp/pip-ephem-wheel-cache-3go_fqjk/wheels/db/eb/02/34dd609165555dbc911de65c19533bc9fc01f05b99bafef267\n  Building wheel for mkdocs-roamlinks-plugin (setup.py): started\n  Building wheel for mkdocs-roamlinks-plugin (setup.py): finished with status 'done'\nCreated wheel for mkdocs-roamlinks-plugin: filename=mkdocs_roamlinks_plugin-0.2.0-py3-none-any.whl size=5000 sha256=54562b59cb08d33050dc798f20af767b179d3fbbe431f47100fb71cfd2fa661b\n  Stored in directory: /tmp/pip-ephem-wheel-cache-3go_fqjk/wheels/09/48/26/db3e2583dc622b5b0abf779173bd857e464b75bc67a5f03a4f\nSuccessfully built mkdocs-roamlinks-plugin mkdocs-roamlinks-plugin\n\nAdding git+https://github.com/peddamat/mkdocs-roamlinks-plugin@master#egg=RoamLinksPlugin to Pipfile's [packages]\u2026\nPipfile.lock (bdb602) out of date, updating to (31e69d)\u2026\nLocking [dev-packages] dependencies\u2026\nLocking [packages] dependencies\u2026\nUpdated Pipfile.lock (31e69d)!\nInstalling dependencies from Pipfile.lock (31e69d)\u2026\n  \ud83d\udc0d   \u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589 57/57 \u2014 00:00:18\nTo activate this project's virtualenv, run the following:\n $ pipenv shell\nme in mkdocs-obsidian on \ue0a0 main [!?] took 37s </code></pre> <p>Now, after committing and pushing your code to GitHub, you can do a <code>pipenv update</code> which will pull and install your latest commits:</p> <pre><code>$ pipenv update                           Running $ pipenv lock then $ pipenv sync.\nLocking [dev-packages] dependencies\u2026\nLocking [packages] dependencies\u2026\nUpdated Pipfile.lock (43fcfc)!\nInstalling dependencies from Pipfile.lock (43fcfc)\u2026\n  \ud83d\udc0d   \u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589 57/57 \u2014 00:00:22\nTo activate this project's virtualenv, run the following:\n $ pipenv shell\nAll dependencies are now up-to-date!\n</code></pre>","tags":["mkdocs","plugin","vscode"]},{"location":"guides/dotfiles/how-i-write-mkdocs-plugins/index.html#debugging-a-plugin","title":"Debugging A Plugin","text":"<p>One plugin that does some heavy lifting is the <code>mkdocs-roamlinks</code> plugin, which resolves and converts internal links, including <code>[[wikilink]]</code>-style links popular among Obsidian users.</p> <p>However, I found myself with a persnickety issue when linking files with parenthesis in their filenames, for example,  <code>Let's Write An Article (Part 1).md</code> or <code>Let's Write An Article (Part 2).md</code>.  </p> <p>The resulting links were came out like <code>Let's Write An Article (Part 1))</code>, a subtle error, but an error nonetheless.</p> <p>So I fixed the issue and submitted a pull request: here</p> <p>In this article, I'll walk you through how I went about debugging that issue.</p>","tags":["mkdocs","plugin","vscode"]},{"location":"guides/dotfiles/how-i-write-mkdocs-plugins/index.html#unit-testing","title":"Unit Testing","text":"<p>One of the best ways to debug a plugin is to write some test cases.  </p> <p>If your plugin doesn't already have test cases, let me walk you through how to get started.</p>","tags":["mkdocs","plugin","vscode"]},{"location":"guides/dotfiles/how-i-write-mkdocs-plugins/index.html#add-pytest","title":"Add Pytest","text":"<p>In this example we'll be using Pytest, but feel free to explore other options.</p> <p>First, add an <code>extra_requires</code> entry after <code>install_requires</code> in the plugin's <code>setup.py</code>:</p> <pre><code>install_requires=[\n'mkdocs&gt;=1.0.4',\n],\nextras_require={\n'dev': [ 'pytest']\n},\n</code></pre>","tags":["mkdocs","plugin","vscode"]},{"location":"guides/dotfiles/how-i-write-mkdocs-plugins/index.html#create-tests-folder","title":"Create \"tests\" folder","text":"<p>Next, create a folder called \"tests\".  Within this \"tests\" folder, create a file named <code>__init__.py</code> and another named <code>test_plugin.py</code>:</p> <pre><code>mkdir tests\ntouch tests/__init__.py\ntouch tests/test_plugin.py\n</code></pre> <p>It should look something like:</p> <pre><code>[I] \u279c tree\n.\n...\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 test_plugin.py\n</code></pre>","tags":["mkdocs","plugin","vscode"]},{"location":"guides/dotfiles/how-i-write-mkdocs-plugins/index.html#write-unit-tests","title":"Write Unit Tests","text":"<p>Write your fixtures and test cases in <code>test_plugin.py</code>.  Here's an excerpt from <code>mkdocs-roamlinks-plugin</code>:</p> <pre><code>import os\nimport tempfile\nimport pytest\nfrom mkdocs.structure.files import File\nfrom mkdocs.structure.pages import Page\nfrom mkdocs_roamlinks_plugin.plugin import RoamLinksPlugin\n@pytest.fixture\ndef temp_directory():\nwith tempfile.TemporaryDirectory() as temp_dir:\nyield temp_dir\n@pytest.fixture\ndef config(temp_directory):\nreturn {\"docs_dir\": temp_directory}\n@pytest.fixture\ndef site_navigation():\nreturn []\n...\n@pytest.fixture\ndef converter(temp_directory, config, site_navigation, page):\ndef c(markdown):\nplugin = RoamLinksPlugin()\nreturn plugin.on_page_markdown(markdown, page, config, site_navigation)\nreturn c\n## Test Cases\ndef test_converts_basic_link(converter):\nassert converter(\"[[Git Flow]]\") == \"[Git Flow](&lt;../software/git_flow.md&gt;)\"\ndef test_converts_link_with_slash(converter):\nassert converter(\"[software/Git Flow](&lt;../../software/Git Flow.md&gt;)\") == \"[software/Git Flow](&lt;../software/Git Flow.md&gt;)\"\ndef test_converts_link_with_anchor_only(converter):\nassert converter(\"[#Heading identifiers](&lt;#heading-identifiers&gt;)\") == \"[#Heading identifiers](&lt;#heading-identifiers&gt;)\"    \n...\n</code></pre> <p>The bulk of the excerpt above are test fixtures, which you can learn about here.</p> <p>At the bottom of the excerpt you can see three test cases.</p>","tags":["mkdocs","plugin","vscode"]},{"location":"guides/dotfiles/how-i-write-mkdocs-plugins/index.html#execute-tests","title":"Execute Tests","text":"<p>Once you've fleshed out your <code>test_plugin.py</code>, execute the test runner by running the command <code>pytest</code> from within the <code>tests</code> folder, which looks something like:</p> <pre><code>$ pytest\n================== test session starts ==================\nplatform darwin -- Python 3.9.7, pytest-7.2.2, pluggy-1.0.0\nrootdir: /Users/me/Source/mkdocs-roamlinks-plugin\nplugins: anyio-3.6.1\ncollected 19 items\n\ntest_plugin.py ...................                [100%]\n================== 19 passed in 0.37s ===================\n</code></pre>","tags":["mkdocs","plugin","vscode"]},{"location":"guides/dotfiles/how-i-write-mkdocs-plugins/index.html#writing-an-extension","title":"Writing An Extension","text":"<p>MkDocs provides two different ways to extend its core functionality: hooks and plugins, with hooks being a lightweight version of plugins.</p> <p>Unless you want to redistribute your extension, my advice is to simply write a hook.  Or, start your plugin as a hook until it's ready to be repackaged.</p>","tags":["mkdocs","plugin","vscode"]},{"location":"guides/dotfiles/how-i-write-mkdocs-plugins/index.html#getting-started","title":"Getting Started","text":"<p>If you're a \"first principles\" sort of person (guilty), the best place to start learning the codebase is from <code>mkdocs/mkdocs/commands</code>.  </p> <p>This is where the MkDocs command-line commands are defined, i.e. <code>mkdocs build</code> &amp; <code>mkdocs serve</code>.  The code for the former being defined in <code>build.py</code> and for the latter in <code>serve.py</code>.</p> <ul> <li>mkdocs/structure/files.py#L303 is where File objects are instantiated. </li> <li>mkdocs/commands/build.py#L297 is where the <code>on_files</code> event gets called.</li> <li>mkdocs/commands/build.py#L239 is where the page is written using the <code>abs_dest_path</code> property of the file.</li> <li>mkdocs/structure/pages.py#L326 - Documentation file xxx which is not found in the documentation files.</li> </ul> <p>Once you get a feel for how things are put together, the next best place to visit is the plugin reference, specifically, the Events section, which provides this great diagram illustrating the basic execution flow:  </p> <p></p>","tags":["mkdocs","plugin","vscode"]},{"location":"guides/dotfiles/how-i-write-mkdocs-plugins/index.html#further-reading","title":"Further Reading","text":"<ul> <li>MkDocs-Material - Customization</li> <li>Wheelodex - MkDocs Plugins</li> </ul>","tags":["mkdocs","plugin","vscode"]},{"location":"guides/dotfiles/how-i-write-mkdocs-plugins/index.html#writing-hooks","title":"Writing Hooks","text":"<p>We're going to examine two hooks from my <code>mkdocs-obsidian</code> repo.</p> <p>To get started, add a <code>hooks</code> section to the bottom of your <code>mkdocs.yml</code>:</p> <pre><code>hooks:\n- hooks/flatten_filenames.py\n- hooks/only_include_published.py\n</code></pre> <p>Next, create a \"hooks\" directory:</p> <pre><code>$ tree\n.\n\u251c\u2500\u2500 hooks\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 flatten_filenames.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 only_include_published.py\n...\n</code></pre>","tags":["mkdocs","plugin","vscode"]},{"location":"guides/dotfiles/how-i-write-mkdocs-plugins/index.html#hooksflatten_filenamespy","title":"<code>hooks/flatten_filenames.py</code>","text":"<pre><code>import logging, re\nimport mkdocs.plugins\nlog = logging.getLogger('mkdocs')\n# Rewrite using `python-slugify`\ndef on_files(files, config):\nfor f in files:\nif f.is_documentation_page() or f.is_media_file():\nf.abs_dest_path = f.abs_dest_path.replace(\" \", \"-\").lower()\nf.abs_dest_path = f.abs_dest_path.replace(\"(\", \"\").lower()\nf.abs_dest_path = f.abs_dest_path.replace(\")\", \"\").lower()\nf.dest_path = f.dest_path.replace(\" - \", \"-\").lower()\nf.dest_path = f.dest_path.replace(\" \", \"-\").lower()\nf.dest_path = f.dest_path.replace(\"(\", \"\").lower()\nf.dest_path = f.dest_path.replace(\")\", \"\").lower()\nf.url = f.dest_path.replace(\"%20\", \"-\").lower()\nreturn files\n</code></pre>","tags":["mkdocs","plugin","vscode"]},{"location":"guides/dotfiles/how-i-write-mkdocs-plugins/index.html#hooksonly_include_publishedpy","title":"<code>hooks/only_include_published.py</code>","text":"<pre><code>import os, logging, typing, frontmatter\nfrom typing import Optional\nimport mkdocs.plugins\nfrom mkdocs.structure.pages import Page\nfrom mkdocs.structure.files import Files\nfrom mkdocs.config.defaults import MkDocsConfig\nlog = logging.getLogger('mkdocs')\ndef is_page_published(meta: typing.Dict) -&gt; bool:\nif 'publish' in meta:\nreturn meta['publish'] == True\ndef on_files(files: Files, *, config: MkDocsConfig) -&gt; Optional[Files]:\nbase_docs_url = config[\"docs_dir\"]\nfor file in files.documentation_pages():\n...\nreturn files\ndef on_post_page(output: str, *, page: Page, config: MkDocsConfig) -&gt; Optional[str]:\nif not is_page_published(page.meta):\nreturn ''\nreturn output\n</code></pre>","tags":["mkdocs","plugin","vscode"]},{"location":"guides/dotfiles/how-i-write-mkdocs-plugins/index.html#writing-plugins","title":"Writing Plugins","text":"<p>tbd </p> <code>#mkdocs</code> <code>#plugin</code> <code>#vscode</code>","tags":["mkdocs","plugin","vscode"]},{"location":"guides/dotfiles/how-to-quickly-setup-a-wireless-mitm-proxy/index.html","title":"How To Quickly Setup A Wireless MitM Proxy","text":"","tags":["mitm","kali","iot"]},{"location":"guides/dotfiles/how-to-quickly-setup-a-wireless-mitm-proxy/index.html#how-to-quickly-setup-a-wireless-mitm-proxy","title":"How To Quickly Setup A Wireless MitM Proxy","text":"<p>While working on the A Look Inside A Hunter Pro-HC Controller project, I needed to setup a wireless MitM proxy as part of my test rig.</p> <p>Here's the fastest way I found to get one up and running, and it works on both Windows and Mac.</p>","tags":["mitm","kali","iot"]},{"location":"guides/dotfiles/how-to-quickly-setup-a-wireless-mitm-proxy/index.html#requirements","title":"Requirements","text":"<ul> <li>VMWare Fusion (Mac) or VMWare Player (PC)</li> <li>Kali Linux VMWare image</li> <li>USB WiFi Dongle (i.e. Edimax EW-7811un)     </li> </ul>","tags":["mitm","kali","iot"]},{"location":"guides/dotfiles/how-to-quickly-setup-a-wireless-mitm-proxy/index.html#download-kali-image","title":"Download Kali Image","text":"<p>Kali Linux is available as pre-built VMs: here</p> <p></p> <p>Download the \"VMWare 64\" package, which comes an ~3GB <code>.7z</code> file.</p> <p></p>","tags":["mitm","kali","iot"]},{"location":"guides/dotfiles/how-to-quickly-setup-a-wireless-mitm-proxy/index.html#vmware-fusion","title":"VMWare Fusion","text":"","tags":["mitm","kali","iot"]},{"location":"guides/dotfiles/how-to-quickly-setup-a-wireless-mitm-proxy/index.html#install-vmware-fusion-mac","title":"Install VMWare Fusion (Mac)","text":"<p>VMWare Fusion is available for free under a Personal Use license: here</p>","tags":["mitm","kali","iot"]},{"location":"guides/dotfiles/how-to-quickly-setup-a-wireless-mitm-proxy/index.html#configure-wifi-adapter","title":"Configure WiFi Adapter","text":"","tags":["mitm","kali","iot"]},{"location":"guides/dotfiles/how-to-quickly-setup-a-wireless-mitm-proxy/index.html#launch-kali-linux-vm","title":"Launch Kali Linux VM","text":"<p>Double-click on the <code>.vmwarevm</code> file, which will launch VMWare Fusion:  </p> <p></p> <p>Log into the desktop using the username and password:  <code>kali</code> / <code>kali</code>:</p> <p></p> <p>Launch a terminal window:</p> <p></p>","tags":["mitm","kali","iot"]},{"location":"guides/dotfiles/how-to-quickly-setup-a-wireless-mitm-proxy/index.html#vmware-player","title":"VMWare Player","text":"","tags":["mitm","kali","iot"]},{"location":"guides/dotfiles/how-to-quickly-setup-a-wireless-mitm-proxy/index.html#install-vmware-player-pc","title":"Install VMWare Player (PC)","text":"","tags":["mitm","kali","iot"]},{"location":"guides/dotfiles/how-to-quickly-setup-a-wireless-mitm-proxy/index.html#configure-wifi-adapter_1","title":"Configure WiFi Adapter","text":"<pre><code>[   65.314104] usb 2-1: new high-speed USB device number 2 using ehci-pci\n[   65.594275] usb 2-1: New USB device found, idVendor=7392, idProduct=7811, bcdDevice= 2.00\n[   65.594281] usb 2-1: New USB device strings: Mfr=1, Product=2, SerialNumber=3\n[   65.594284] usb 2-1: Product: 802.11n WLAN Adapter\n[   65.594286] usb 2-1: Manufacturer: Realtek\n[   65.594287] usb 2-1: SerialNumber: 00e04c000001\n[   66.140875] cfg80211: Loading compiled-in X.509 certificates for regulatory database\n[   66.141105] cfg80211: Loaded X.509 cert 'benh@debian.org: 577e021cb980e0e820821ba7b54b4961b8b4fadf'\n[   66.141330] cfg80211: Loaded X.509 cert 'romain.perier@gmail.com: 3abbc6ec146e09d1b6016ab9d6cf71dd233f0328'\n[   66.141536] cfg80211: Loaded X.509 cert 'sforshee: 00b28ddf47aef9cea7'\n[   66.143667] platform regulatory.0: firmware: direct-loading firmware regulatory.db\n[   66.144695] platform regulatory.0: firmware: direct-loading firmware regulatory.db.p7s\n[   66.455402] rtl8192cu: Chip version 0x10\n[   67.475089] rtl8192cu: Board Type 0\n[   67.478596] rtl_usb: rx_max_size 15360, rx_urb_num 8, in_ep 1\n[   67.478636] rtl8192cu: Loading firmware rtlwifi/rtl8192cufw_TMSC.bin\n[   67.478849] ieee80211 phy0: Selected rate control algorithm 'rtl_rc'\n[   67.479499] usb 2-1: firmware: direct-loading firmware rtlwifi/rtl8192cufw_TMSC.bin\n[   67.481837] usbcore: registered new interface driver rtl8192cu\n[   67.519276] rtl8192cu: MAC auto ON okay!\n[   67.870081] rtl8192cu: Tx queue select: 0x05\n[   69.294999] rtl8192cu: MAC auto ON okay!\n[   69.706304] rtl8192cu: Tx queue select: 0x05\n</code></pre> <pre><code>$ ifconfig\neth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500\ninet 192.168.19.128  netmask 255.255.255.0  broadcast 192.168.19.255\n        inet6 fe80::967f:4a3c:2b65:4b8c  prefixlen 64  scopeid 0x20&lt;link&gt;\n        ether 00:0c:29:b4:6d:1b  txqueuelen 1000  (Ethernet)\nRX packets 68378  bytes 97618915 (93.0 MiB)\nRX errors 0  dropped 0  overruns 0  frame 0\nTX packets 13366  bytes 1070043 (1.0 MiB)\nTX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\nlo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536\ninet 127.0.0.1  netmask 255.0.0.0\n        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;\n        loop  txqueuelen 1000  (Local Loopback)\nRX packets 180  bytes 1224635 (1.1 MiB)\nRX errors 0  dropped 0  overruns 0  frame 0\nTX packets 180  bytes 1224635 (1.1 MiB)\nTX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\nwlan0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500\ninet 192.168.1.1  netmask 255.255.255.0  broadcast 192.168.1.255\n        ether 46:85:6b:ca:34:d5  txqueuelen 1000  (Ethernet)\nRX packets 0  bytes 0 (0.0 B)\nRX errors 0  dropped 0  overruns 0  frame 0\nTX packets 0  bytes 0 (0.0 B)\nTX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n</code></pre>","tags":["mitm","kali","iot"]},{"location":"guides/dotfiles/how-to-quickly-setup-a-wireless-mitm-proxy/index.html#launch-kali-linux-vm_1","title":"Launch Kali Linux VM","text":"","tags":["mitm","kali","iot"]},{"location":"guides/dotfiles/how-to-quickly-setup-a-wireless-mitm-proxy/index.html#start-bridged-mitm-proxy","title":"Start Bridged MitM Proxy","text":"<p>mitm setup using hostapd in kali</p> <p>setup-mitm-bridged.sh</p> setup-mitm-bridged.sh<pre><code>#!/bin/bash\n# Based on: https://mirzafahad.github.io/2021-03-07-wifi-rouge-access-point-part3/\nsudo apt-get update &amp;&amp; sudo apt-get install hostapd bridge-utils\n\nmkdir conf\n\ncat &gt; conf/wifi_ap.config &lt;&lt;EOF\ninterface=wlan0\nbridge=br0\ndriver=nl80211\nhw_mode=g\nssid=WifiTest\nchannel=1\nEOF\nsudo brctl addbr br0\nsudo brctl addif br0 eth0\nsudo ifconfig br0 up\nbrctl show\nsudo /etc/init.d/networking stop\nsudo ifconfig eth0 down\nsudo ifconfig wlan0 down\nsudo ifconfig br0 up\nsudo ifconfig eth0 up\nsudo hostapd -d conf/wifi_ap.config\n</code></pre>","tags":["mitm","kali","iot"]},{"location":"guides/dotfiles/how-to-quickly-setup-a-wireless-mitm-proxy/index.html#start-transparent-mitm-proxy","title":"Start Transparent MitM Proxy","text":"<p>This is a \"transparent\" proxy which utilizes <code>mitmproxy --transparent</code>.</p> <p>setup-mitm-transparent.sh</p> setup-mitm-transparent.sh<pre><code>#!/bin/bash\n# Based on: https://bumper.readthedocs.io/en/latest/Sniffing/\nmkdir -p conf logs\n\ncat &gt; conf/dnsmasq.conf &lt;&lt;EOF\ninterface=wlan0\ndhcp-range=192.168.1.2,192.168.1.30,255.255.255.0,12h\ndhcp-option=3,192.168.1.1\ndhcp-option=6,192.168.1.1\nserver=8.8.8.8\nlog-queries\nlog-dhcp\nlisten-address=127.0.0.1\n# Set DNS settings per Bumper documentation as needed below\n#address=/msg-na.ecouser.net/192.168.1.1\n#address=/mq-ww.ecouser.net/192.168.1.1\nEOF\ncat &gt; conf/hostapd.conf &lt;&lt;EOF\ninterface=wlan0\ndriver=nl80211\nssid=bumper_mitm\nhw_mode=g\nchannel=11\nmacaddr_acl=0\nignore_broadcast_ssid=0\nauth_algs=1\nwpa=2\nwpa_passphrase=IAmNotSafe\nwpa_key_mgmt=WPA-PSK\nwpa_pairwise=CCMP\nwpa_group_rekey=86400\nieee80211n=1\nwme_enabled=1\nEOF\nsudo apt-get update\nsudo apt-get install gnome-terminal hostapd\n\nsysctl -w net.ipv4.ip_forward=1\nsysctl -w net.ipv4.conf.all.send_redirects=0\niptables -t nat -A PREROUTING -i wlan0 -p tcp --dport 80 -j REDIRECT --to-port 8080\niptables -t nat -A PREROUTING -i wlan0 -p tcp --dport 443 -j REDIRECT --to-port 8080\niptables -t nat -A PREROUTING -i wlan0 -p tcp --dport 8883 -j REDIRECT --to-port 8080\nsudo nmcli radio wifi off\nsudo rfkill unblock wlan\nifconfig wlan0 up 192.168.1.1 netmask 255.255.255.0\nroute add -net 192.168.1.0 netmask 255.255.255.0 gw 192.168.1.1\n\n#Open in new tabs\ngnome-terminal -x sh -c \"SSLKEYLOGFILE=\"logs/sslmitmkeylog.txt\" mitmweb -m transparent -w \"logs/mitmout_new.txt\" --tcp-hosts 192.168.1.\\d+ --ssl-insecure --raw; bash\"\ngnome-terminal -x sh -c \"dnsmasq -C conf/dnsmasq.conf -d; bash\"\ngnome-terminal -x sh -c \"hostapd conf/hostapd.conf; bash\"\n</code></pre>","tags":["mitm","kali","iot"]},{"location":"guides/dotfiles/how-to-quickly-setup-a-wireless-mitm-proxy/index.html#references","title":"References","text":"<ul> <li>https://mirzafahad.github.io/2021-02-21-wifi-rouge-access-point-part1/</li> <li>https://mirzafahad.github.io/2021-03-07-wifi-rouge-access-point-part3/</li> </ul>","tags":["mitm","kali","iot"]},{"location":"guides/dotfiles/how-to-quickly-setup-a-wireless-mitm-proxy/index.html#start-mqtt-mitm-proxy","title":"Start MQTT MitM Proxy","text":"<p>setup-ioxy.sh</p>","tags":["mitm","kali","iot"]},{"location":"guides/dotfiles/how-to-quickly-setup-a-wireless-mitm-proxy/index.html#frequently-asked-questions","title":"Frequently Asked Questions","text":"<ol> <li>Why not VirtualBox?       I'm an open source guy, I like VirtualBox, but VMWare Player and VMWare Fusion just. work.  </li> </ol> <code>#mitm</code> <code>#kali</code> <code>#iot</code>","tags":["mitm","kali","iot"]},{"location":"guides/fancy-zones/fancy-zones-development-environment-setup/index.html","title":"Fancy Zones Development Environment Setup","text":"","tags":["powertoys","windows"]},{"location":"guides/fancy-zones/fancy-zones-development-environment-setup/index.html#background","title":"Background","text":"<p>The impetus for this project is the desire to use my ultra-wide monitor in a more effective manner.  Specifically, I want to divide my monitor into \"zones\" which act emulate independent monitors.  </p> <p>Discussing this issue with the PowerToys team: - https://github.com/microsoft/PowerToys/issues/279 Taloth provided code for his implementation: - https://github.com/peddamat/PowerToys/discussions/5</p>","tags":["powertoys","windows"]},{"location":"guides/fancy-zones/fancy-zones-development-environment-setup/index.html#overview","title":"Overview","text":"<p>The project is a Microsoft PowerToys fork. - Toolset: Microsoft Visual Studio 2022 - Repository: https://github.com/peddamat/PowerToys</p>","tags":["powertoys","windows"]},{"location":"guides/fancy-zones/fancy-zones-development-environment-setup/index.html#how-to-see-what-i-changed","title":"How to see what I changed","text":"<p>https://github.com/microsoft/PowerToys/compare/main...peddamat:PowerToys:peddamat/maxInZoneDLL</p>","tags":["powertoys","windows"]},{"location":"guides/fancy-zones/fancy-zones-development-environment-setup/index.html#references","title":"References","text":"<ul> <li>https://github.com/peddamat/visual-studio-projects (peddamat/final branch)</li> </ul>","tags":["powertoys","windows"]},{"location":"guides/fancy-zones/fancy-zones-development-environment-setup/index.html#setup","title":"Setup","text":"<ul> <li>Reference: https://github.com/microsoft/PowerToys/tree/main/doc/devdocs</li> </ul> <pre><code># Clone repository and submodules\ngit clone https://github.com/peddamat/PowerToys.git\ngit submodule update --init --recursive\n</code></pre>","tags":["powertoys","windows"]},{"location":"guides/fancy-zones/fancy-zones-development-environment-setup/index.html#open-solution","title":"Open Solution","text":"","tags":["powertoys","windows"]},{"location":"guides/fancy-zones/fancy-zones-development-environment-setup/index.html#building-solution","title":"Building Solution","text":"<p>Before building the solution, it's best to <code>Clean Solution</code> to avoid random build failures.  Alternatively, you can go into <code>src\\modules\\previewpane</code> and type <code>git clean -xfd .</code>.</p> <p></p>","tags":["powertoys","windows"]},{"location":"guides/fancy-zones/fancy-zones-development-environment-setup/index.html#running-solution","title":"Running Solution","text":"","tags":["powertoys","windows"]},{"location":"guides/fancy-zones/fancy-zones-development-environment-setup/index.html#debugging-fancyzones","title":"Debugging FancyZones","text":"<p>The FancyZones module can be debugged by setting the Solution's \"Startup Project\" to FancyZones.  </p> <p></p>","tags":["powertoys","windows"]},{"location":"guides/fancy-zones/fancy-zones-development-environment-setup/index.html#release-packaging","title":"Release Packaging","text":"<p>The installer is a separate solution found in the <code>\\installer</code> subfolder of the project.</p> <p></p> <p>A release can be built by typing the following commands in the root <code>PowerToys</code> folder:</p> <pre><code>git clean -xfd\n\nmsbuild -t:build -restore -p:RestorePackagesConfig=true /p:Configuration=Release /p:Platform=x64 PowerToys.sln\n\nmsbuild -t:build -restore -p:RestorePackagesConfig=true /p:Configuration=Release /p:Platform=x64 tools\\BugReportTool\\BugReportTool.sln\n\nmsbuild -t:build -restore -p:RestorePackagesConfig=true /p:Configuration=Release /p:Platform=x64 tools\\WebcamReportTool\\WebcamReportTool.sln\n\nmsbuild -t:build -restore -p:RestorePackagesConfig=true /p:Configuration=Release /p:Platform=x64 tools\\StylesReportTool\\StylesReportTool.sln\n\nmsbuild -t:build -restore -p:RestorePackagesConfig=true /p:Configuration=Release /p:Platform=x64 installer\\PowerToysSetup.sln\n</code></pre> <p></p> <code>#powertoys</code> <code>#windows</code>","tags":["powertoys","windows"]},{"location":"guides/fancy-zones/fancy-zones-internals/index.html","title":"Fancy Zones Internals","text":"","tags":["powertoys","windows"]},{"location":"guides/fancy-zones/fancy-zones-internals/index.html#basic-concepts","title":"Basic Concepts","text":"<p>At the most fundamental level, Fancy Zones works by: - Adding metadata to application windows indicating their size, origin, and \"zone\" - Listening for window events (drag, resize) and \"hooking\" them</p>","tags":["powertoys","windows"]},{"location":"guides/fancy-zones/fancy-zones-internals/index.html#window-properties","title":"Window Properties","text":"<p>Metadata can be added to windows by leveraging Window Properties:</p> <p>A window property is any data assigned to a window. A window property is usually a handle of the window-specific data, but it may be any value. Each window property is identified by a string name.</p> <p>Window Detective can be used to view Window Properties.  In the example below, the picked window has the following Fancy Zones properties: - <code>FancyZones_RestoreSize</code> - <code>FancyZones_RestoreOrigin</code> - <code>FancyZones_TabSortKeyWithinZone</code> - <code>FancyZones_zones</code></p> <p></p>","tags":["powertoys","windows"]},{"location":"guides/fancy-zones/fancy-zones-internals/index.html#fancyzoneswindowproperties","title":"FancyZonesWindowProperties","text":"<ul> <li><code>FancyZonesWindowProperties.h</code>  contains defines for all window properties used by Fancy Zones.</li> <li>FancyZonesWindowProperties.cpp contains the <code>StampZoneIndexProperty()</code> method, used to \"stamp\" window properties to window handles.</li> </ul>","tags":["powertoys","windows"]},{"location":"guides/fancy-zones/fancy-zones-internals/index.html#windows-events","title":"Windows Events","text":"<p>Windows is an event-based operating system, meaning, all windows generate and consume events.  Events can broadly be divided into two types: - WinEvents - Messages</p>","tags":["powertoys","windows"]},{"location":"guides/fancy-zones/fancy-zones-internals/index.html#winevents","title":"WinEvents","text":"<p>Microsoft defines WinEvents thusly:</p> <p>Server applications and the operating system use WinEvents to notify clients when a change occurs in the system or in the user interface.</p> <p>WinEvent support is a feature of the Windows operating system that provides:</p> <ul> <li>A simple way for clients to register for event notifications.</li> <li>A mechanism for injecting client code into servers.</li> <li>Routing of events from servers to interested clients.</li> <li>Automatic event generation for most HWND-based controls.</li> </ul> <p>An application can \"listen\" for events by registering a hook.</p>","tags":["powertoys","windows"]},{"location":"guides/fancy-zones/fancy-zones-internals/index.html#windows-hooks","title":"Windows Hooks","text":"<p>Microsoft defines hooks thusly: </p> <p>A hook is a mechanism by which an application can intercept events, such as messages, mouse actions, and keystrokes. A function that intercepts a particular type of event is known as a hook procedure. A hook procedure can act on each event it receives, and then modify or discard the event.</p> <p>Hooks can be one of the following: - In-Context - Out-of-Context</p> <p>There are two types of hooks <code>thread</code> and <code>global</code>.  Global hooks require DLL-injection.</p> <p>Hooks are set by registering a <code>WinEventProc</code> callback function using <code>SetWinEventHook</code>.</p>","tags":["powertoys","windows"]},{"location":"guides/fancy-zones/fancy-zones-internals/index.html#fancyzonesappcpp","title":"FancyZonesApp.cpp","text":"<p>Fancy Zones calls SetWinEventHook  in <code>FancyZonesApp::InitHooks()</code> to subscribe to the following system-level and object-level events.  </p> <pre><code>    std::array&lt;DWORD, 7&gt; events_to_subscribe = {\nEVENT_SYSTEM_MOVESIZESTART,\nEVENT_SYSTEM_MOVESIZEEND,\nEVENT_OBJECT_NAMECHANGE,\nEVENT_OBJECT_UNCLOAKED,\nEVENT_OBJECT_SHOW,\nEVENT_OBJECT_CREATE,\nEVENT_OBJECT_LOCATIONCHANGE\n};\n</code></pre> <p>These event constants are detailed in the Windows documentation here, Event Constants.</p> <p>The hooked events are received in <code>FancyZonesApp</code>  and ultimately translated into Windows Messages which are consumed by the Fancy Zones <code>message loop</code> defined in[FancyZones.cpp]].</p>","tags":["powertoys","windows"]},{"location":"guides/fancy-zones/fancy-zones-internals/index.html#fancyzonescpp","title":"FancyZones.cpp","text":"<p>The <code>FancyZones</code> class is where most of the Fancy Zones business logic is defined.  </p> <p><code>FancyZones::HandleWinHookEvent()</code>  translates received events into internal Windows Messages which are consumed in <code>FancyZones::WndProc()</code>.</p>","tags":["powertoys","windows"]},{"location":"guides/fancy-zones/fancy-zones-internals/index.html#windows-messages","title":"Windows Messages","text":"<p>Windows Messages are a type of event used by the operating system to provide external input to a window:</p> <p>Unlike MS-DOS-based applications, Windows-based applications are event-driven. They do not make explicit function calls (such as C run-time library calls) to obtain input. Instead, they wait for the system to pass input to them.</p> <p>The system passes all input for an application to the various windows in the application. Each window has a function, called a window procedure, that the system calls whenever it has input for the window. The window procedure processes the input and returns control to the system. For more information about window procedures, see Window Procedures.</p> <p>At the most basic level, all Windows GUI applications are simply a window and a message loop.</p> <p><code>Windows Detective</code> can be used to view Windows Events by right-clicking on a window handle and selecting \"Messages\".</p> <p>![[Pasted image 20230214133520.png]]</p>","tags":["powertoys","windows"]},{"location":"guides/fancy-zones/fancy-zones-internals/index.html#clicking-maximize-button-on-notepad-toolbar","title":"Clicking Maximize button on Notepad Toolbar","text":"<p>![[Pasted image 20230216094337.png]]</p>","tags":["powertoys","windows"]},{"location":"guides/fancy-zones/fancy-zones-internals/index.html#clicking-full-screen-button-in-youtube-on-chrome","title":"Clicking \"Full Screen\" Button in Youtube on Chrome","text":"<p>![[Pasted image 20230216095107.png]]</p>","tags":["powertoys","windows"]},{"location":"guides/fancy-zones/fancy-zones-internals/index.html#maximize-in-zone-implementation","title":"\"Maximize in Zone\" Implementation","text":"","tags":["powertoys","windows"]},{"location":"guides/fancy-zones/fancy-zones-internals/index.html#example-1-basic-implementation","title":"Example 1: Basic Implementation","text":"<p>Implementing a feature which resizes a \"maximized\" window so that it fits within the zone it is currently in.</p> <p>First, we need to determine what event is generated when the \"maximize\" button is pressed.  </p> <p>Using Microsoft Spy++, we see the following: </p> <p>![Pasted image 20230214154342.png</p> <p>Ok, great!  It looks like the <code>WM_WINDOWPOSCHANGING</code> event gets fired, so we can hook that event.  Searching the Fancy Zones code base for <code>WM_WINDOWPOSCHANGING</code> yields... nothing.</p> <p>Hitting up Google, yields this interesting hit:</p> <ul> <li>https://stackoverflow.com/questions/17436795/setwineventhook-window-maximized-event <pre><code>void CALLBACK exampleHook(HWINEVENTHOOK hook, DWORD event, HWND hWnd,\nLONG idObject, LONG idChild, DWORD dwEventThread, DWORD dwmsEventTime)\n{\nif (EVENT_OBJECT_LOCATIONCHANGE == event) {\nWINDOWPLACEMENT wp;\nwp.length = sizeof(WINDOWPLACEMENT);\nGetWindowPlacement(hWnd, &amp;wp);\nif (SW_SHOWMAXIMIZED == wp.showCmd) {\n// Window is maximized.\n}\n}\n}\n</code></pre></li> </ul> <p>Ok, so this guy says to hook the <code>EVENT_OBJECT_LOCATIONCHANGE</code> event, let's search, which results in a few hits, all in <code>FancyZonesApp.cpp</code>: - One - Another</p>","tags":["powertoys","windows"]},{"location":"guides/fancy-zones/fancy-zones-internals/index.html#step-1-update-fancyzonesappcpp","title":"Step 1: Update FancyZonesApp.cpp","text":"<p>First, update <code>FancyZonesApp.cpp</code> so that we're always listening to <code>EVENT_OBJECT_LOCATIONCHANGE</code> events.</p> <pre><code>    std::array&lt;DWORD, 7&gt; events_to_subscribe = {\nEVENT_SYSTEM_MOVESIZESTART,\nEVENT_SYSTEM_MOVESIZEEND,\nEVENT_OBJECT_NAMECHANGE,\nEVENT_OBJECT_UNCLOAKED,\nEVENT_OBJECT_SHOW,\nEVENT_OBJECT_CREATE,\nEVENT_OBJECT_LOCATIONCHANGE\n};\n</code></pre>","tags":["powertoys","windows"]},{"location":"guides/fancy-zones/fancy-zones-internals/index.html#step-2-update-fancyzonescpp","title":"Step 2: Update FancyZones.cpp","text":"<pre><code>else if (message == WM_PRIV_LOCATIONCHANGE)\n{\n// If the window is being resized via handle bars\nif (m_draggingState.IsDragging())\n{\nif (auto monitor = MonitorFromPoint(ptScreen, MONITOR_DEFAULTTONULL))\n{\nMoveSizeUpdate(monitor, ptScreen);\n}\n}\nelse\n{\nauto hwnd = reinterpret_cast&lt;HWND&gt;(wparam);\nif (FancyZonesWindowUtils::IsWindowMaximized(hwnd))\n{\nauto monitor = MonitorFromWindow(hwnd, MONITOR_DEFAULTTONULL);\nMoveToAppLastZone(hwnd, monitor, NULL);\n}\n}\n}\n</code></pre>","tags":["powertoys","windows"]},{"location":"guides/fancy-zones/fancy-zones-internals/index.html#example-2-parent-windows","title":"Example 2: Parent Windows","text":"","tags":["powertoys","windows"]},{"location":"guides/fancy-zones/fancy-zones-internals/index.html#example-3-dll-injection","title":"Example 3: DLL-Injection","text":"<p>There are two ways to inject DLLs: - SetWindowsHookEx() - CreateRemoteThread()</p>","tags":["powertoys","windows"]},{"location":"guides/fancy-zones/fancy-zones-internals/index.html#setwindowshookex","title":"SetWindowsHookEx","text":"","tags":["powertoys","windows"]},{"location":"guides/fancy-zones/fancy-zones-internals/index.html#considerations","title":"Considerations","text":"<ul> <li>Global vs per-Thread</li> <li>Hook type: WH_GETMESSAGE, WH_CALLWNDPROC, ...</li> <li>32-bit / 64-bit processes</li> <li>Windows Store Apps</li> </ul>","tags":["powertoys","windows"]},{"location":"guides/fancy-zones/fancy-zones-internals/index.html#debugging-tips","title":"Debugging Tips","text":"","tags":["powertoys","windows"]},{"location":"guides/fancy-zones/fancy-zones-internals/index.html#createremotethread","title":"CreateRemoteThread","text":"","tags":["powertoys","windows"]},{"location":"guides/fancy-zones/fancy-zones-internals/index.html#dll-injection-references","title":"DLL Injection References","text":"<ul> <li>https://www.apriorit.com/dev-blog/679-windows-dll-injection-for-api-hooks</li> <li>https://isaratech.com/cpp-dll-injection-using-createremotethread-on-windows/</li> <li>https://www.vicarius.io/blog/wtf-is-frida/</li> <li>https://github.com/rsmudge/vncdll/tree/master/rdll</li> </ul>","tags":["powertoys","windows"]},{"location":"guides/fancy-zones/fancy-zones-internals/index.html#references","title":"References","text":"<ul> <li>https://github.com/Taloth/PowerToys/commit/80ddcd08b9fa9537a4d5148735fe2fc9273aecb8</li> <li>https://github.com/microsoft/PowerToys/wiki/Fancy-Zones-deep-dive</li> <li>https://devblogs.microsoft.com/oldnewthing/20210104-00/?p=104656</li> <li> <p>http://www.winprog.org/tutorial/window_click.html</p> </li> <li> <p>https://stackoverflow.com/questions/1295999/event-when-a-window-gets-maximized-un-maximized </p><pre><code>protected override void WndProc(ref Message m)\n{\nbase.WndProc(ref m);\n// WM_SYSCOMMAND\nif (m.Msg == 0x0112)\n{\nif (m.WParam == new IntPtr(0xF030) // Maximize event - SC_MAXIMIZE from Winuser.h\n|| m.WParam == new IntPtr(0xF120)) // Restore event - SC_RESTORE from Winuser.h\n{\nUpdateYourUI();\n}\n}\n}\n</code></pre> </li> <li> <p>https://forums.codeguru.com/showthread.php?364445-How-to-detect-if-window-is-maximizing </p><pre><code>To detect if the window is maximizing, handle WM_SIZE and check wParam which will be SIZE_MAXIMIZED if maximized.\nYou can also use GetWindowPlacement to check whether a window is currently maximized or not.\n</code></pre> </li> </ul>","tags":["powertoys","windows"]},{"location":"guides/fancy-zones/fancy-zones-internals/index.html#things-i-considered","title":"Things I Considered","text":"<ul> <li>Making application window a child of a parent window<ul> <li>https://windowtop.info/</li> <li>https://github.com/microsoft/PowerToys/issues/279#issuecomment-1145102438</li> </ul> </li> <li>DirectComposition<ul> <li>https://github.com/Microsoft/Windows.UI.Composition-Win32-Samples/tree/master/cpp/ScreenCaptureforHWND </li> <li>https://github.com/microsoft/PowerToys/issues/279#issuecomment-1144363857 </li> </ul> </li> </ul> <code>#powertoys</code> <code>#windows</code>","tags":["powertoys","windows"]},{"location":"guides/home-diy/how-to-size-a-solar-battery-install/index.html","title":"How To Size A Solar Battery Install","text":"","tags":["solar","datascience"]},{"location":"guides/home-diy/how-to-size-a-solar-battery-install/index.html#how-to-size-a-solar-battery-install","title":"How To Size A Solar Battery Install","text":"<p>Are you considering installing solar panels on your home? While finding installers and getting quotes may be relatively straightforward, determining the need for and appropriate size for a home solar battery backup system can be a challenge. </p> <p>Last year, I was going through this process myself, and found it difficult to locate resources that could help me make an informed decision about the size of the battery bank I needed. </p> <p>In this article, I'll share my experience and provide some guidance to help you properly size your own home solar battery backup system.</p> <p>Info</p> <p>The Google Sheet used in this guide can be found here: link</p>","tags":["solar","datascience"]},{"location":"guides/home-diy/how-to-size-a-solar-battery-install/index.html#getting-started","title":"Getting Started","text":"<p>In order to properly size a home solar battery backup system, it's essential to have a clear understanding of your household's energy usage patterns: </p> <ol> <li>How much energy you consume </li> <li>When you consume it</li> </ol> <p>You can usually get this information from your utility company; if not, you can explore purchasing a \"home energy monitor\" to record the data yourself.</p>","tags":["solar","datascience"]},{"location":"guides/home-diy/how-to-size-a-solar-battery-install/index.html#getting-the-data-from-your-utility","title":"Getting The Data From Your Utility","text":"<p>If you're a SoCal Edison customer, you can download up to 13 months of data (in \"CSV\" and XML format) from their \"Data Sharing &amp; Download\" portal:</p> <p></p> <p>For me, a 13 month <code>.csv</code> export resulted in ~2.5Mb of data.</p>","tags":["solar","datascience"]},{"location":"guides/home-diy/how-to-size-a-solar-battery-install/index.html#measure-your-own-energy-usage","title":"Measure Your Own Energy Usage","text":"<p>\"Home Energy Monitors\" are typically HAN (Home Area Network) devices, which communicates with your smart meter using ZigBee.  </p> <p>Check to see if your utility provides incentives for purchasing one.  For example, SoCal Edison offers a $25 bill credit if you buy one of their approved HAN devices.</p> <p>Personally, I use the Emporia Vue Utility Connect (Amazon Affiliate Link).</p> <p>First, because it's one of the cheaper options, but more importantly, it integrates with Home Assistant's Energy dashboard, has a decent mobile app, and provides access to raw energy usage data in CSV format.</p> <p> </p>","tags":["solar","datascience"]},{"location":"guides/home-diy/how-to-size-a-solar-battery-install/index.html#data-cleanup","title":"Data Cleanup","text":"<p>Since I was in a hurry, and couldn't wait a year to collect my usage data,  I performed my analysis using the exported SoCal Edison <code>.csv</code> data.</p> <p>Here's a snippet of what it looks like:</p> <pre><code>Energy Usage Information\n\"For location: xxxxx\"\n\nMeter Reading Information\n\"Type of readings: Electricity\"\n\nSummary of Electric Power Usage Information*\n\"Your download will contain interval usage data that is currently available for your selected Service Account. Based on how our systems process and categorize usage data, your download may contain usage data of the following types: actual, estimated, validated or missing. \"\n\nDetailed Usage\n\"Start date: 2022-02-20 00:00:00\u00a0 for 393 days\"\n\n\"Data for period starting: 2022-02-20 00:00:00\u00a0 for 24 hours\"\nEnergy \u00a0Delivered time period,Usage\u00a0Delivered(Real energy in kilowatt-hours)(Real energy in kilowatt-hours),Reading quality\n\"2022-02-20 00:00:00\u00a0to 2022-02-20 00:15:00\",\"0.200\",\"\"\n\"2022-02-20 00:15:00\u00a0to 2022-02-20 00:30:00\",\"0.190\",\"\"\n...\n\"2022-02-20 23:45:00\u00a0to 2022-02-21 00:00:00\",\"0.170\",\"\"\n\n\"Data for period starting: 2022-02-20 00:00:00\u00a0 for 24 hours\"\nEnergy \u00a0Received time period,Usage\u00a0Received(Real energy in kilowatt-hours)(Real energy in kilowatt-hours),Reading quality\n\"2023-01-30 00:00:00\u00a0to 2023-01-30 00:15:00\",\"0.000\",\"\"\n...\n</code></pre> <p>As you can see, it's got a good bit of cruft, which we'll have to clean-up.</p> <p>Since my <code>sed</code> and <code>awk</code>-fu is weak, I ended up writing a Python script:</p> cleanup.py<pre><code>import re\nimport csv\n# Energy data rows look like: \"2022-02-20 00:00:00\u00a0to 2022-02-20 00:15:00\",\"0.200\",\"\"\npattern = r'\"(\\d{4}-\\d{2}-\\d{2}) (\\d{2}:\\d{2}:\\d{2}) to (\\d{4}-\\d{2}-\\d{2}) (\\d{2}:\\d{2}:\\d{2})\",\"([\\d\\.]+)\",\"\"'\nwith open('energy_usage_data.csv',encoding='utf8') as input, open('output.csv', 'w', newline='') as output:\nwriter = csv.writer(output)\nwriter.writerow([\"Start Date\", \"Start Time\", \"Start Hour\", \"End Date\", \"End Time\", \"Usage\"])\nfor row in input:\n# Replace \"non-breaking spaces\"...\nrow = row.replace(\"\\xa0\", \" \").strip()\nmatch = re.match(pattern, row)\nif match:\nstart_date, start_time, end_date, end_time, usage = match.groups()\nstart_hour = start_time.split(':')[0]\nwriter.writerow([start_date, start_time, start_hour, end_date, end_time, usage])\n</code></pre> <p>The script removes the \"non-data\" rows interspersed throughout the input file and separates out the date field <code>2022-02-20 00:15:00\u00a0to 2022-02-20 00:30:00</code> into fields that we can pivot off of in Excel.</p>","tags":["solar","datascience"]},{"location":"guides/home-diy/how-to-size-a-solar-battery-install/index.html#initial-analysis","title":"Initial Analysis","text":"<p>Let's sanity check and get a feel for the data by creating a couple of quick and dirty pivot charts.</p>","tags":["solar","datascience"]},{"location":"guides/home-diy/how-to-size-a-solar-battery-install/index.html#monthly-usage","title":"Monthly Usage","text":"<p>Charting the data by month helps us understand the ebbs and flows of our energy usage over the year.   </p> <p>For my dataset, there were no major insights, but it's nice to see our peak demand correlates with summer solstice, a period of peak production for solar installs.</p> <p></p>","tags":["solar","datascience"]},{"location":"guides/home-diy/how-to-size-a-solar-battery-install/index.html#hourly-usage","title":"Hourly Usage","text":"<p>This simple scatterplot gives us an idea of how our energy usage is distributed across each day.</p> <p>For my household, it was interesting to learn that most of our usage occurs after 5pm, typically non-peak production hours for most any solar install.</p> <p>Taken by itself, this insight provides a pretty strong justification for investing in a battery backup system.  Let's dig a bit further to validate this hypothesis.</p> <p></p>","tags":["solar","datascience"]},{"location":"guides/home-diy/how-to-size-a-solar-battery-install/index.html#advanced-analysis","title":"Advanced Analysis","text":"<p>Now that we have an inkling that a battery backup system might make sense, a few factors that need to be taken into account to determine the appropriate size. </p> <p>First, you need to calculate your daily energy consumption and the maximum amount of energy that your solar panels can produce. This will help you determine how much excess energy your system generates that can be stored in the batteries. </p> <p>Second, you need to determine the length of time that you want the backup power to last in case of a power outage. This will help you determine the amount of energy storage capacity that you need. </p>","tags":["solar","datascience"]},{"location":"guides/home-diy/how-to-size-a-solar-battery-install/index.html#daily-excess-power-generated","title":"Daily Excess Power Generated","text":"<p>To create this view, we have to do a bit of estimating, specifically, we have to estimate how much energy our panels generate over whatever time period we're interested in.</p> <p></p> <p>The SoCal Edison data gives us our usage (kWh) in 15 minute increments.</p> <p>We can roughly estimate our solar install's production over the same period by taking it's \"system size\" and dividing it by 4.</p> <p>For example, a 7.1 kWh system would generate about <code>1.775 kWh</code> over that 15-minute period:</p> <p>$$  7.1 kWh / 4 = 1.775 kWh  $$ Of course, solar panels don't generate electricity 24/7, so we'll have to ballpark when our system generates power and when it doesn't.  </p> <p>In my model, I estimated that my system would generate <code>7.1 kWh</code> every hour between 12pm - 5pm, and <code>0 kWh</code> outside this window.</p> <p>Plugging this in, I'm able to estimate the \"Daily Excess Power (kWh)\" of my hypothetical solar install by subtracting the estimated \"Daily Generated Power (kWh)\" from the \"Daily Usage (kWh)\", provided by SoCal Edison:</p> \\[ DailyExcessPower (kWh) = DailyGeneratedPower (kWh) - DailyUsage (kWh) \\]","tags":["solar","datascience"]},{"location":"guides/home-diy/how-to-size-a-solar-battery-install/index.html#daily-total-battery-usage","title":"Daily Total battery Usage","text":"<p>Now that we've estimated how much excess capacity our system generates, we know how much capacity our battery system could potentially capture.</p> <p></p>","tags":["solar","datascience"]},{"location":"guides/home-diy/how-to-size-a-solar-battery-install/index.html#conclusions","title":"Conclusions","text":"<p>After reviewing my data,  </p> <code>#solar</code> <code>#datascience</code>","tags":["solar","datascience"]},{"location":"guides/window-hacking-with-rust/creating-a-dll-with-rust/index.html","title":"Creating A DLL With Rust","text":"","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-dll-with-rust/index.html#creating-a-dll-with-rust","title":"Creating A DLL With Rust","text":"<p>In this four-part, project-based series I'll show you how to:</p> <ul> <li> Create a Windows dynamic-link library (DLL) using Rust</li> <li> Inject DLLs into processes using Process Hacker</li> <li> Inject DLLs into processes using Rust</li> <li> Create application windows using Rust</li> <li> Override a window's behavior using subclassing</li> </ul> <p>By the end of the series, you will build an injectable DLL that let's you \"full-screen\" a browser window without it taking up your entire screen:</p> <p></p> <p>Pretty cool, eh?</p>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-dll-with-rust/index.html#background","title":"Background","text":"<p>My interest in writing DLLs started, as with many things, as an attempt to scratch an itch.</p> <p>See, I have an ultrawide, and the problem with all ultrawides, is window management; more specifically, the lack of sane window management.</p> <p></p> <p>Instead of emulating a dual- or triple- monitor setup, operating systems treat your monitor as ONE BIGASS MONITOR, which I guess, well, yeah, who would have thought...</p> <p>Anyways, after evaluating many, many, many potential solutions, I landed on Microsoft's very own Fancy Zones, perfect in all ways, apart from one, when you \"Full Screen\" a YouTube video, the zone boundary is broken and the video consumes the entire screen.</p> <p>After a few weeks of hacking, I was able to cobble together a C++-based solution which utilized DLL-injection: peddamat/PowerToys</p> <p>This article series will walk through the development of an identical solution utilizing Rust.</p>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-dll-with-rust/index.html#what-are-dlls","title":"What Are DLLs?","text":"<p>Microsoft describes them as:</p> <p>... a kind of executable file that acts as a shared library of functions and resources....</p> <p>More importantly:</p> <p>... (they) run in the context of the applications that call them. The operating system loads the DLL into an application's memory space. It's done either when the application is loaded (implicit linking), or on demand at runtime (explicit linking)...</p> <p>And an added bonus:</p> <p>Multiple applications can access the contents of a single copy of a DLL in memory at the same time.</p> <p>Key points being, DLLs are:</p> <ul> <li>similar to <code>.exe's</code></li> <li>loaded into an application's memory space</li> <li>shared between multiple applications</li> </ul>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-dll-with-rust/index.html#compiling-your-first-dll","title":"Compiling Your First DLL","text":"","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-dll-with-rust/index.html#hellodll","title":"hello.dll","text":"<p>Let's begin by creating a new library crate called <code>hello</code>:</p> <pre><code>$ cargo new hello --lib\n</code></pre> <p>This should feel familiar, the <code>--lib</code> bit lets <code>cargo</code> know we want a library crate, which results in:</p> <pre><code>$ tree\n.\n\u251c\u2500\u2500 Cargo.toml\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 lib.rs\n</code></pre> <p><code>Cargo.toml</code> feels familiar\u2026</p> Cargo.toml<pre><code>[package]\nname = \"hello\"\nversion = \"0.1.0\"\nedition = \"2021\"\n[dependencies]\n</code></pre> <p>\u2026 and <code>lib.rs</code> contains the library equivalent of a \"Hello World\":</p> lib.rs<pre><code>pub fn add(left: usize, right: usize) -&gt; usize {\nleft + right\n}\n#[cfg(test)]\nmod tests {\nuse super::*;\n#[test]\nfn it_works() {\nlet result = add(2, 2);\nassert_eq!(result, 4);\n}\n}\n</code></pre> <p>To build the crate, use:</p> <pre><code>$ cd hello\n$ cargo build\n</code></pre> <p>Which produces the following:</p> <pre><code>$ tree\n...\n\u2514\u2500\u2500 target\n    \u2514\u2500\u2500 debug\n        ...\n        \u2514\u2500\u2500 libhello.rlib\n</code></pre> <p>Unfortunately, <code>libhello.rlib</code> isn\u2019t a <code>.dll</code>.  It\u2019s actually something called a 'Rust library', intended for internal consumption within and between Rust programs.</p> <p>To produce a <code>.dll</code>, we must add a <code>crate-type</code> specifier to <code>Cargo.toml</code>:</p> Cargo.toml<pre><code>[package]\nname = \"hello\"\nversion = \"0.1.0\"\nedition = \"2021\"\n[lib]\ncrate-type = [\"cdylib\"]\n[dependencies]\n</code></pre> <p>Building the project now results in:</p> <pre><code>$ cargo build\n   Compiling hello v0.1.0 (C:\\Users\\me\\source\\blog_qa\\hello)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.66s\n\n$ tree\n.\n\u2514\u2500\u2500 target\n    \u2514\u2500\u2500 debug\n        ...\n        \u2514\u2500\u2500 hello.dll\n</code></pre> <p>Hooray!</p>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-dll-with-rust/index.html#wait-what","title":"Wait, what?","text":"<p>The <code>crate-type</code> attribute allows us to specify what sort of artifacts we want <code>cargo</code> to generate for us.</p> <p>The full list can be found here, but a good summary is:</p> <ul> <li><code>bin</code>: ordinary executable.</li> <li><code>lib</code>: a library to be linked statically into Rust programs.</li> <li><code>dylib</code>: a library to be linked dynamically into Rust programs.</li> <li><code>staticlib</code>: a library to be linked statically into non-Rust programs.</li> <li><code>cdylib</code>: a library to be linked dynamically into non-Rust programs.</li> <li>source</li> </ul> <p>We use the <code>cdylib</code> crate type because our ultimate goal is to inject <code>hello.dll</code> into an existing Windows process, which, let's be honest, is likely non-Rust.   However, feel free to try this project with using the <code>dylib</code>.</p> <p>In addition to <code>hello.dll</code>, Rust produces a number of other artifacts:</p> <ul> <li><code>*.d</code> \u2014 Makefile-compatible dependency lists</li> <li><code>*.rlib</code> \u2014 Rust library files. Contain the compiled code of a dependency</li> <li><code>build</code> \u2014 Directories for build scripts to use as scratch space</li> <li><code>deps</code> \u2014 Your compiled dependencies</li> <li><code>examples</code> \u2014 Binaries from the <code>examples</code> directory</li> <li><code>incremental</code> \u2014 A directory for the incremental compilation cache</li> <li><code>*-{hash}</code> \u2014 Binaries from <code>cargo test</code></li> <li>executables \u2014 Your target binaries</li> </ul> <p>You can read more about them: here</p>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-dll-with-rust/index.html#further-reading","title":"Further Reading","text":"<ul> <li>What is the Difference Between <code>dylib</code> and <code>cdylib</code></li> <li>The Rust Reference: Linkage</li> </ul>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-dll-with-rust/index.html#using-your-first-dll","title":"Using Your First DLL","text":"","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-dll-with-rust/index.html#hello_runnerexe","title":"hello_runner.exe","text":"<p>Let's put our fresh <code>hello.dll</code> to use by creating a new binary crate called <code>hello_runner</code>:</p> <pre><code>$ cd ..\n$ cargo new hello_runner\n</code></pre> <p>Next, let's indicate a dependency on the <code>hello</code> crate by adding a line to the <code>[dependencies]</code> block in <code>Cargo.toml</code>:</p> Cargo.toml<pre><code>[package]\nname = \"hello_runner\"\nversion = \"0.1.0\"\nedition = \"2021\"\n[dependencies]\nhello = { path = \"../hello\" }\n</code></pre> <p>Let's replace <code>hello_runner's</code> <code>main.rs</code> with something simple, just to make sure <code>hello.dll</code> is linked:</p> main.rs<pre><code>fn main() {\nprintln!(\"2+2={}\", add(2,2));\n}\n</code></pre> <p>Oh look, rust-analyzer is already screaming at us:</p> <p></p> <p>It seems merely specifying the dependency on <code>hello</code> in <code>Cargo.toml</code> isn't enough for Rust to find <code>add()</code> in <code>hello.dll</code>.</p> <p>So to tell Rust that there indeed exists an <code>add()</code> out there, somewhere, we can add an extern block to the top of <code>main.rs</code>:</p> main.rs<pre><code>extern {\nfn add(left: usize, right: usize) -&gt; usize;\n}\n</code></pre> <p>rust-analyzer is still dissatisfied:</p> <p></p> <p>Following along carefully, we add an <code>unsafe</code> block, and...</p> <pre><code>extern {\nfn add(left: usize, right: usize) -&gt; usize;\n}\nfn main() {\nunsafe {\nprintln!(\"2+2={}\", add(2,2));\n}\n}\n</code></pre> <p>... silence, perfect!</p> <p>Doing a quick <code>cargo build</code>:</p> <pre><code>$ cargo build\n\nwarning: The package `hello` provides no linkable target. The compiler might raise an error while compiling `hello_runner`. Consider adding 'dylib' or 'rlib' to key `crate-type` in `hello`'s Cargo.toml. This warning might turn into a hard error in the future.\n   Compiling hello v0.1.0 (C:\\Users\\me\\source\\blog_qa\\hello)\nCompiling hello_runner v0.1.0 (C:\\Users\\me\\source\\blog_qa\\hello_runner)\nerror: linking with `link.exe` failed: exit code: 1120\n|\n...\n  = note: hello_runner.3x2hoz24wh045sx8.rcgu.o : error LNK2019: unresolved external symbol add referenced in function _ZN12hello_runner4main17h5d530bb84e958f44E\n          C:\\Users\\me\\source\\blog_qa\\hello_runner\\target\\debug\\deps\\hello_runner.exe : fatal error LNK1120: 1 unresolved externals\nerror: could not compile `hello_runner` due to previous error\n</code></pre> <p>What fresh hell...</p> <p>Ok, re-reading The Book's External Block section a bit more thoroughly, we see that we can specify a <code>link</code> attribute:</p> main.rs<pre><code>#[link(name = \"hello.dll\", kind=\"dylib\")]\nextern {\nfn add(left: usize, right: usize) -&gt; usize;\n}\nfn main() {\nunsafe {\nprintln!(\"2+2={}\", add(2,2));\n}\n}\n</code></pre> <p><code>cargo build</code>:</p> <pre><code>$ cargo build\nwarning: The package `hello` provides no linkable target. The compiler might raise an error while compiling `hello_runner`. Consider adding 'dylib' or 'rlib' to key `crate-type` in `hello`'s Cargo.toml. This warning might turn into a hard error in the future.\nCompiling hello_runner v0.1.0 (C:\\Users\\me\\source\\blog_qa\\hello_runner)\nerror: linking with `link.exe` failed: exit code: 1120\n|\n...\n= note: hello_runner.3x2hoz24wh045sx8.rcgu.o : error LNK2019: unresolved external symbol __imp_add referenced in function _ZN12hello_runner4main17h5d530bb84e958f44E\nC:\\Users\\me\\source\\blog_qa\\hello_runner\\target\\debug\\deps\\hello_runner.exe : fatal error LNK1120: 1 unresolved externals\nerror: could not compile `hello_runner` due to previous error\n</code></pre> <p>Weeps.</p> <p>Ok, pulling out the goddamn cdylib RFC, which helpfully explains:</p> <p>Symbol visibility - rdylibs will expose all symbols as rlibs do, cdylibs will expose symbols as executables do. This means that <code>pub fn foo() {}</code> will not be an exported symbol, but <code>#[no_mangle] pub extern fn foo() {}</code> will be an exported symbol.</p> <p>Adding the <code>#[no_mangle] pub extern</code> to <code>add()</code>:</p> main.rs<pre><code>#[no_mangle]\npub extern fn add(left: usize, right: usize) -&gt; usize {\nleft + right\n}\n</code></pre> <p><code>cargo build</code>:</p> <pre><code>$ cargo build\nwarning: The package `hello` provides no linkable target. The compiler might raise an error while compiling `hello_runner`. Consider adding 'dylib' or 'rlib' to key `crate-type` in `hello`'s Cargo.toml. This warning might turn into a hard error in the future.\n   Compiling hello v0.1.0 (C:\\Users\\me\\source\\blog_qa\\hello)\nCompiling hello_runner v0.1.0 (C:\\Users\\me\\source\\blog_qa\\hello_runner)\nFinished dev [unoptimized + debuginfo] target(s) in 0.80s\n</code></pre> <p>Thank you god.   That warning is odd, though...</p> <pre><code>$ tree\n.\n\u2514\u2500\u2500 target\n    \u2514\u2500\u2500 debug\n        ...\n        \u251c\u2500\u2500 hello_runner.exe\n        ...\n</code></pre> <p>Let's see if <code>hello_runner.exe</code> runs using <code>cargo run</code>:</p> <pre><code>$ cargo run\n    Finished dev [unoptimized + debuginfo] target(s) in 0.01s\n     Running `target\\debug\\hello_runner.exe`\n2+2=4\n</code></pre> <p>Da dum!</p>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-dll-with-rust/index.html#upon-further-examination","title":"Upon Further Examination...","text":"<p>Ok, thus far we've been using <code>cargo run</code> to execute <code>hello_runner</code>, but for shits and giggles, let's try running <code>hello_runner.exe</code> directly:</p> <pre><code>$ target\\debug\\hello_runner.exe\n\n$\n</code></pre> <p>wat.</p> <pre><code>$ ls -l\nbuild\ndeps\nexamples\nhello_runner.d\nhello_runner.exe\nhello_runner.pdb\nincremental\n</code></pre> <p>Ah... <code>hello.dll</code> isn't in the same directory as <code>hello_runner.exe</code>...</p> <pre><code>$ cp deps\\hello.dll .\n$ hello_runner.exe\n2+2=4\n</code></pre> <p>Bingo.  Ok, so that little exercise gives us a fairly good idea that <code>hello_runner.exe</code> has indeed \u201cdynamically\u201d-linked <code>hello.dll</code>, but how do we know for sure?</p> <p>If you have Visual Studio installed, chances are you have a handy tool called <code>dumpbin.exe</code>, which is available using a \"Developer Command Prompt for VS 2022\".</p> <p>View <code>hello.dll</code>'s exported functions using <code>dumpbin /exports</code>:</p> <pre><code>$ dumpbin /exports hello.dll\nMicrosoft (R) COFF/PE Dumper Version 14.34.31942.0\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\nDump of file hello.dll\n\nFile Type: DLL\n\nSection contains the following exports for hello.dll\n\n00000000 characteristics\n    FFFFFFFF time date stamp\n        0.00 version\n           1 ordinal base\n           1 number of functions\n           1 number of names\n\nordinal hint RVA      name\n\n1    0 00001000 add = add\n\nSummary\n\n1000 .data\n        1000 .pdata\n        7000 .rdata\n        1000 .reloc\n       18000 .text\n</code></pre> <p>View <code>hello_runner.exe</code>'s imported functions using <code>dumpbin /imports</code>:</p> <pre><code>$ dumpbin /imports hello_runner.exe |more\nMicrosoft (R) COFF/PE Dumper Version 14.34.31942.0\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\nDump of file hello_runner.exe\n\nFile Type: EXECUTABLE IMAGE\n\nSection contains the following imports:\n\nhello.dll\n             14001E2A0 Import Address Table\n             140026CC8 Import Name Table\n                     0 time date stamp\n                     0 Index of first forwarder reference\n\n0 add\n\nKERNEL32.dll\n  ...\n</code></pre> <p>For the more visually included, the venerable x64dbg or Dependencies can also be used to inspect <code>hello_runner.exe</code>:</p> <p></p>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-dll-with-rust/index.html#wait-what_1","title":"Wait, what?","text":"<p>Eagle-eyed readers may have noticed the the <code>kind=\"dylib\"</code> in the <code>main.rs</code> <code>#[link...</code> block:</p> main.rs<pre><code>#[link(name = \"hello.dll\", kind=\"dylib\")]\nextern {\nfn add(left: usize, right: usize) -&gt; usize;\n}\n</code></pre> <p>The external blocks#link-attribute section explains :</p> <ul> <li><code>dylib</code> \u2014 Indicates a dynamic library. This is the default if <code>kind</code> is not specified.</li> <li><code>static</code> \u2014 Indicates a static library.</li> <li><code>framework</code> \u2014 Indicates a macOS framework. This is only valid for macOS targets.</li> <li><code>raw-dylib</code> \u2014 Indicates a dynamic library where the compiler will generate an import library to link against (see <code>dylib</code> versus <code>raw-dylib</code> below for details). This is only valid for Windows targets.</li> </ul>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-dll-with-rust/index.html#further-reading_1","title":"Further Reading","text":"<ul> <li>Linking Rust Crates, Part 1</li> <li>How to dynamically link to a dynamic library? -C prefer-dynamic doesn't seems to work</li> </ul>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-dll-with-rust/index.html#pulling-bootstraps","title":"Pulling Bootstraps","text":"<p>As it currently stands, our humble <code>hello.dll</code> doesn't do much;  essentially a glorified wastebasket at the beck and call of any old binary that links up with it.</p> <p>Let's give our <code>hello.dll</code> a bit of agency by defining an entry-point.</p>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-dll-with-rust/index.html#dllmain","title":"DllMain","text":"<p>What is an entry-point?  In short, whenever Windows loads a DLL, it checks to see if it exports a function named <code>DllMain</code>.  If so, the operating system calls the function with a <code>DLL_PROCESS_ATTACH</code> or <code>DLL_PROCESS_DETACH</code> when attaching or detaching the DLL to processes.</p> <p>Let's see how this works be adding a <code>DllMain</code> to <code>hello.dll</code>.</p> <p>First, we'll need to add a few <code>windows-rs</code> crates to the <code>hello</code> crate's <code>cargo.toml</code>:</p> Cargo.toml<pre><code>[dependencies.windows]\nversion = \"0.*\"\nfeatures = [\n\"Win32_Foundation\",\n\"Win32_System_SystemServices\",\n\"Win32_UI_WindowsAndMessaging\",\n]\n</code></pre> <p>Next, we can add a barebones implementation of <code>DllMain</code> to the top of <code>lib.rs</code>:</p> lib.rs<pre><code>use windows::{ Win32::Foundation::*, Win32::System::SystemServices::*, };\n#[no_mangle]\n#[allow(non_snake_case, unused_variables)]\nextern \"system\" fn DllMain(\ndll_module: HINSTANCE,\ncall_reason: u32,\n_: *mut ())\n-&gt; bool\n{\nmatch call_reason {\nDLL_PROCESS_ATTACH =&gt; (),\nDLL_PROCESS_DETACH =&gt; (),\n_ =&gt; ()\n}\ntrue\n}\n</code></pre> <p>A quick <code>cargo check</code> in either <code>/hello</code>  or <code>/hello_runner</code> shows that we're on the right path:</p> <pre><code>$ cargo\n    Finished dev [unoptimized + debuginfo] target(s) in 0.04s\n</code></pre> <p>Let's have our DLL do something when it receives a <code>DLL_PROCESS_ATTACH</code> and <code>DLL_PROCESS_DETACH</code>:</p> lib.rs<pre><code>use windows::{ Win32::Foundation::*, Win32::System::SystemServices::*, };\nuse windows::{ core::*, Win32::UI::WindowsAndMessaging::MessageBoxA, };\n#[no_mangle]\n#[allow(non_snake_case, unused_variables)]\nextern \"system\" fn DllMain(\ndll_module: HINSTANCE,\ncall_reason: u32,\n_: *mut ())\n-&gt; bool\n{\nmatch call_reason {\nDLL_PROCESS_ATTACH =&gt; attach(),\nDLL_PROCESS_DETACH =&gt; detach(),\n_ =&gt; ()\n}\ntrue\n}\nfn attach() {\nunsafe {\n// Create a message box\nMessageBoxA(HWND(0),\ns!(\"ZOMG!\"),\ns!(\"hello.dll\"),\nDefault::default()\n);\n};\n}\nfn detach() {\nunsafe {\n// Create a message box\nMessageBoxA(HWND(0),\ns!(\"GOODBYE!\"),\ns!(\"hello.dll\"),\nDefault::default()\n);\n};\n}\n</code></pre> <p>Run the <code>hello_runner</code> crate using <code>cargo run</code>:</p> <pre><code>$ cargo run\n    Finished dev [unoptimized + debuginfo] target(s) in 0.06s\n     Running `target\\debug\\hello_runner.exe`\n2+2=4\n</code></pre> <p>and...</p> <p></p> <p>and then...</p> <p></p> <p>Boom!</p> <p>Well... I'll admit that I may have been talking things a bit up.</p> <p>That did  feel a bit anti-climatic; theoretical, even;  far too ivory tower to be satisfying.</p> <p>Let's remedy this by slamming <code>hello.dll</code> into a random process using DLL injection.</p>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-dll-with-rust/index.html#further-reading_2","title":"Further Reading","text":"<ul> <li>About Dynamic-Link Libraries</li> <li>Exporting from a DLL</li> <li>DllMain entry point</li> <li>Implementing DllMain</li> <li>Dynamic-Link Library Entry-Point Function</li> <li>X-rays5/rust_win32_dllmain</li> </ul>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-dll-with-rust/index.html#injecting-the-gd-thing-into-notepadexe","title":"Injecting The GD Thing Into Notepad.exe","text":"<p>So what is \"DLL Injection\"?  Basically, it's leetspeek for using publically available Windows API calls to load a DLL into an unsuspecting application's memory space,  with bonus points if you can actually execute code from the DLL in the application's memory space.</p> <p>We will do both, but since the day grows old, we'll take the script kiddie route and use the handy \"Process Hacker\" tool.</p>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-dll-with-rust/index.html#but-first","title":"But First...","text":"<p>Let's make a small tweak to the <code>attach()</code> function in <code>lib.rs</code>, because we really want to feel the next part in our veins.</p> <p>Add this to the top of <code>lib.rs</code>: </p>lib.rs<pre><code>use windows::Win32::System::Threading::GetCurrentProcessId;\n</code></pre> <p>Since we added that, we need to also update our <code>[dependencies.windows]</code> in Cargo.toml`: </p>Cargo.toml<pre><code>[dependencies.windows]\nversion = \"0.*\"\nfeatures = [\n\"Win32_Foundation\",\n\"Win32_System_SystemServices\",\n\"Win32_UI_WindowsAndMessaging\",\n\"Win32_System_Threading\"\n]\n</code></pre> <p>And make <code>attach()</code> look like this </p>lib.rs<pre><code>fn attach() {\nunsafe {\nlet pid = GetCurrentProcessId();\nMessageBoxA(HWND(0),\nPCSTR(std::format!(\"Hello from process: {}!\\0\", pid).as_ptr()),\ns!(\"hello.dll\"),\nDefault::default()\n);\n};\n}\n</code></pre> <p>And finally:</p> <pre><code>$ cargo run\nwarning: The package `hello` provides no linkable target. The compiler might raise an error while compiling `hello_runner`. Consider adding 'dylib' or 'rlib' to key `crate-type` in `hello`'s Cargo.toml. This warning might turn into a hard error in the future.\n   Compiling windows v0.44.0\n   Compiling hello v0.1.0 (C:\\Users\\me\\source\\blog_qa\\hello)\nCompiling hello_runner v0.1.0 (C:\\Users\\me\\source\\blog_qa\\hello_runner)\nFinished dev [unoptimized + debuginfo] target(s) in 6.74s\n     Running `target\\debug\\hello_runner.exe`\n</code></pre> <p></p> <p>And we get our updated pop-up, good.</p>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-dll-with-rust/index.html#process-hacker","title":"Process Hacker","text":"<p>Now, grab Process Hacker: here and launch the <code>x64</code> version.</p> <p>If you closed the previous pop-up, do another <code>cargo run</code> and search for \"hello_runner.exe\" in the little search bar near the top right of the window.</p> <p></p> <p>Compare the contents of the PID column with the number in the pop-up.  For me, I get the same number, 33640.</p> <p>Now hit <code>Enter</code> (or right-click -&gt; Properties) to open the \"Properties\" panel:</p> <p></p> <p>The 'Threads' tab shows us that <code>hello_runner.exe</code> is using a single thread with a \"Thread ID\" (TID) of 18676.</p> <p>Clicking on the 'Modules' tab shows us that <code>hello.dll</code> is indeed loaded into <code>hello_runner.exe's</code> address space, in fact, it's at <code>0x7ffb5e7d0000</code> for me:</p> <p></p> <p>All of this makes sense, since <code>hello_runner.exe</code> is literally loading <code>hello.dll</code>, right?</p> <p>Well, I don't remember using <code>LoadLibraryW</code> anywhere...  but we did slap <code>#[link(name = \"hello.dll\", kind=\"dylib\")]</code> on that <code>extern</code> in hello_runner's <code>main.rs</code>.</p>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-dll-with-rust/index.html#implicit-vs-explicit-linking","title":"Implicit vs Explicit linking","text":"<p>If we stroll down [Memory Lane]], recall:</p> <p>... (they) run in the context of the applications that call them. The operating system loads the DLL into an application's memory space. It's done either when the application is loaded (implicit linking), or on demand at runtime (explicit linking)...</p> <p>Specifically,</p> <p>It's done either when the application is loaded (implicit linking), or on demand at runtime (explicit linking)...</p> <p>So, though we didn't directly call <code>LoadLibraryW</code> to load <code>hello.dll</code> we did define a runtime dependency on it; we explicitly linked it.</p> <p>Later on, when we actually do use <code>LoadLibraryW</code>, we'll be implicitly linking it.  Something to keep in mind in case you never need that information.</p>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-dll-with-rust/index.html#actually-injecting-teh-dll","title":"Actually Injecting teh DLL","text":"<p>Ok, finally , open up a Notepad instance, and find it in Process Hacker:</p> <p>![[Pasted image 20230303154533.png]]</p> <p>Next, right click on the <code>notepad.exe</code> process and find <code>Inject DLL</code> under the <code>Miscellaneous</code> context menu.</p> <p>![[Pasted image 20230303154417.png]]</p> <p>Find <code>hello.dll</code> in the hello_runner\\target\\debug\\deps folder and click \"Open\":</p> <p>![[Pasted image 20230225174016.png]]</p> <p>If you didn't have Notepad in the foreground, you may have to hunt for it...</p> <p>![[Pasted image 20230303154819.png]]</p> <p>But you will be rewarded with a...</p> <p>![[Pasted image 20230303154255.png]]</p> <p>![png-transparent-internet-meme-crying-happiness-tears-meme-love-white-face.png</p> <p>You can confirm that <code>hello.dll</code> has indeed been loaded into <code>notepad.exe</code>'s address space by opening up the <code>Modules</code> tab in Process Hacker's <code>Properties</code> panel.</p> <p></p> <p>Be sure to Unload <code>hello.dll</code> before you go:</p> <p></p> <p>Giving you a:</p> <p></p> <p>In general, it is always good practice to make sure your DLL is well behaved both loading and unloading.</p>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-dll-with-rust/index.html#just-a-little-further","title":"Just A Little Further","text":"","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-dll-with-rust/index.html#rust-workspaces","title":"Rust Workspaces","text":"<p>When injecting <code>hello.dll</code> above, you may noticed that there are actually two <code>hello.dll</code> binaries on our filesystem: one in <code>\\hello_runner\\target\\debug\\deps</code> and one in <code>\\hello\\target\\debug</code>.</p> <p>If you had the misfortune of trying to inject <code>hello.dll</code> from the latter, you'd have noticed that nothing happened.  Why?  Because it was a stale binary, left over from an earlier part of the tutorial when we were working in the <code>hello</code> crate context.</p> <p>To reduce this confusion, Rust provides us with the workspace concept, which allows us to group dependent crates into a single... workspace.</p> <p>First, let's do a bit of tidying, do a <code>cargo clean</code> from both the <code>hello</code> and <code>hello_runner</code> directories.</p> <p>Now, in the parent folder, create a <code>Cargo.toml</code> containing:</p> Cargo.toml<pre><code>[workspace]\nmembers = [\n\"hello\",\n\"hello_runner\",\n]\n</code></pre> <p>The directory should look like this:</p> <pre><code>$ tree -L 1 -a\n.\n\u251c\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 hello\n\u2514\u2500\u2500 hello_runner\n</code></pre> <p>Do a <code>cargo build</code>:</p> <pre><code>$ cargo build\nwarning: The package `hello` provides no linkable target. The compiler might raise an error while compiling `hello_runner`. Consider adding 'dylib' or 'rlib' to key `crate-type` in `hello`'s Cargo.toml. This warning might turn into a hard error in the future.\n   Compiling windows_x86_64_msvc v0.42.1\n   Compiling windows-targets v0.42.1\n   Compiling windows v0.44.0\n   Compiling hello v0.1.0 (C:\\Users\\me\\source\\blog_qa\\hello)\nCompiling hello_runner v0.1.0 (C:\\Users\\me\\source\\blog_qa\\hello_runner)\nFinished dev [unoptimized + debuginfo] target(s) in 6.92s\n</code></pre> <p>Which results in:</p> <pre><code>$ tree -L 3 -a\n.\n\u251c\u2500\u2500 Cargo.lock\n\u251c\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 hello\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 .gitignore\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Cargo.lock\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Cargo.toml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 src\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 lib.rs\n\u251c\u2500\u2500 hello_runner\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 .gitignore\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Cargo.lock\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Cargo.toml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 src\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 main.rs\n\u2514\u2500\u2500 target\n    ...\n    \u2514\u2500\u2500 debug\n        ...\n        \u251c\u2500\u2500 hello.dll\n        \u251c\u2500\u2500 hello_runner.exe\n        ...\n</code></pre> <p>Notice that we now only have one <code>target</code> directory.</p> <p>If you do a <code>cargo run</code>, you'll notice cargo is smart enough to execute <code>hello_runner.exe</code>:</p> <pre><code>$ cargo run\n    Finished dev [unoptimized + debuginfo] target(s) in 0.05s\n     Running `target\\debug\\hello_runner.exe`\n2+2=4\n</code></pre> <p>Lastly, if you're so inclined, do a <code>git init</code> and call it a night!</p> <p>Part 2 is here: Creating A Window With Rust</p> <p>Having trouble? The code this series can be found here: peddamat/how-to-create-a-dll-using-rust</p> <p></p> <code>#rust</code> <code>#dll</code> <code>#howto</code> <code>#windows</code> <code>#programming</code>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-window-with-rust/index.html","title":"Creating A Window With Rust","text":"","tags":["rust","dll","howto","windows","win32","windows-rs","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-window-with-rust/index.html#creating-a-window-with-rust","title":"Creating A Window With Rust","text":"<p>If you've been following along from Creating A DLL With Rust, you should know how to do the following:</p> <ul> <li> Create a Windows dynamic-link library (DLL) using Rust</li> <li> Inject DLLs into processes using Process Hacker</li> <li> Inject DLLs into processes using Rust</li> <li> Create application windows using Rust</li> <li> Override a window's behavior using subclassing</li> </ul> <p>In today's exercise, we are going to skip a step and learn about windows: how they work, how to create them, and how to customize them using something called subclassing.</p>","tags":["rust","dll","howto","windows","win32","windows-rs","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-window-with-rust/index.html#what-are-windows","title":"What Are Windows?","text":"<p>We spend all day interacting with windows,  but how much do we really know about them?</p> <p>By the end of this series we'll be elbow deep in them, so it's worth spending a moment to understand them more intimately.</p> <p>Fortunately, Microsoft\u2019s documentation on this topic is fantastic: About Windows.</p> <p>Take a few moments to peruse and come back here.  I'll wait.</p> <p>Ok, sketching out what we just read, GUI applications look something like this: </p> <p></p> <ul> <li>Every application has a WinMain entry-point function</li> <li>Every application must create at least one window</li> <li>Every window belongs to one window class</li> <li>Every window has one unique window handle</li> <li>Every window has one GUI thread</li> <li>Every GUI thread has one message queue</li> <li>Every window class contains one window procedure</li> </ul> <p>And, Windows is a message-based system, where:</p> <ul> <li>Every message sent or posted to a window is processed by its window procedure</li> <li>Every message posted to a window is placed in its message queue</li> <li>Every window must remove and process messages posted to its message queue</li> </ul>","tags":["rust","dll","howto","windows","win32","windows-rs","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-window-with-rust/index.html#further-reading","title":"Further Reading","text":"<ul> <li>GetMessage#Remarks</li> <li>When can a thread receive window messages?</li> <li>Windows and Messages</li> <li>Windows Programming/Message Loop Architecture</li> </ul>","tags":["rust","dll","howto","windows","win32","windows-rs","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-window-with-rust/index.html#overall-structure","title":"Overall Structure","text":"<p>Your First Windows Program presents a prototypical GUI application:  </p> <pre><code>#include &lt;windows.h&gt;\nLRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);\nint WINAPI wWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, PWSTR pCmdLine, int nCmdShow)\n{\n// Register the window class.\nconst wchar_t CLASS_NAME[]  = L\"Sample Window Class\";\nWNDCLASS wc = { };\nwc.lpfnWndProc   = WindowProc;\nwc.hInstance     = hInstance;\nwc.lpszClassName = CLASS_NAME;\nRegisterClass(&amp;wc);\n// Create the window.\nHWND hwnd = CreateWindowEx(\n...\nCLASS_NAME, // Window class\n...\n);\nif (hwnd == NULL)\n{\nreturn 0;\n}\nShowWindow(hwnd, nCmdShow);\n// Run the message loop.\nMSG msg = { };\nwhile (GetMessage(&amp;msg, NULL, 0, 0) &gt; 0)\n{\nTranslateMessage(&amp;msg);\nDispatchMessage(&amp;msg);\n}\nreturn 0;\n}\nLRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)\n{\nswitch (uMsg)\n{\ncase WM_DESTROY:\nPostQuitMessage(0);\nreturn 0;\n...\n}\nreturn DefWindowProc(hwnd, uMsg, wParam, lParam);\n}\n</code></pre> <p>With the code's comments delineating three functional areas:</p>","tags":["rust","dll","howto","windows","win32","windows-rs","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-window-with-rust/index.html#1-the-window-class","title":"1. The Window Class","text":"<p>Creates and registers a \"window class\", which is simply a  <code>WNDCLASS</code> struct.  </p> <p>At minimum we have to provide:</p> <ul> <li>a pointer to a WNDPROC callback function</li> <li>a handle to the .exe/.dll containing the WNDPROC</li> <li>a unique class name</li> </ul> <pre><code>// Register the window class.\nconst wchar_t CLASS_NAME[]  = L\"Sample Window Class\";\nWNDCLASS wc = { };\nwc.lpfnWndProc   = WindowProc;  // Pointer to \"window procedure\"\nwc.hInstance     = hInstance;\nwc.lpszClassName = CLASS_NAME;  // Unique class name\nRegisterClass(&amp;wc);             // Tell Windows about the new window class \n</code></pre>","tags":["rust","dll","howto","windows","win32","windows-rs","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-window-with-rust/index.html#2-window-instantiation","title":"2. Window Instantiation","text":"<p>Creates a new window, using the specs we defined in <code>WNDCLASS</code>, and displays the window to the screen:</p> <p></p><pre><code>// Create the window.\nHWND hwnd = CreateWindowEx(\n...\nCLASS_NAME, // Window class\n...\n);\nif (hwnd == NULL)\n{\nreturn 0;\n}\n// Display window to screen\nShowWindow(hwnd, nCmdShow);\n</code></pre> <code>CreateWindowEx</code> returns a \"handle\" aka \u201cwindow handle\", to the created window. <p>Window handles are unique to each created window, allowing us to reference them in our code.</p>","tags":["rust","dll","howto","windows","win32","windows-rs","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-window-with-rust/index.html#3-the-message-loop","title":"3. The Message Loop","text":"<p>Continuously calls <code>GetMessage</code> to grab messages sent to the window and dispatch them to the window's Window Procedure using <code>DispatchMessage</code>:</p> <pre><code>// Run the message loop.\nMSG msg = { };\nwhile (GetMessage(&amp;msg, NULL, 0, 0) &gt; 0)\n{\nTranslateMessage(&amp;msg);\nDispatchMessage(&amp;msg);\n}\n</code></pre>","tags":["rust","dll","howto","windows","win32","windows-rs","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-window-with-rust/index.html#the-window-procedure","title":"The Window Procedure","text":"<p>Receives and processes the window's messages, handing-off unprocessed messages to the operating system by calling <code>DefWindowProc</code>:</p> <pre><code>LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)\n{\nswitch (uMsg)\n{\ncase WM_DESTROY:\nPostQuitMessage(0);\nreturn 0;\n...\n}\nreturn DefWindowProc(hwnd, uMsg, wParam, lParam);\n}\n</code></pre>","tags":["rust","dll","howto","windows","win32","windows-rs","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-window-with-rust/index.html#further-reading_1","title":"Further Reading","text":"<ul> <li>Using Messages and Message Queues</li> </ul>","tags":["rust","dll","howto","windows","win32","windows-rs","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-window-with-rust/index.html#actually-creating-the-window","title":"Actually Creating The Window","text":"<p>The <code>windows-rs</code> crate provides a <code>create_window</code>  sample, a Rust version of what we examined above:</p> main.rs<pre><code>use windows::{\ncore::*, Win32::Foundation::*, Win32::Graphics::Gdi::*,\nWin32::System::LibraryLoader::GetModuleHandleA,\nWin32::UI::WindowsAndMessaging::*,\n};\nfn main() -&gt; Result&lt;()&gt; {\nunsafe {\nlet instance = GetModuleHandleA(None)?;\ndebug_assert!(instance.0 != 0);\nlet window_class = s!(\"window\");\nlet wc = WNDCLASSA {\nhCursor: LoadCursorW(None, IDC_ARROW)?,\nhInstance: instance,\nlpszClassName: window_class,\nstyle: CS_HREDRAW | CS_VREDRAW,\nlpfnWndProc: Some(wndproc),\n..Default::default()\n};\nlet atom = RegisterClassA(&amp;wc);\ndebug_assert!(atom != 0);\nCreateWindowExA(\nWINDOW_EX_STYLE::default(),\nwindow_class,\ns!(\"This is a sample window\"),\nWS_OVERLAPPEDWINDOW | WS_VISIBLE,\nCW_USEDEFAULT,\nCW_USEDEFAULT,\n800,\n600,\nNone,\nNone,\ninstance,\nNone,\n);\nlet mut message = MSG::default();\nwhile GetMessageA(&amp;mut message, HWND(0), 0, 0).into() {\nDispatchMessageA(&amp;message);\n}\nOk(())\n}\n}\nextern \"system\" fn wndproc(window: HWND, message: u32, wparam: WPARAM, lparam: LPARAM) -&gt; LRESULT {\nunsafe {\nmatch message {\nWM_PAINT =&gt; {\nprintln!(\"WM_PAINT\");\nValidateRect(window, None);\nLRESULT(0)\n}\nWM_DESTROY =&gt; {\nprintln!(\"WM_DESTROY\");\nPostQuitMessage(0);\nLRESULT(0)\n}\n_ =&gt; DefWindowProcA(window, message, wparam, lparam),\n}\n}\n}\n</code></pre>","tags":["rust","dll","howto","windows","win32","windows-rs","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-window-with-rust/index.html#getting-the-code","title":"Getting the Code","text":"<p>The <code>windows-rs</code> repo is pretty large, so if you want to save time, you can <code>git clone</code> just the <code>create_window</code> folder from my repo here: peddamat/create_window</p> <p>Cloning it into our workspace folder:</p> <p></p><pre><code>$ git clone https://github.com/peddamat/create_window.git\n\n$ tree\n.\n\u251c\u2500\u2500 Cargo.lock\n\u251c\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 create_window\n\u251c\u2500\u2500 hello\n\u251c\u2500\u2500 hello_runner\n\u2514\u2500\u2500 target\n</code></pre> fyi, you can grab all the windows-rs samples: here","tags":["rust","dll","howto","windows","win32","windows-rs","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-window-with-rust/index.html#updating-your-workspace","title":"Updating Your Workspace","text":"<p>Add the crate to your workspace's <code>Cargo.toml</code>:</p> Cargo.toml<pre><code>[workspace]\nmembers = [\n\"hello\",\n\"hello_runner\",\n\"create_window\",\n]\n</code></pre>","tags":["rust","dll","howto","windows","win32","windows-rs","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-window-with-rust/index.html#running-the-code","title":"Running the Code","text":"<p>Now, do a <code>cargo run</code>:</p> <pre><code>$ cargo run\nerror: `cargo run` could not determine which binary to run. Use the `--bin` option to specify a binary, or the `default-run` manifest key.\navailable binaries: create_window, hello_runner\n</code></pre> <p>Ah, so <code>cargo run --bin create_window</code> it is!</p> <pre><code>$ cargo run --bin create_window\nwarning: C:\\Users\\me\\source\\blog_qa\\create_window\\Cargo.toml: dependency (windows-sys) specified without providing a local path, Git repository, or version to use. This will be considered an error in future versions\n    Updating crates.io index\n   Compiling windows-sys v0.45.0\n   Compiling create_window v0.0.0 (C:\\Users\\me\\source\\blog_qa\\create_window)\nFinished dev [unoptimized + debuginfo] target(s) in 4.91s\n     Running `target\\debug\\create_window.exe`\nWM_PAINT\n</code></pre> <p>And now we're cooking with windows!</p> <p></p>","tags":["rust","dll","howto","windows","win32","windows-rs","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-window-with-rust/index.html#further-reading_2","title":"Further Reading","text":"<ul> <li>Module 1. Your First Windows Program</li> <li>Raymond Chen: The scratch program</li> <li>winit - Cross-platform window creation and management in Rust</li> </ul>","tags":["rust","dll","howto","windows","win32","windows-rs","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-window-with-rust/index.html#window-messages","title":"Window Messages","text":"<p>As we learned earlier, Windows is message-based, meaning, all user input and requests are sent to the window using messages.</p> <p>\u201dThe system\u201d (Windows) internally defines 100\u2019s of messages, but we\u2019re usually only interested in a handful of them.   </p> <p>To get a better handle on which messages matter, let's see them with our own eyes using Window Detective.</p>","tags":["rust","dll","howto","windows","win32","windows-rs","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-window-with-rust/index.html#window-detective","title":"Window Detective","text":"<p>It looks like this:</p> <p></p> <p>Use the 'Pick window' tool to \"pick\" the <code>create_window</code> window, it should have a red outline:</p> <p></p> <p>Now right-click on the highlighted row and click \"View Properties\", which brings up the window's property inspector on the right:</p> <p></p> <p>Now right-click again and select \"Messages...\", and move your mouse over the <code>create_window</code> window.  You should see messages flooding in:</p> <p></p> <p>You can filter messages by clicking the filter icon:</p> <p></p> <p>Reduce the signal-to-noise ratio by selectively excluding messages:</p> <p></p> <p>Which will help reveal which events are received and emitted when manipulating a window:</p> <p></p> <p>Spend a few minutes (or hours) playing around.  See what messages are sent when dragging and/or maximizing a window.</p>","tags":["rust","dll","howto","windows","win32","windows-rs","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-window-with-rust/index.html#further-reading_3","title":"Further Reading","text":"<ul> <li>Window Messages (Get Started with Win32 and C++)</li> <li>System-Defined Messages</li> </ul>","tags":["rust","dll","howto","windows","win32","windows-rs","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-window-with-rust/index.html#window-procedure","title":"Window Procedure","text":"<p>Window Procedures states:</p> <p>Every window has an associated window procedure \u2014 a function that processes all messages sent or posted to all windows of the class. </p> <p>All aspects of a window's appearance and behavior depend on the window procedure's response to these messages.</p> <p>Seems pretty important, eh?  </p> <p>Yes, the window procedure is the beating heart of the window, where all system-generated messages are eventually delivered to and processed from. </p> <p>Let\u2019s take things for a spin by handling the WM_PAINT and WM_WINDOWPOSCHANGING messages in our window procedure.</p>","tags":["rust","dll","howto","windows","win32","windows-rs","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-window-with-rust/index.html#customizing-our-window","title":"Customizing Our Window","text":"","tags":["rust","dll","howto","windows","win32","windows-rs","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-window-with-rust/index.html#wm_paint","title":"WM_PAINT","text":"<p>The <code>WM_PAINT</code> message indicates that our window needs to be repainted.  By responding to it, we can modify what's drawn to the screen.</p> <p>Let\u2019s do so and add a bit of color to our window.</p> <p>First, replace the <code>use</code> section:</p> main.rs<pre><code>use windows::{\ncore::*, Win32::Foundation::*, Win32::Graphics::Gdi::ValidateRect,\nWin32::System::LibraryLoader::GetModuleHandleA,\nWin32::UI::WindowsAndMessaging::*,\n};\n</code></pre> <p>With:</p> main.rs<pre><code>use windows::{\ncore::*, Win32::Foundation::*, Win32::Graphics::Gdi::*,\nWin32::System::LibraryLoader::GetModuleHandleA, Win32::UI::WindowsAndMessaging::*,\n};\n</code></pre> <p>Then replace the <code>WM_PAINT</code> section in <code>wndproc</code> with:</p> <p></p>main.rs<pre><code>WM_PAINT =&gt; {\nprintln!(\"WM_PAINT\");\nlet mut msg =  String::from(\"ZOMG!\");\nlet mut ps = PAINTSTRUCT::default();\nlet psp = &amp;mut ps as *mut PAINTSTRUCT;\nlet rp = &amp;mut ps.rcPaint as *mut RECT;\nlet hdc = BeginPaint(window, psp);\nlet brush = CreateSolidBrush(COLORREF(0x0000F0F0));\nFillRect(hdc, &amp;ps.rcPaint, brush);\nDrawTextA(hdc, msg.as_bytes_mut(), rp, DT_SINGLELINE | DT_CENTER | DT_VCENTER );\nEndPaint(window, &amp;ps);\nLRESULT(0)\n}\n</code></pre> - source <p>A <code>cargo run --bin create_window</code> results in:</p> <p></p> <p>Sweet.</p>","tags":["rust","dll","howto","windows","win32","windows-rs","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-window-with-rust/index.html#wm_windowposchanging","title":"WM_WINDOWPOSCHANGING","text":"<p>Raymond Chen gives this example on <code>WM_WINDOWPOSCHANGING</code>, which we can implement by adding the following to <code>wnd_proc</code>:</p> hello\\src\\lib.rs<pre><code>WM_WINDOWPOSCHANGING =&gt; {\nlet data = lparam.0 as *mut WINDOWPOS;\nlet data = data.as_mut().unwrap();\ndata.flags |= SWP_NOSIZE | SWP_NOMOVE;\n}\n</code></pre>","tags":["rust","dll","howto","windows","win32","windows-rs","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-window-with-rust/index.html#window-subclassing","title":"Window Subclassing","text":"<p>We now have a basic understanding of how a window works, how its constructed, and how its window procedure affects its presentation and behavior.</p> <p>Yet, our knowledge is limited to changing the appearance of windows that we create or have the source code to.  To do the same for other people's windows (including our own), we need to use a technique called subclassing:</p> <p>Subclassing is a technique that allows an application to intercept and process messages sent or posted to a particular window before the window has a chance to process them. By subclassing a window, an application can augment, modify, or monitor the behavior of the window...</p> <p>Cool, cool.</p> <p>An application subclasses a window by replacing the address of the window's original window procedure with the address of a new window procedure, called the subclass procedure. Thereafter, the subclass procedure receives any messages sent or posted to the window.</p> <p>Ah, got it.</p> <p>...you cannot subclass a window or class that belongs to another application. All subclassing must be performed within the same process.</p> <p>BOOM!  (the crowd goes wild)  </p> <p>See, in Injecting The GD Thing we learned how to inject a DLL into another application's process space. </p> <p>So, in theory, if we could construct a DLL that automatically subclasses an application\u2019s main window.  </p> <p>We could then inject it into another application\u2019s process space.  </p> <p>Which, in theory, would allow us to subclass any window!  </p> <p>So, then, how do we subclass?!</p>","tags":["rust","dll","howto","windows","win32","windows-rs","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-window-with-rust/index.html#setwindowlong","title":"SetWindowLong","text":"<p>\"About Window Procedures\" directs us to SetWindowLong.</p> <p>SetWindowsLong informs us:</p> <p>Note</p> <p>This function has been superseded by the SetWindowLongPtr function. To write code that is compatible with both 32-bit and 64-bit versions of Windows, use the SetWindowLongPtr function.</p>","tags":["rust","dll","howto","windows","win32","windows-rs","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-window-with-rust/index.html#setwindowlongptr","title":"SetWindowLongPtr","text":"<p>SetWindowLongPtr says it: changes an attribute of the specified window. The function also sets a value at the specified offset in the extra window memory. </p> <p>You use the function like this:</p> SetWindowLongPtrW<pre><code>let prev_wndproc = SetWindowLongPtrW( hwnd,\nGWLP_WNDPROC,\nwnd_proc as isize\n)\n</code></pre> <p>where:</p> <ul> <li><code>hwnd</code>: a handle to the window we want to subclass</li> <li><code>GWLP_WNDPROC</code>: \"Sets a new address for the window procedure\"</li> <li><code>wnd_proc</code>: the replacement window procedure</li> <li><code>prev_wndproc</code>: a pointer to the previous \"window procedure\"</li> </ul>","tags":["rust","dll","howto","windows","win32","windows-rs","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-window-with-rust/index.html#replacement-window-procedure","title":"Replacement Window Procedure","text":"<p><code>wnd_proc</code> is simply a \"window procedure\" with one crucial difference: it calls <code>CallWindowProc</code> instead of <code>DefWindowProcW</code>.</p> <pre><code>extern \"system\" fn wnd_proc(\nwindow: HWND,\nmessage: u32,\nwparam: WPARAM,\nlparam: LPARAM,\n) -&gt; LRESULT {\nunsafe {\nmatch message {\n// WM_PAINT =&gt; { }\n_ =&gt; ()\n}\nCallWindowProcW(PREV_WNDPROC, window, message, wparam, lparam)\n}\n}\n</code></pre>","tags":["rust","dll","howto","windows","win32","windows-rs","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-window-with-rust/index.html#callwindowproca","title":"CallWindowProcA","text":"<p>CallWindowProc is used to pass messages to the previous window procedure, i.e. <code>prev_wndproc</code>, and remember, we must call <code>CallWindowProcW</code> on any messages we do not process.</p>","tags":["rust","dll","howto","windows","win32","windows-rs","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-window-with-rust/index.html#result","title":"Result","text":"<p>If the function succeeds, it returns a pointer to the previous window procedure.</p> <p>If the function fails, it returns 0.</p>","tags":["rust","dll","howto","windows","win32","windows-rs","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-window-with-rust/index.html#actually-subclassing-a-window","title":"Actually Subclassing A Window","text":"<p>Let's refactor our <code>create_window</code> example to use <code>SetWindowLongPtr</code>.</p> <p>First, let's add our skeleton <code>wnd_proc</code> to <code>main.rs</code>:</p> create_window\\src\\main.rs<pre><code>extern \"system\" fn wnd_proc(\nwindow: HWND,\nmessage: u32,\nwparam: WPARAM,\nlparam: LPARAM,\n) -&gt; LRESULT {\nunsafe {\nmatch message {\n// i.e. WM_PAINT =&gt; { }\n_ =&gt; ()\n}\nCallWindowProcW(PREV_WNDPROC, window, message, wparam, lparam)\n}\n}\n</code></pre> <p>We can immediately see a problem, we've gotta get <code>PREV_WNDPROC</code> into <code>wnd_proc</code>.  Since we're still learning, let's stick a gross global variable above our <code>main</code>:</p> <pre><code>static mut PREV_WNDPROC: WNDPROC = None;\n...\nfn main() -&gt; Result&lt;()&gt; {\n</code></pre> <p>Now, let's update our <code>fn main()</code> to grab the window <code>handle</code> returned by <code>CreateWindowExA</code> and pass it to a <code>SetWindowLongPtrA</code> call:</p> create_window\\main.rs<pre><code>let handle = CreateWindowExA(\n...\nNone,\n);\nlet result = SetWindowLongPtrW(handle, GWLP_WNDPROC, wnd_proc as isize);\nlet prev_wnd_proc = transmute::&lt;isize, WNDPROC&gt;(result);\nlet mut message = MSG::default();\n...\n</code></pre> <p>Finally, let's add this to the top of <code>main.rs</code>:</p> create_window\\main.rs<pre><code>use std::mem::transmute;\n</code></pre> <p>and a <code>cargo check</code> to confirm things compile:</p> <pre><code>$ cargo check\n    Finished dev [unoptimized + debuginfo] target(s) in 0.26s\n</code></pre> <p>Great, now let's tranplant our <code>WM_PAINT</code> into <code>wnd_proc</code>:</p> <pre><code>extern \"system\" fn wnd_proc(\nwindow: HWND,\nmessage: u32,\nwparam: WPARAM,\nlparam: LPARAM,\n) -&gt; LRESULT {\nunsafe {\nmatch message {\nWM_PAINT =&gt; {\nlet mut msg =  String::from(\"ZOMG!\");\nlet mut ps = PAINTSTRUCT::default();\nlet psp = &amp;mut ps as *mut PAINTSTRUCT;\nlet rectp = &amp;mut ps.rcPaint as *mut RECT;\nlet hdc = BeginPaint(window, psp);\nlet brush = CreateSolidBrush(COLORREF(0x0000F0F0));\nFillRect(hdc, &amp;ps.rcPaint, brush);\nDrawTextA(hdc,\nmsg.as_bytes_mut(),\nrectp,\nDT_SINGLELINE | DT_CENTER | DT_VCENTER\n);\nEndPaint(window, &amp;ps);\nreturn LRESULT(0);\n}\nWM_WINDOWPOSCHANGING =&gt; {\nlet data = lparam.0 as *mut WINDOWPOS;\nlet data = data.as_mut().unwrap();\ndata.flags |= SWP_NOSIZE | SWP_NOMOVE;\nreturn LRESULT(0);\n}\nWM_NCDESTROY =&gt; {\nlet result = transmute::&lt;WNDPROC, isize&gt;(PREV_WNDPROC);\nSetWindowLongPtrW(window, GWLP_WNDPROC, result);\nreturn DefWindowProcA(window, message, wparam, lparam);\n}\n_ =&gt; ()\n}\nCallWindowProcW(PREV_WNDPROC, window, msg, wparam, lparam)\n}\n}\n</code></pre> <p>Hitting <code>cargo run --bin create_window</code> yields:</p> <p></p> <p>Doneski!</p>","tags":["rust","dll","howto","windows","win32","windows-rs","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-window-with-rust/index.html#further-reading_4","title":"Further Reading","text":"<ul> <li>Fulgen301/LCTwitch </li> <li>chengyuhui/kdeconnect-rs</li> <li>thisKai/rust-acrylic-demo</li> </ul>","tags":["rust","dll","howto","windows","win32","windows-rs","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-window-with-rust/index.html#subclassing-via-dll","title":"Subclassing via DLL","text":"<p>Ok, this is where things start to come together.  Remember how we mentioned that our ultimate goal is to hijack the window of any application via DLL injection?</p> <p>Well, let's start by moving stuff from <code>create_window\\src\\main.rs</code> to <code>hello\\src\\lib.rs</code>.</p>","tags":["rust","dll","howto","windows","win32","windows-rs","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-window-with-rust/index.html#refactoring-create_window","title":"Refactoring create_window","text":"<p>First, add a dependency on the <code>hello</code> crate to <code>create_window's</code> Cargo.toml:</p> Cargo.toml<pre><code>[dependencies]\nhello = { path = \"../hello\" }\n</code></pre> <p>Replacing the <code>SetWindowLongPtr</code> call in <code>create_window\\src\\main.rs</code> with a <code>LoadLibraryA</code> call which loads <code>hello.dll</code>:</p> create_window\\src\\main.rs<pre><code>...\nLoadLibraryA(PCSTR(\"hello.dll\\0\".as_ptr()));\n//let result = SetWindowLongPtrW(handle, GWLP_WNDPROC, wnd_proc as isize);\n//PREV_WNDPROC = transmute::&lt;isize, WNDPROC&gt;(result);\n...\n</code></pre> <p>We can clean-up the <code>use</code> statements:</p> create_window\\src\\main.rs<pre><code>use windows::{\ncore::*,\nWin32::Foundation::*,\nWin32::Graphics::Gdi::*,\nWin32::System::LibraryLoader::{GetModuleHandleA, LoadLibraryA},\nWin32::UI::WindowsAndMessaging::*,\n};\n</code></pre>","tags":["rust","dll","howto","windows","win32","windows-rs","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-window-with-rust/index.html#refactoring-hellodll","title":"Refactoring hello.dll","text":"<p>First, let's put our <code>SetWindowLongPtr</code> call into <code>attach</code>:</p> hello\\src\\lib.rs<pre><code>...\nstatic mut PREV_WNDPROC: WNDPROC = None;\n...\nfn attach() {\nunsafe {\nlet result = SetWindowLongPtrW(handle, GWLP_WNDPROC, wnd_proc as isize);\nPREV_WNDPROC = transmute::&lt;isize, WNDPROC&gt;(result);\n};\n}\n</code></pre> <p>While we're on the topic, do we need a <code>detach</code>?  Of course! </p> <pre><code>fn detach() {\nunsafe {\nlet handle = find_window_by_pid(GetCurrentProcessId()).unwrap();\nSetWindowLongPtrW(handle, GWLP_WNDPROC, transmute::&lt;WNDPROC, isize&gt;(PREV_WNDPROC));\n};\n}\n</code></pre> <p>And update <code>DllMain</code>:</p> <pre><code>match call_reason {\nDLL_PROCESS_ATTACH =&gt; attach(),\nDLL_PROCESS_DETACH =&gt; detach(),\n_ =&gt; ()\n}\n</code></pre> <p>Now let's cut-and-paste <code>wnd_proc</code> and stick it under <code>detach</code>:</p> <pre><code>...\nextern \"system\" fn wnd_proc(\nwindow: HWND,\nmessage: u32,\nwparam: WPARAM,\nlparam: LPARAM,\n) -&gt; LRESULT {\nunsafe {\nmatch message {\nWM_PAINT =&gt; {\nlet mut msg =  String::from(\"ZOMG!\");\nlet mut ps = PAINTSTRUCT::default();\nlet psp = &amp;mut ps as *mut PAINTSTRUCT;\nlet rectp = &amp;mut ps.rcPaint as *mut RECT;\nlet hdc = BeginPaint(window, psp);\nlet brush = CreateSolidBrush(COLORREF(0x0000F0F0));\nFillRect(hdc, &amp;ps.rcPaint, brush);\nDrawTextA(hdc,\nmsg.as_bytes_mut(),\nrectp,\nDT_SINGLELINE | DT_CENTER | DT_VCENTER\n);\nEndPaint(window, &amp;ps);\nreturn LRESULT(0);\n}\nWM_WINDOWPOSCHANGING =&gt; {\nlet data = lparam.0 as *mut WINDOWPOS;\nlet data = data.as_mut().unwrap();\ndata.flags |= SWP_NOSIZE | SWP_NOMOVE;\nreturn LRESULT(0);\n}\nWM_NCDESTROY =&gt; {\nlet result = transmute::&lt;WNDPROC, isize&gt;(PREV_WNDPROC);\nSetWindowLongPtrW(window, GWLP_WNDPROC, result);\nreturn DefWindowProcA(window, message, wparam, lparam);\n}\n_ =&gt; ()\n}\nCallWindowProcW(PREV_WNDPROC, window, message, wparam, lparam)\n}\n}\n</code></pre> <p>Things are looking good, except we have one major problem,  <code>SetWindowLongPtr</code> needs a handle to a window to subclass, specifically, for <code>hello.dll</code>, that would be a handle to the main GUI window of the application it's been injected into.</p> <p>However, <code>LoadLibrary</code> doesn't provide a means of passing arguments, so we can't pass it from <code>create_window</code>...  it seems that <code>hello.dll</code> is going to have to dig up the window handle all by itself.</p> <p>Now, this is a challenging problem, so we're going to use something ready baked, however, I'll dissect the code in a follow-up article.</p> <p>Ok, paste the following after <code>wnd_proc</code>:</p> hello\\src\\lib.rs<pre><code>pub fn find_window_by_pid(pid: u32) -&gt; Result&lt;HWND&gt; {\nlet mut data = EnumWindowsData {\nwanted_pid: pid,\nhandle: HWND::default(),\nfound: false,\n};\nunsafe {\nEnumWindows(\nSome(enum_windows_callback),\nLPARAM(&amp;mut data as *mut EnumWindowsData as isize)\n);\n};\nif !data.found {\nreturn Err(Error::new( ErrorKind::NotFound, \"Can't find the window!\"));\n}\nOk(data.handle)\n}\n#[derive(Default)]\nstruct EnumWindowsData {\nwanted_pid: u32,\nhandle: HWND,\nfound: bool,\n}\nunsafe extern \"system\" fn enum_windows_callback(handle: HWND, lparam: LPARAM) -&gt; BOOL {\nlet data = lparam.0 as *mut EnumWindowsData;\nlet mut data = data.as_mut().unwrap();\nlet mut pid = MaybeUninit::&lt;u32&gt;::zeroed();\nGetWindowThreadProcessId(handle, Some(pid.as_mut_ptr()));\nlet pid = pid.assume_init();\nif pid == data.wanted_pid\n&amp;&amp; GetWindow(handle, GW_OWNER).0 == 0\n&amp;&amp; IsWindowVisible(handle).as_bool()\n{\ndata.handle = handle;\ndata.found = true;\nreturn BOOL(0);\n}\nBOOL(1)\n}\n</code></pre> <p>Now, finish up by using <code>find_window_by_pid</code> to satisfy <code>SetWindowLongPtr</code> in <code>attach</code> and <code>detach</code>.</p> <p>After cleaning up our <code>use</code> statements, things should look like:</p> main.rs<pre><code>use windows::{ Win32::Foundation::*, Win32::System::SystemServices::*, };\nuse windows::Win32::System::Threading::GetCurrentProcessId;\nuse windows::{\nWin32::Graphics::Gdi::*,\nWin32::UI::WindowsAndMessaging::*,\n};\nuse std::mem::{transmute, MaybeUninit};\nuse std::io::{Result, Error, ErrorKind};\nstatic mut PREV_WNDPROC: WNDPROC = None;\n#[no_mangle]\n#[allow(non_snake_case, unused_variables)]\nextern \"system\" fn DllMain(\ndll_module: HINSTANCE,\ncall_reason: u32,\n_: *mut ())\n-&gt; bool\n{\nmatch call_reason {\nDLL_PROCESS_ATTACH =&gt; attach(),\nDLL_PROCESS_DETACH =&gt; detach(),\n_ =&gt; ()\n}\ntrue\n}\nfn attach() {\nunsafe {\nlet handle = find_window_by_pid(GetCurrentProcessId()).unwrap();\nlet result = SetWindowLongPtrW(handle, GWLP_WNDPROC, wnd_proc as isize);\nPREV_WNDPROC = transmute::&lt;isize, WNDPROC&gt;(result);\n};\n}\nfn detach() {\nunsafe {\nlet handle = find_window_by_pid(GetCurrentProcessId()).unwrap();\nSetWindowLongPtrW(handle, GWLP_WNDPROC, transmute::&lt;WNDPROC, isize&gt;(PREV_WNDPROC));\n};\n}\nextern \"system\" fn wnd_proc(\nwindow: HWND,\nmsg: u32,\nwparam: WPARAM,\nlparam: LPARAM,\n) -&gt; LRESULT {\nunsafe {\nmatch msg {\nWM_PAINT =&gt; {\nlet mut msg =  String::from(\"ZOMG!\");\nlet mut ps = PAINTSTRUCT::default();\nlet psp = &amp;mut ps as *mut PAINTSTRUCT;\nlet rectp = &amp;mut ps.rcPaint as *mut RECT;\nlet hdc = BeginPaint(window, psp);\nlet brush = CreateSolidBrush(COLORREF(0x0000F0F0));\nFillRect(hdc, &amp;ps.rcPaint, brush);\nDrawTextA(hdc,\nmsg.as_bytes_mut(),\nrectp,\nDT_SINGLELINE | DT_CENTER | DT_VCENTER\n);\nEndPaint(window, &amp;ps);\nreturn LRESULT(1);\n}\nWM_WINDOWPOSCHANGING =&gt; {\nlet data = lparam.0 as *mut WINDOWPOS;\nlet data = data.as_mut().unwrap();\ndata.flags |= SWP_NOSIZE | SWP_NOMOVE;\nreturn LRESULT(0);\n}\nWM_NCDESTROY =&gt; {\nlet result = transmute::&lt;WNDPROC, isize&gt;(PREV_WNDPROC);\nSetWindowLongPtrW(window, GWLP_WNDPROC, result);\nreturn DefWindowProcA(window, message, wparam, lparam);\n}\n_ =&gt; ()\n}\nCallWindowProcW(PREV_WNDPROC, window, msg, wparam, lparam)\n}\n}\npub fn find_window_by_pid(pid: u32) -&gt; Result&lt;HWND&gt; {\nlet mut data = EnumWindowsData {\nwanted_pid: pid,\nhandle: HWND::default(),\nfound: false,\n};\nunsafe {\nEnumWindows(\nSome(enum_windows_callback),\nLPARAM(&amp;mut data as *mut EnumWindowsData as isize)\n);\n};\nif !data.found {\nreturn Err(Error::new( ErrorKind::NotFound, \"Can't find the window!\"));\n}\nOk(data.handle)\n}\n#[derive(Default)]\nstruct EnumWindowsData {\nwanted_pid: u32,\nhandle: HWND,\nfound: bool,\n}\nunsafe extern \"system\" fn enum_windows_callback(handle: HWND, lparam: LPARAM) -&gt; BOOL {\nlet data = lparam.0 as *mut EnumWindowsData;\nlet mut data = data.as_mut().unwrap();\nlet mut pid = MaybeUninit::&lt;u32&gt;::zeroed();\nGetWindowThreadProcessId(handle, Some(pid.as_mut_ptr()));\nlet pid = pid.assume_init();\nif pid == data.wanted_pid\n&amp;&amp; GetWindow(handle, GW_OWNER).0 == 0\n&amp;&amp; IsWindowVisible(handle).as_bool()\n{\ndata.handle = handle;\ndata.found = true;\nreturn BOOL(0);\n}\nBOOL(1)\n}\n</code></pre> <p>Hitting <code>cargo run</code> in the <code>Create Window</code> crate results in:</p> <p></p> <p>Amazing!</p> <p>Our little <code>hello.dll</code> now automatically overrides the window procedure of any application it's loaded into!</p>","tags":["rust","dll","howto","windows","win32","windows-rs","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-window-with-rust/index.html#a-taste-of-dll-injection","title":"A Taste Of DLL Injection","text":"","tags":["rust","dll","howto","windows","win32","windows-rs","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-window-with-rust/index.html#injecting-into-create_windowexe","title":"Injecting into <code>create_window.exe</code>","text":"<p>Let's double-confirm this by: </p> <ul> <li>comment out <code>LoadLibrary</code> in <code>create_window</code></li> <li>do a <code>cargo run --bin create_window</code> </li> <li>inject  <code>hello.dll</code> into <code>create_window.exe</code> using Process Hacker  </li> </ul> <p>Pretty cool, eh? </p> <p>Note: For the subclass to be called, you have to trigger a 'WM_PAINT' message, which can be done by resizing the <code>create_window.exe</code> window.</p>","tags":["rust","dll","howto","windows","win32","windows-rs","programming"]},{"location":"guides/window-hacking-with-rust/creating-a-window-with-rust/index.html#injecting-into-notepadexe","title":"Injecting into <code>notepad.exe</code>","text":"<p>Try injecting <code>hello.dll</code> into <code>notepad.exe</code>.</p> <p>Part 3 is here: Injecting DLLs With Rust</p> <p>Having trouble? The code this series can be found here: peddamat/how-to-create-a-dll-using-rust </p> <code>#rust</code> <code>#dll</code> <code>#howto</code> <code>#windows</code> <code>#win32</code> <code>#windows-rs</code> <code>#programming</code>","tags":["rust","dll","howto","windows","win32","windows-rs","programming"]},{"location":"guides/window-hacking-with-rust/injecting-dlls-with-rust/index.html","title":"Injecting DLLs With Rust","text":"","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/injecting-dlls-with-rust/index.html#injecting-dlls-with-rust","title":"Injecting DLLs With Rust","text":"<p>All right, dear reader.  If you've followed along from Part 1 and Part 2, then you know how to:</p> <ul> <li> Create a Windows dynamic-link library (DLL) using Rust</li> <li> Inject DLLs into processes using Process Hacker</li> <li> Inject DLLs into processes using Rust</li> <li> Create application windows using Rust</li> <li> Override a window's behavior using subclassing</li> </ul> <p>In this chapter, we'll tie everything together by injecting <code>hello.dll</code> into a random process using Rust.</p>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/injecting-dlls-with-rust/index.html#dll-injection","title":"DLL Injection","text":"<p>Googling the term \"dll injection\" results in page after page of bad news; the term is primarily associated with malicious actors.  </p> <p>Wikipedia, however, presents a more neutral description which perfectly encapsulates the spirit in which we'll be approaching the topic:</p> <p>In computer programming, DLL injection is a technique used for running code within the address space of another process by forcing it to load a dynamic-link library.[1] DLL injection is often used by external programs to influence the behavior of another program in a way its authors did not anticipate or intend. - source</p>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/injecting-dlls-with-rust/index.html#injection-techniques","title":"Injection Techniques","text":"<p>Process Injection Techniques presents a good overview of the overall DLL injection landscape. </p> <p>3 Effective DLL Injection Techniques for Setting API Hooksprovides implementation details for the two technique's that we'll explore together:</p> <ul> <li>SetWindowsHookEx</li> <li>CreateRemoteThread</li> </ul>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/injecting-dlls-with-rust/index.html#setwindowshookex","title":"SetWindowsHookEx","text":"<p>SetWindowsHookEx is a well documented part of the Windows Win32 API, which does what it says...</p> <p>Enables the installation of \"hooks\", aka callback functions, at various points in an application, allowing you to intercept or passively sniff system events received by the hooked application.</p> <p>but wait, there's more!</p> <p>SetWindowsHookEx can be used to inject a DLL into another process... - source...</p> <p>So, if you place your callback function in a DLL, the operating system conveniently loads said DLL into the application's address space.</p> <p>Excellent.</p>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/injecting-dlls-with-rust/index.html#createremotethread","title":"CreateRemoteThread","text":"<p>CreateRemoteThread is a less well documented part of the Windows Win32 API, summarized:</p> <p>Creates a thread that runs in the virtual address space of another process.</p> <p>Once a \"remote thread\" is running in the application's address space, a mere <code>LoadLibrary()</code> call is all that's required to complete the DLL injection.</p>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/injecting-dlls-with-rust/index.html#further-reading","title":"Further Reading","text":"<ul> <li>Of what possible legitimate use are functions like CreateRemoteThread, WriteProcessMemory, and VirtualProtectEx?</li> </ul>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/injecting-dlls-with-rust/index.html#dll-syringe","title":"dll-syringe","text":"<p>The <code>dll-syringe</code> crate provides a convenient wrapper around <code>CreateRemoteThread</code> enabling us to inject DLLs programmatically, using Rust:</p> dll-syringe Example<pre><code>use dll_syringe::{Syringe, process::OwnedProcess};\n// find target process by name\nlet target_process = OwnedProcess::find_first_by_name(\"ExampleProcess\").unwrap();\n// create a new syringe for the target process\nlet syringe = Syringe::for_process(target_process);\n// inject the payload into the target process\nlet injected_payload = syringe.inject(\"injection_payload.dll\").unwrap();\n// do something else\n// eject the payload from the target (optional)\nsyringe.eject(injected_payload).unwrap();\n</code></pre>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/injecting-dlls-with-rust/index.html#further-reading_1","title":"Further Reading","text":"<ul> <li>OpenBtyeDev/dll-syringe</li> </ul>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/injecting-dlls-with-rust/index.html#hello_injectexe","title":"hello_inject.exe","text":"<p>Let's create a <code>hello_inject</code> crate to take <code>dll-syringe</code> for a whirl:</p> <pre><code>cargo new hello_inject\n</code></pre> <p>After updating the workspace <code>Cargo.toml</code>...</p> Cargo.toml<pre><code>[workspace]\nmembers = [\n\"hello\",\n\"hello_runner\",\n\"create_window\",\n\"hello_inject\"\n]\n</code></pre> <p>And, adding the dependencies to <code>hello.dll</code> and <code>dll-syringe</code> to <code>Cargo.toml</code>:</p> Cargo.toml<pre><code>[dependencies]\nhello = { path = \"../hello\" }\ndll-syringe = \"0.15.0\"\n</code></pre> <p>Do a <code>cargo check</code>:</p> <pre><code>$ cargo check\n   Compiling proc-macro2 v1.0.51\n    ...\n    Checking dll-syringe v0.15.0\nerror[E0554]: `#![feature]` may not be used on the stable release channel\n--&gt; C:\\Users\\me\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dll-syringe-0.15.0\\src\\lib.rs:2:1\n  |\n2 | #![feature(maybe_uninit_uninit_array, maybe_uninit_slice, linked_list_cursors)]\n| ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n...\n</code></pre> <p>This error indicates that <code>dll-syringe</code> uses features that haven't yet made it into the stable version of Rust.  </p> <p>To fix this, we need to install the bleeding edge version of rust, Rust Nightly.</p>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/injecting-dlls-with-rust/index.html#rust-nightly","title":"Rust Nightly","text":"<p>Rustup installs Rust Nightly in parallel with your existing Rust installation.  </p> <pre><code>rustup install nightly\n</code></pre> <p>To tell cargo to use Rust Nightly, we have to add the <code>+nightly</code> flag to our commands.  For example, <code>cargo check</code> becomes <code>cargo +nightly check</code>:</p> <pre><code>$ cargo +nightly check\n    ...\n    Checking dll-syringe v0.15.0\n    Checking hello_inject v0.1.0 (C:\\...\\hello_inject)\nFinished dev [unoptimized + debuginfo] target(s) in 22.37s\n</code></pre> <p>Of course, this gets annoying fast, so let's set Rust Nightly as default for the rest of this tutorial by using <code>rustup default nightly</code>.</p> <p>This can be reverted using <code>rustup default stable</code>.</p> <pre><code># Set Rust Nightly as default\nrustup default nightly\n\n# Update Rust Nightly to today's release\nrustup update\n\n# Set Rust Stable as default\nrustup default stable\n</code></pre>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/injecting-dlls-with-rust/index.html#hello_injectexe-cont","title":"hello_inject.exe (cont.)","text":"<p>Ok, using Rust Nightly do a  <code>cargo build</code>, which may throw a few ignorable warnings.</p> <p>Now update <code>main.rs</code> with the following (taken straight from <code>dll-syringe's</code> README.MD):</p> main.rs<pre><code>use dll_syringe::{Syringe, process::OwnedProcess};\nuse std::{thread, time};\nfn main() {\n// find target process by name\nlet target_process =\nOwnedProcess::find_first_by_name(\"create_window.exe\").unwrap();\n// create a new syringe for the target process\nlet syringe = Syringe::for_process(target_process);\n// inject the payload into the target process\nlet injected_payload = syringe.inject(\"target\\\\debug\\\\hello.dll\").unwrap();\nprintln!(\"DLL injected successfully!\");\n// do something else\nlet ten_millis = time::Duration::from_secs(10);\nprintln!(\"Sleeping for 10 secs...\");\nthread::sleep(ten_millis);\n// eject the payload from the target (optional)\nsyringe.eject(injected_payload).unwrap();\n}\n</code></pre> <p>Fire up <code>create_window</code> with a:</p> <pre><code>cargo run --bin create_window\n</code></pre> <p>Open up another terminal and type:</p> <pre><code>$ cargo run --bin hello_inject\n   ...\n   Compiling dll-syringe v0.15.0\n   Compiling hello_inject v0.1.0 (C:\\...\\hello_inject)\nFinished dev [unoptimized + debuginfo] target(s) in 35.35s\n     Running `target\\debug\\hello_inject.exe`\nDLL injected successfully!\nSleeping for 30 secs...\n</code></pre> <p>It works!</p>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/injecting-dlls-with-rust/index.html#identifying-targets","title":"Identifying Targets","text":"<p>We are currently using <code>find_first_by_name()</code> to identify our injection target process.</p> <p>This works great for simple apps, like Notepad, but what if we want to target Chrome, famous for spawning each tab in a separate process:</p> <p></p> <p>Luckily, <code>OwnedProcess::</code> also provides the <code>from_pid()</code> method, so if we can figure out a window's process identifier (pid), we can target it.</p>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/injecting-dlls-with-rust/index.html#by-window-handle","title":"By Window Handle","text":"<p>It would be useful if we could specify targets by their window handle, since this is something we can easily identify using Window Detective:</p> <p></p> <p>If you recall, we used <code>GetWindowThreadProcessId()</code> in <code>hello.dll</code>, as part of the <code>enum_window_callback()</code>.</p> <p>Using that code as a reference, we can write a <code>find_pid_by_hwnd()</code>:</p> <pre><code>fn find_pid_by_hwnd(hwnd: u32) -&gt; u32 {\nlet mut pid = MaybeUninit::&lt;u32&gt;::zeroed();\nunsafe {\nGetWindowThreadProcessId(HWND(hwnd as isize), Some(pid.as_mut_ptr()));\nreturn pid.assume_init();\n};\n}\n</code></pre> <p>And use it like:</p> <pre><code>// find target process window handle\nlet pid = find_pid_by_hwnd(HWND(0x00401B32));\nlet target_process = OwnedProcess::from_pid(pid).unwrap();\n</code></pre>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/injecting-dlls-with-rust/index.html#by-window-title","title":"By Window Title","text":"<p>Many of the windows we want to target have window titles, for example, \"Untitled - Notepad\":</p> <p></p> <p>Leveraging <code>find_pid_by_hwnd()</code> and FindWindowA we can write <code>find_pid_by_title()</code>:</p> <pre><code>pub fn find_pid_by_title(title: PCSTR) -&gt; u32 {\nlet hwnd = unsafe {\nFindWindowA(None, title)\n};\nreturn find_pid_by_hwnd(hwnd);\n}\n</code></pre> <p>And use it like:</p> <pre><code>// find target process by window title\nlet pid = find_pid_by_title(s!(\"New Tab - Google Chrome\"));\nlet target_process = OwnedProcess::from_pid(pid).unwrap();\n</code></pre>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/injecting-dlls-with-rust/index.html#handling-bitness","title":"Handling Bitness","text":"<p>The majority of us are running 64-bit Windows on 64-bit processors, however, we still use a surprising number of 32-bit applications.</p> <p>Process Interoperability explains why this matters to us:</p> <p>On 64-bit Windows, a 64-bit process cannot load a 32-bit dynamic-link library (DLL). Additionally, a 32-bit process cannot load a 64-bit DLL. </p> <p>Which means that:</p> <ul> <li>we need to build both 32-bit and 64-bit versions of <code>hello.dll</code></li> <li>we need to detect whether a process is 32-bit or 64-bit and inject the appropriate build of <code>hello.dll</code></li> </ul>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/injecting-dlls-with-rust/index.html#build-targets","title":"Build Targets","text":"<p>Rust makes it easy to generate multiple build targets for a crate or an entire workspace.</p> <p>First, you have to add the 32-bit toolchain:</p> <pre><code># Install 32-bit toolchain &amp; target\nrustup target add i686-pc-windows-msvc\n</code></pre> <p>Then, you specify which target to build using:</p> <pre><code># Build 32-bit binaries\ncargo build --target=i686-pc-windows-msvc\n\n# Build 64-bit binaries\ncargo build --target=x86_64-pc-windows-msvc\n</code></pre> <p>Nice, but cumbersome.  </p> <p>Since we only want multiple builds of <code>hello.dll</code>, we can add a <code>[build]</code> target to its <code>Cargo.toml</code> to specify that:</p> Cargo.toml<pre><code>[build]\ntarget = [\"i686-pc-windows-msvc\", \"x86_64-pc-windows-msvc\"]\n</code></pre> <p>Now when we hit <code>cargo build</code>, we get two new folders in our <code>target</code> directory:</p> <pre><code> $ tree -L 2 -a|more\n.\n\u251c\u2500\u2500 debug\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 create_window.exe\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 hello.dll\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 hello_inject.exe\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 hello_runner.exe\n|  ...\n\u251c\u2500\u2500 i686-pc-windows-msvc\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 debug\n\u2514\u2500\u2500 x86_64-pc-windows-msvc\n    \u2514\u2500\u2500 debug\n</code></pre> <p>The first containing 32-bit binaries and the latter containing 64-bit binaries.</p>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/injecting-dlls-with-rust/index.html#detecting-process-bitness","title":"Detecting Process Bitness","text":"<p>This one is easy, <code>dll-syringe</code> provides the <code>OwnedProcess::is_x64()</code> and <code>OwnedProcess::is_x86()</code> methods which let us identify which is which.</p> <p>Picking <code>is_x64()</code>, we can write:</p> <pre><code>let dll_path = {\nif OwnedProcess::is_x64(&amp;target_process).unwrap() {\n\"target\\\\x86_64-pc-windows-msvc\\\\debug\\\\hello.dll\"\n} else {\n\"target\\\\i686-pc-windows-msvc\\\\debug\\\\hello.dll\"\n}\n};\n...\nlet injected_payload = syringe.inject(dll_path).expect(\"Architecture mismatch!\");\n</code></pre>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/injecting-dlls-with-rust/index.html#implementing-interopablity","title":"Implementing Interopablity","text":"<p>Now, if you'd done a <code>cargo build</code>, a few moments earlier, you'd have been greeted with a bunch of \"mismatched types\" errors, like:</p> <pre><code>$ cargo build\n   Compiling hello v0.1.0 (C:\\Users\\me\\source\\blog_qa\\hello)\nerror[E0308]: mismatched types\n--&gt; hello\\src\\lib.rs:38:70\n|\n| let result = SetWindowLongPtrW(handle, GWLP_WNDPROC, wnd_proc as isize);\n|              -----------------                       ^^^^^^^^^^^^^^^^^ |                                        expected `i32`, found `isize`\n|              |\n|              arguments to this function are incorrect\n...\n</code></pre> <p>And:</p> <pre><code>error[E0308]: mismatched types\n--&gt; hello\\src\\lib.rs:39:60\n|\n| PREV_WNDPROC = transmute::&lt;isize, WNDPROC&gt;(result);\n|                --------------------------- ^^^^^^ expected `isize`, found `i32`\n|                |\n|                arguments to this function are incorrect\n...\n</code></pre> <p>With the <code>rustc</code> providing advice like:</p> <pre><code>help: you can convert an `i32` to an `isize` and panic if the ... value doesn't fit\n|\n| PREV_WNDPROC = transmute::&lt;isize, WNDPROC&gt;(result.try_into().unwrap());\n|                                                  ++++++++++++++++++++\n</code></pre> <p>Why is this happening?</p>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/injecting-dlls-with-rust/index.html#the-problem","title":"The Problem","text":"<p>Well, throughout this series, we've been writing fairly idiomatic Rust, trying to make sure we dot our t's and cross our i's.</p> <p>For example, when writing:</p> <pre><code>let result = SetWindowLongPtrW(handle, GWLP_WNDPROC, wnd_proc);\n</code></pre> <p><code>rust-analyzer</code> screamed:</p> <pre><code>error[E0308]: mismatched types\n--&gt; hello\\src\\lib.rs:38:70\n|\n| let result = SetWindowLongPtrW(hwnd, GWLP_WNDPROC, wnd_proc);\n|              -----------------                     ^^^^^^^^ |              |                                     expected `isize`, found fn item\n|              |\n|              arguments to this function are incorrect\n...\n</code></pre> <p>Cajoling us into explicitly casting <code>wnd_proc as isize</code>, as directed.  </p> <p>However, <code>rust-analyzer</code> generates suggestions based on the currently configured toolchain, which in my case (and probably yours) is 64-bit.</p> <p>Under the hood, <code>windows-rs</code> is doing this:</p> \\src\\Windows\\Win32\\UI\\WindowsAndMessaging\\mod.rs<pre><code>#[cfg(target_pointer_width = \"32\")]\n#[cfg(feature = \"Win32_Foundation\")]\npub use SetWindowLongW as SetWindowLongPtrW;\n</code></pre> <p>The <code>#cfg[...]</code> stuff is called Conditional compilation, the Rust version of <code>#ifdef</code>...</p> <p>... which means that <code>SetWindowLongPtrW</code> is swapped out for <code>SetWindowLongW</code> when compiling for a 32-bit target.</p> <p>But since you've read the documentation, you already saw this:</p> <p>Note</p> <p>Note  To write code that is compatible with both 32-bit and 64-bit versions of Windows, use SetWindowLongPtr. When compiling for 32-bit Windows, SetWindowLongPtr is defined as a call to the SetWindowLong function.</p> \\src\\Windows\\Win32\\UI\\WindowsAndMessaging\\mod.rs<pre><code>#[doc = \"*Required features: ...\"]\n#[cfg(any(target_arch = \"aarch64\", target_arch = \"x86_64\"))]\n#[cfg(feature = \"Win32_Foundation\")]\n#[inline]\npub unsafe fn SetWindowLongPtrW&lt;P0&gt;(hwnd: P0, nindex: ..., dwnewlong: isize) -&gt; isize\nwhere\nP0: ::std::convert::Into&lt;super::super::Foundation::HWND&gt;,\n{\n::windows::core::link ! ( \"user32.dll\"\"system\" fn SetWindowLongPtrW ( hwnd : super::super::Foundation:: HWND , nindex : WINDOW_LONG_PTR_INDEX , dwnewlong : isize \n) -&gt; isize \n);\nSetWindowLongPtrW(hwnd.into(), nindex, dwnewlong)\n}\n#[doc = *Required features: ...\"]\n#[cfg(feature = \"Win32_Foundation\")]\n#[inline]\npub unsafe fn SetWindowLongW&lt;P0&gt;(hwnd: P0, nindex: ..., dwnewlong: i32) -&gt; i32\nwhere\n    P0: ::std::convert::Into&lt;super::super::Foundation::HWND&gt;,\n{\n    ::windows::core::link ! ( \"user32.dll\"\"system\" fn SetWindowLongW ( \n        hwnd : super::super::Foundation:: HWND , \n        nindex : WINDOW_LONG_PTR_INDEX , \n        dwnewlong : i32 \n        ) -&gt; i32 \n    );\n    SetWindowLongW(hwnd.into(), nindex, dwnewlong)\n}\n</code></pre> <p>Since <code>SetWindowLongPtrW</code> uses <code>isize</code> and <code>SetWindowLongW</code> uses <code>i32</code>, we get the <code>type mismatch</code> errors above.</p>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/injecting-dlls-with-rust/index.html#solutions","title":"Solution(s)","text":"<p>There are two ways to fix our issue:</p>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/injecting-dlls-with-rust/index.html#custom-type","title":"Custom Type","text":"<p>We can define a custom type using a <code>#[cfg(any(target_arch = \"aarch64\", target_arch = \"x86_64\"))]</code> macro to toggle it between <code>isize</code> and <code>i32</code>, like this:</p> <p></p><pre><code>// Work around a difference between the SetWindowLongPtrW API definition\n// in windows-rs on 32-bit and 64-bit Windows.\n#[cfg(any(target_arch = \"x86_64\", target_arch = \"aarch64\"))]\ntype LongPtr = isize;\n#[cfg(not(any(target_arch = \"x86_64\", target_arch = \"aarch64\")))]\ntype LongPtr = i32;\n</code></pre> - source <p>Replacing all <code>isize</code> references with <code>LongPtr</code>, or whatever you name your custom type, for example:</p> <pre><code>let result = SetWindowLongPtrW(handle, GWLP_WNDPROC, wnd_proc as LongPtr);\n</code></pre>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/injecting-dlls-with-rust/index.html#type-inference","title":"Type Inference","text":"<p>Alternatively, we can use Rust's powerful type inference abilities, which allows <code>rustc</code> to infer the destination type based on contextual clues:</p> <pre><code>let result = SetWindowLongPtrW(handle, GWLP_WNDPROC, wnd_proc as _);\n</code></pre> <p>Here, the <code>as _</code> indicates our type inference request, which <code>rustc</code> can easily do by referencing its signature from <code>...\\WindowsAndMessaging\\mod.rs</code>.</p> <p>Here's another example where inference works:</p> <pre><code>PREV_WNDPROC = transmute::&lt;_, WNDPROC&gt;(result);\n...\n</code></pre>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/injecting-dlls-with-rust/index.html#bring-it-home","title":"Bring It Home","text":"<p>Go ahead and use type inference to fix each compile error and make sure workspace compiles with both a  <code>cargo build --target=i686-pc-windows-msvc</code> and  a <code>cargo build --target=x86_64-pc-windows-msvc</code>.</p>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/injecting-dlls-with-rust/index.html#further-reading_2","title":"Further Reading","text":"<ul> <li>Running 32-bit Applications explains how Windows does this using something called WOW64.</li> </ul>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/injecting-dlls-with-rust/index.html#the-moment-of-truth","title":"The Moment Of Truth","text":"<p>We are finally ready to see if our project works with both 32-bit and 64-bit applications.</p>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/injecting-dlls-with-rust/index.html#testing-32-bit-applications","title":"Testing 32-bit Applications","text":"<p>If you have a 32-bit application in mind, go ahead and use it.  </p> <p>If you need a recommendation, Tera Term is a hand 32-bit application, you can grab a copy here.</p> <p>It looks like:</p> <p></p> <p>It's a single process application, so you can use <code>find_first_by_name()</code> to grab it in <code>hello_inject</code>: </p> <p></p> <p>Here's what my <code>main.rs</code> looks like:</p> hello\\src\\main.rs<pre><code>use dll_syringe::{Syringe, process::*};\nuse windows::{Win32::{UI::WindowsAndMessaging::{GetWindowThreadProcessId, FindWindowA}, Foundation::HWND}, core::PCSTR, s};\nuse std::{thread, time, borrow::BorrowMut, mem::MaybeUninit};\nfn main() {\n// find target process by .exe\nlet target_process =\nOwnedProcess::find_first_by_name(\"ttermpro.exe\").expect(\"Couldn't find process, exiting!\");\nlet dll_path = {\nif OwnedProcess::is_x64(&amp;target_process).unwrap() {\n\"target\\\\x86_64-pc-windows-msvc\\\\debug\\\\hello.dll\"\n} else {\n\"target\\\\i686-pc-windows-msvc\\\\debug\\\\hello.dll\"\n}\n};\n// create a new syringe for the target process\nlet syringe = Syringe::for_process(target_process);\nlet injected_payload = syringe.inject(dll_path).expect(\"Architecture mismatch!\");\nprintln!(\"DLL injected successfully!\");\n// do something else\nlet ten_millis = time::Duration::from_secs(30);\nprintln!(\"Sleeping for 30 secs...\");\nthread::sleep(ten_millis);\n// eject the payload from the target (optional)\nsyringe.eject(injected_payload).unwrap();\n}\nfn find_pid_by_hwnd(hwnd: HWND) -&gt; u32 {\nlet mut pid = MaybeUninit::&lt;u32&gt;::zeroed();\nunsafe {\nGetWindowThreadProcessId(hwnd, Some(pid.as_mut_ptr()));\nreturn pid.assume_init();\n};\n}\npub fn find_pid_by_title(title: PCSTR) -&gt; u32 {\nlet hwnd = unsafe {\nFindWindowA(None, title)\n};\nreturn find_pid_by_hwnd(hwnd);\n}\n</code></pre> <p>Doing a <code>cargo run --bin hello_inject</code> should result in:</p> <pre><code>$ cargo run --bin hello_inject\n    Finished dev [unoptimized + debuginfo] target(s) in 0.47s\n     Running `target\\x86_64-pc-windows-msvc\\debug\\hello_inject.exe`\nDLL injected successfully!\nSleeping for 30 secs...\n</code></pre> <p>Part 4 is here: Production Ready DLL Injection.</p> <p>Having trouble? The code this series can be found here: peddamat/how-to-create-a-dll-using-rust </p> <code>#rust</code> <code>#dll</code> <code>#howto</code> <code>#windows</code> <code>#programming</code>","tags":["rust","dll","howto","windows","programming"]},{"location":"guides/window-hacking-with-rust/production-ready-dll-injection/index.html","title":"Production Ready DLL Injection","text":"","tags":["rust","dll","howto","windows","programming","wip"]},{"location":"guides/window-hacking-with-rust/production-ready-dll-injection/index.html#production-ready-dll-injection","title":"Production Ready DLL Injection","text":"<p>Dear reader, if you haven't, already, please catch up on Part 1, Part 2, and [Part 3]] and come back here.  It'll be worth it.  </p> <p>Everyone else, here's what we've covered:</p> <ul> <li> Create a Windows dynamic-link library (DLL) using Rust</li> <li> Inject DLLs into processes using Process Hacker</li> <li> Inject DLLs into processes using Rust</li> <li> Create application windows using Rust</li> <li> Override a window's behavior using subclassing</li> </ul> <p>In today's episode, we'll focus on making our DLL \"production-ready\", by RTFM'ing, adding logging, improving error handling, and, oh yeah, re-writing the whole thing. </p>","tags":["rust","dll","howto","windows","programming","wip"]},{"location":"guides/window-hacking-with-rust/production-ready-dll-injection/index.html#read-the-fscking-manual","title":"Read The Fscking Manual","text":"<p>As a believer in Minimalist Instruction , I've focused on getting your hands dirty as quickly as possible.</p> <p>However, DLL injection and window subclassing are extraordinarily powerful and invasive tools, which both transcend traditional operating systems process boundaries; boundaries specifically created to protect running applications from poorly written and/or malicious code.</p> <p>Implementing these sorts of things relying solely on a tutorial, without, studying the underlying system documentation, is a mistake.</p> <p>To see what I mean, let's read some fscking manuals, starting with, <code>SetWindowLongPtr()</code>.</p>","tags":["rust","dll","howto","windows","programming","wip"]},{"location":"guides/window-hacking-with-rust/production-ready-dll-injection/index.html#setwindowlongptr","title":"SetWindowLongPtr","text":"<p>I was serious, go ahead and read it: here</p> <p>It starts with an easy one:</p> <p>The SetWindowLongPtr function fails if the process that owns the window specified by the hWnd parameter is at a higher process privilege in the UIPI hierarchy than the process the calling thread resides in.</p> <p>Basically, we can't subclass apps running as \"Administrator\" if we're a normal user.  This isn't surprising, but can we proactively check and/or inform the user of workarounds?</p> <p>Windows XP/2000:   The SetWindowLongPtr function fails if the window specified by the hWnd parameter does not belong to the same process as the calling thread.</p> <p>This shouldn't be an issue, but good to know if we get a support email.</p> <p>If you use SetWindowLongPtr with the GWLP_WNDPROC index to replace the window procedure, the window procedure must conform to the guidelines specified in the description of the WindowProc callback function.</p> <p>Good, we covered this in [[Creating A Window With Rust#Callback Function]].</p> <p>Calling SetWindowLongPtr with the GWLP_WNDPROC index creates a subclass of the window class used to create the window. </p> <p>Perfect, that's what we did.</p> <p>An application can subclass a system class, but should not subclass a window class created by another process. </p> <p>lol.</p> <p>The SetWindowLongPtr function creates the window subclass by changing the window procedure associated with a particular window class, causing the system to call the new window procedure instead of the previous one. </p> <p>Sketching this out, we have a Window with a default window procedure:</p> <p>![[Production Ready DLL Injection 2023-03-09 21.46.24.excalidraw.svg]]</p> <p>After a <code>SetWindowLongPtr()</code>, the default window procedure is replaced with our new window procedure's address.</p> <p>The new window procedure calls <code>DefWindowProcW()</code>to hand-off unprocessed messages to the default window procedure:</p> <p>![[Production Ready DLL Injection 2023-03-09 22.17.06.excalidraw.svg]]</p> <p>Makes sense.</p> <p>An application must pass any messages not processed by the new window procedure to the previous window procedure by calling CallWindowProc. This allows the application to create a chain of window procedures.</p> <p>Parsing this out fully:</p> <ul> <li>if we don't process the message, then we must hand-off to previous window procedure</li> <li>if we do process a message, we can choose whether to return or to hand it off</li> </ul> <p>Got it.</p> <p>About Window Procedures mentions:</p> <p>The application must also have the original window procedure address to remove the subclass from the window. To remove the subclass, the application calls SetWindowLong again, passing the address of the original window procedure with the GWL_WNDPROC flag and the handle to the window.</p> <p>Removing a subclass using <code>prev_wndproc</code> is straightforward.  We just need to make sure we hold onto it.</p> <p>When an application subclasses a subclassed window, it must remove the subclasses in the reverse order they were performed. If the removal order is not reversed, an unrecoverable system error may occur.</p> <p>Considering the case where we subclass a window twice, for whatever reason, we need to unsubclass in the reverse order:</p> <pre><code># Subclassing\nlet one = SetWindowLongPtr(a, ...)\nlet two = SetWindowLongPtr(b, ...)\n# Unsubclassing\nSetWindowLongPtr(two, ...); // returns b\nSetWindowLongPtr(one, ...); // returns a\n</code></pre> <p>\ud83d\udc4d</p> <p>In Homework assignment about window subclassing and  Safer subclassing warns:</p> <p>One gotcha that isn\u2019t explained clearly in the documentation is that you must remove your window subclass before the window being subclassed is destroyed. This is typically done either by removing the subclass once your temporary need has passed, or if you are installing a permanent subclass, by inserting a call to RemoveWindowSubclass inside the subclass procedure itself: </p> <pre><code>...\ncase WM_NCDESTROY:\nRemoveWindowSubclass(hwnd, thisfunctionname, uIdSubclass);\nreturn DefSubclassProc(...);\n</code></pre> <p>So, if the user unexpectedly closes a window that we've subclassed, we must remove our subclass when we receive the <code>WM_NCDESTROY</code> message (which is actually the very last message the system sends us before terminating the window).</p> <p>Do not assume that subclasses are added and removed in a purely stack-like manner. If you want to unsubclass and find that you are not the window procedure at the top of the chain you cannot safely unsubclass. You will have to leave your subclass attached until it becomes safe to unsubclass. Until that time, you just have to keep passing the messages through to the previous procedure. </p> <p>So, when removing a subclass (by calling <code>SetWindowLongPtr</code> with <code>prev_wndproc</code>), we have to somehow determine if anyone has subclassed the same window after us, and if so, wait until <code>WM_NCDESTROY</code> to remove our subclass.</p> <p>This one's a doozy, so let's sketch it out, starting with out default window procedure:</p> <p>![[Production Ready DLL Injection 2023-03-09 21.46.24.excalidraw.svg]]</p> <p>After a <code>SetWindowLongPtr()</code>, the default window procedure is replaced with our new window procedure's address:</p> <p>![[Production Ready DLL Injection 2023-03-09 22.17.06.excalidraw.svg]]</p> <p>At some point before we unsubclass ourselves, someone else calls <code>SetWindowLongPtr()</code> and replaces our window procedure, with theirs.  </p> <p>Of course, they think our window procedure is the default window procedure, so they squirrel it away for safe keeping.</p> <p>Hopefully, they're handing-off unprocessed messages using <code>DefWindowProcW()</code>, in which case, our window procedure receives those messages:</p> <p>![[Production Ready DLL Injection 2023-03-09 22.17.15.excalidraw.svg]]</p> <p>Then, if we decide to unsubclass before they unsubclass, by calling <code>SetWindowLongPtr()</code> with our <code>prev_wndproc</code>, we end up accidentally unsubclassing them as well:</p> <p>![[Production Ready DLL Injection 2023-03-09 22.17.37.excalidraw.svg]]</p> <p>Oy vey.</p> <p>So, it's actually easy to check if someone's subclassed after us by calling <code>GetWindowLongPtr()</code>, and comparing what's returned against <code>prev_wndproc</code>. </p> <p>But that's rife with race conditions, and probably (definitely) requires locks and mutexes and \ud83e\udd2e</p> <p>And, even if we get that sorted, how do we get <code>0xCCC</code> to call <code>0xAAA</code>, instead of our removed subclass procedure?</p> <p>Yeah, Raymond's basically saying that we're trapped until <code>WM_NCDESTROY</code> if someone subclasses after us...</p> <p>![Production Ready DLL Injection 2023-03-09 22.17.54.excalidraw.svg</p>","tags":["rust","dll","howto","windows","programming","wip"]},{"location":"guides/window-hacking-with-rust/production-ready-dll-injection/index.html#conclusions","title":"Conclusions","text":"<p>After wading through all that <code>SetWindowLongPtr</code> documentation and errata, it feels like we've hit some really insurmountable issues; unless we're ok with leaving DLLs dangling around, potentially forever, if we get subclassed.</p> <p>Fortunately, Raymond gives us a glimmer of hope, SetWindowSubclass, which we'll explore next.</p>","tags":["rust","dll","howto","windows","programming","wip"]},{"location":"guides/window-hacking-with-rust/production-ready-dll-injection/index.html#further-reading","title":"Further reading","text":"<ul> <li>What is the difference between WM_DESTROY and WM_NCDESTROY?</li> </ul>","tags":["rust","dll","howto","windows","programming","wip"]},{"location":"guides/window-hacking-with-rust/production-ready-dll-injection/index.html#setwindowsubclass","title":"SetWindowSubclass","text":"<p>Let's start by reading the documentation: here</p> <p>Everything seems great until we get to this warning:</p> <p>Warning</p> <p>You cannot use the subclassing helper functions to subclass a window across threads.</p> <p>From our earlier <code>SetWindowLongPtr</code> experiments, we saw that DllMain is called from the same process but a different thread than the main GUI thread.</p> <p>If we want to use SetWindowSubclass, we'll have to work around this.</p> <p>Let's get our hands dirty by refactoring <code>create_window</code> to use <code>SetWindowSubclass</code> instead of <code>SetWindowLongPtr</code>.</p>","tags":["rust","dll","howto","windows","programming","wip"]},{"location":"guides/window-hacking-with-rust/production-ready-dll-injection/index.html#refactoring-create_windowexe","title":"Refactoring create_window.exe","text":"<p>First, replace the existing calls with:</p> <pre><code>//LoadLibraryA(PCSTR(\"hello.dll\\0\".as_ptr()));\n//let result = SetWindowLongPtrW(handle, GWLP_WNDPROC, wnd_proc as isize);\n//PREV_WNDPROC = transmute::&lt;isize, WNDPROC&gt;(result);\nSetWindowSubclass(handle, Some(wnd_proc), 0, 0);\n</code></pre> <p>Copy over <code>wnd_proc</code> from <code>lib.rs</code>:</p> lib.rs<pre><code>extern \"system\" fn wnd_proc(\nwindow: HWND,\nmessage: u32,\nwparam: WPARAM,\nlparam: LPARAM,\n_: usize,\n_: usize,\n) -&gt; LRESULT {\nunsafe {\nmatch message {\nWM_PAINT =&gt; {\nlet mut msg =  String::from(\"ZOMG!\");\nlet mut ps = PAINTSTRUCT::default();\nlet psp = &amp;mut ps as *mut PAINTSTRUCT;\nlet rectp = &amp;mut ps.rcPaint as *mut RECT;\nlet hdc = BeginPaint(window, psp);\nlet brush = CreateSolidBrush(COLORREF(0x0000F0F0));\nFillRect(hdc, &amp;ps.rcPaint, brush);\nDrawTextA(hdc,\nmsg.as_bytes_mut(),\nrectp,\nDT_SINGLELINE | DT_CENTER | DT_VCENTER\n);\nEndPaint(window, &amp;ps);\nreturn LRESULT(0);\n}\nWM_WINDOWPOSCHANGING =&gt; {\nlet data = lparam.0 as *mut WINDOWPOS;\nlet data = data.as_mut().unwrap();\ndata.flags |= SWP_NOSIZE | SWP_NOMOVE;\nreturn LRESULT(0);\n}\nWM_NCDESTROY =&gt; {\n// let result = transmute::&lt;WNDPROC, _&gt;(PREV_WNDPROC);\n// SetWindowLongPtrW(window, GWLP_WNDPROC, result);\nRemoveWindowSubclass(window, Some(wnd_proc), 0);\nreturn DefWindowProcA(window, message, wparam, lparam);\n}\n_ =&gt; ()\n}\n// CallWindowProcW(PREV_WNDPROC, window, message, wparam, lparam)\nDefSubclassProc(window, message, wparam, lparam)\n}\n}\n</code></pre> <p>Doing a <code>cargo run --bin create_window</code> should have a few unused import warnings, but yield a:</p> <p></p> <p>Well, that was pretty easy!</p> <p>Now let's do the same with <code>lib.rs</code>:</p>","tags":["rust","dll","howto","windows","programming","wip"]},{"location":"guides/window-hacking-with-rust/production-ready-dll-injection/index.html#refactoring-hellodll","title":"Refactoring hello.dll","text":"<p>Do stuff...</p> <p><code>cargo run --bin create_window</code> results in:</p> <p></p> <p>Yay!</p>","tags":["rust","dll","howto","windows","programming","wip"]},{"location":"guides/window-hacking-with-rust/production-ready-dll-injection/index.html#hello_inject","title":"hello_inject","text":"<p><code>cargo run --bin hello_inject</code> doesn't work.  Why?</p> <p>To understand, let's talk about Debugging.</p>","tags":["rust","dll","howto","windows","programming","wip"]},{"location":"guides/window-hacking-with-rust/production-ready-dll-injection/index.html#further-reading_1","title":"Further Reading","text":"<ul> <li>SetWindowSubclass</li> <li>Subclassing Controls</li> <li>Window Procedure Subclassing</li> </ul>","tags":["rust","dll","howto","windows","programming","wip"]},{"location":"guides/window-hacking-with-rust/production-ready-dll-injection/index.html#debugging","title":"Debugging","text":"<p>Debugging DLLs in any language isn't amazing.  Debugging DLLs in Rust is... rudimentary.  Let's explore our options, starting with, logging!</p>","tags":["rust","dll","howto","windows","programming","wip"]},{"location":"guides/window-hacking-with-rust/production-ready-dll-injection/index.html#logging","title":"Logging","text":"<p>Up until know we've been able to eyeball success vs failure as we're doing stuff with visible side effects.</p> <p>Now that we've reached the part where...  we're going to need to log.</p> <p>Luckily, the <code>simple-logger</code> crate offers drop-dead simple logging.  Add it to the <code>hello.dll</code> crate with a:</p> <pre><code>cargo add log simple-logger --package hello\n</code></pre> <p>And add this to <code>lib.rs</code>:</p> hello\\src\\lib.rs<pre><code>use log::{LevelFilter, info};\nfn attach() {\nunsafe {\nsimple_logging::log_to_file(\"C:\\\\temp\\\\hello.dll.log\", LevelFilter::Info);\nlet handle = find_window_by_pid(GetCurrentProcessId()).unwrap();\nlet result = SetWindowLongPtrW(handle, GWLP_WNDPROC, wnd_proc as isize);\nPREV_WNDPROC = transmute::&lt;isize, WNDPROC&gt;(result);\n};\n}\n</code></pre>","tags":["rust","dll","howto","windows","programming","wip"]},{"location":"guides/window-hacking-with-rust/production-ready-dll-injection/index.html#tracing","title":"Tracing","text":"","tags":["rust","dll","howto","windows","programming","wip"]},{"location":"guides/window-hacking-with-rust/production-ready-dll-injection/index.html#process-monitor","title":"Process Monitor","text":"","tags":["rust","dll","howto","windows","programming","wip"]},{"location":"guides/window-hacking-with-rust/production-ready-dll-injection/index.html#setwindowsubclass-cont","title":"SetWindowSubclass (cont.)","text":"<p>Now that we're certain that <code>SetWindowSubclass</code> is not going to work across threads... we need to figure out how to call <code>SetWindowSubclass</code> from our window's GUI thread.</p> <p>Enter this nugget from Raymond Chen:</p> <p>Recall that when an event occurs on a thread, the window hook is called from the same thread that the event occurred on. For example, a WH_CALL\u00adWND\u00adPROC hook procedure is called when a window procedure is about to be called, and the call occurs on the thread that is about to call the window procedure. ... Anyway, if you have a window hook that can be installed per-thread, then it will be installed only for events on that thread. In the above example, it means that only window procedures on that thread will trigger the hook.  - source: What does the thread parameter to Set\u00adWindows\u00adHook\u00adEx actually mean?</p>","tags":["rust","dll","howto","windows","programming","wip"]},{"location":"guides/window-hacking-with-rust/production-ready-dll-injection/index.html#setwindowshookex","title":"SetWindowsHookEx","text":"<p>Let's start by reading SetWindowHookEx.</p> <p>Great, now let's start refactoring <code>hello.dll</code>, starting with <code>attach()</code>:</p> hello\\src\\lib.rs<pre><code>let gui_tid = GetWindowThreadProcessId(handle, None);\nlet hook = SetWindowsHookExA(\nWH_CALLWNDPROC, Some(call_wnd_proc), None, gui_tid );\n</code></pre> <p>Now let's add <code>call_wnd_proc</code> below <code>attach</code>:</p> hello\\src\\lib.rs<pre><code>#[no_mangle]\nunsafe extern \"system\" fn call_wnd_proc(n_code: i32, w_param: WPARAM, l_param: LPARAM) -&gt; LRESULT {\nif HC_ACTION as i32 == n_code {\nlet origin = w_param.0 as u32;\nlet param = unsafe { *(l_param.0 as *const CWPSTRUCT) };\nmatch param.message {\nWM_SIZING =&gt; info!(\"CallWndProc: Received WM_SIZING\"),\nWM_PAINT =&gt; {\ninfo!(\"CallWndProc: Received WM_PAINT\");\nSetWindowSubclass(param.hwnd, Some(wnd_proc), 0, GUI_TID as _\n);\n},\n_ =&gt; ()\n};\n}\nCallNextHookEx(HHOOK::default(), n_code, w_param, l_param)\n}\n</code></pre>","tags":["rust","dll","howto","windows","programming","wip"]},{"location":"guides/window-hacking-with-rust/production-ready-dll-injection/index.html#further-reading_2","title":"Further Reading","text":"<ul> <li>Explains DLL-based Implementation</li> <li>What is the HINSTANCE passed to SetWindowsHookEx used for?</li> <li>Why does SetWindowsHookEx take an HINSTANCE parameter?</li> <li>One way people abused hooks in 16-bit Windows</li> </ul>","tags":["rust","dll","howto","windows","programming","wip"]},{"location":"guides/window-hacking-with-rust/production-ready-dll-injection/index.html#createthread","title":"CreateThread","text":"<p>Read CreateThread.</p> <p>The ExitProcess, ExitThread, CreateThread, CreateRemoteThread functions, and a process that is starting (as the result of a CreateProcess call) are serialized between each other within a process. Only one of these events can happen in an address space at a time. This means the following restrictions hold:</p> <pre><code>- During process startup and DLL initialization routines, new threads can be created, but they do not begin execution until DLL initialization is done for the process.\n- Only one thread in a process can be in a DLL initialization or detach routine at a time.\n- ExitProcess does not return until no threads are in their DLL initialization or detach routines.\n</code></pre> <ul> <li>source</li> </ul> <p>Let's refactor <code>attach()</code> so that it creates a new thread:</p> hello\\src\\lib.rs<pre><code>fn attach() {\nunsafe {\nTHREAD_HANDLE = CreateThread(\nNone, 0, Some(worker_thread), None, THREAD_CREATION_FLAGS(0), None);\n}\ninfo!(\"Finished hooking!\");\n}\n</code></pre> <p>And let's create <code>worker_thread()</code>:</p> hello\\src\\lib.rs<pre><code>unsafe extern \"system\" fn worker_thread(_data: *mut std::ffi::c_void) -&gt; u32 {\nunsafe {\nlet handle = find_window_by_pid(GetCurrentProcessId()).unwrap();\nGUI_TID = GetWindowThreadProcessId(handle, None);\nlet logfile = format!(\"C:\\\\Users\\\\me\\\\source\\\\blog_qa\\\\hello.log\");\nsimple_logging::log_to_file(logfile, LevelFilter::Info);\ninfo!(\"hello.dll attached - tid: {} / pid: {} / target tid: {}\",\nGetCurrentThreadId(),\nGetCurrentProcessId(),\nGUI_TID\n);\nlet hook = SetWindowsHookExA(\nWH_CALLWNDPROC, Some(call_wnd_proc), None, GUI_TID);\nHOOKS.push(hook);\nwhile true {\nthread::sleep(time::Duration::from_secs(100));\n};\n};\n</code></pre>","tags":["rust","dll","howto","windows","programming","wip"]},{"location":"guides/window-hacking-with-rust/production-ready-dll-injection/index.html#production-readiness","title":"Production Readiness","text":"","tags":["rust","dll","howto","windows","programming","wip"]},{"location":"guides/window-hacking-with-rust/production-ready-dll-injection/index.html#error-handling","title":"Error Handling","text":"<code>#rust</code> <code>#dll</code> <code>#howto</code> <code>#windows</code> <code>#programming</code> <code>#wip</code>","tags":["rust","dll","howto","windows","programming","wip"]},{"location":"notes/index.html","title":"Notes","text":""},{"location":"notes/index.html#notes","title":"Notes","text":"<p>Snippets and blurbs for my future self.</p>"},{"location":"notes/debugging-tools/index.html","title":"Debugging Tools","text":"","tags":["debugging","windows","chatgpt"]},{"location":"notes/debugging-tools/index.html#dependency-analysis","title":"Dependency Analysis","text":"","tags":["debugging","windows","chatgpt"]},{"location":"notes/debugging-tools/index.html#dll-export-viewer","title":"DLL Export Viewer","text":"<ul> <li>link</li> </ul> <ul> <li>DLL Export Viewer is a software application that allows users to view the list of exported functions in a DLL file.</li> <li>It can be used to identify the functions that are available for use by other programs or libraries that use the DLL.</li> <li>DLL Export Viewer displays information such as function names, addresses, ordinals, and entry points.</li> <li>It supports both 32-bit and 64-bit DLL files and can be used on Windows operating systems.</li> <li>The application allows users to sort and filter the list of exported functions based on various criteria, such as function name, address, and ordinal.</li> <li>It also provides the ability to save the exported function list as a text, HTML, or XML file.</li> <li>DLL Export Viewer is a free application and does not require installation.</li> <li>With DLL Export Viewer, users can easily determine the functions exported by a DLL file and use them in their own programs or libraries.</li> </ul>","tags":["debugging","windows","chatgpt"]},{"location":"notes/debugging-tools/index.html#debugview","title":"DebugView","text":"<ul> <li>link</li> </ul> <ul> <li>DebugView is a software application that allows users to monitor debug output from Windows-based applications and services in real-time.</li> <li>It captures debug messages generated by the application or service and displays them in a console window.</li> <li>DebugView supports various debug output channels, including OutputDebugString, DbgPrint, and Win32 Trace APIs.</li> <li>The application can capture debug output from both local and remote systems, making it useful for debugging distributed applications.</li> <li>It provides users with powerful filtering capabilities, allowing them to filter the output based on different criteria, such as process name, message type, and message text.</li> <li>DebugView also allows users to save the captured output to a file for later analysis.</li> <li>It can be used to troubleshoot various issues, including application crashes, performance problems, and security vulnerabilities.</li> <li>DebugView is a free application that can be used on Windows operating systems.</li> <li>It is lightweight, portable, and does not require installation.</li> </ul>","tags":["debugging","windows","chatgpt"]},{"location":"notes/debugging-tools/index.html#dependencies","title":"Dependencies","text":"<ul> <li>link</li> </ul>","tags":["debugging","windows","chatgpt"]},{"location":"notes/debugging-tools/index.html#process-hacker","title":"Process Hacker","text":"<ul> <li>link</li> </ul> <ul> <li>Process Hacker is a powerful task manager and system monitor for Windows-based operating systems.</li> <li>It allows users to view and manage processes, services, and network connections on their system in real-time.</li> <li>Process Hacker provides detailed information about each process, including its CPU and memory usage, thread count, and priority.</li> <li>It also allows users to view and edit process properties, such as its parent process, security attributes, and startup options.</li> <li>The application provides users with advanced features, such as process termination, memory editing, and DLL injection.</li> <li>Process Hacker also includes a powerful process search functionality, allowing users to search for specific processes based on different criteria, such as process name, PID, and command line parameters.</li> <li>The application also allows users to monitor system performance metrics, such as CPU usage, disk activity, and network traffic.</li> <li>It provides users with detailed information about each network connection, including its protocol, source and destination IP addresses, and port numbers.</li> <li>Process Hacker is a free and open-source application that can be used on Windows operating systems.</li> <li>","tags":["debugging","windows","chatgpt"]},{"location":"notes/debugging-tools/index.html#processexplorer","title":"ProcessExplorer","text":"<ul> <li>link</li> </ul> <ul> <li>ProcessExplorer is an advanced task manager and system monitor for Windows-based operating systems.</li> <li>It provides users with detailed information about processes, including their CPU and memory usage, thread count, and security attributes.</li> <li>The application allows users to view and manage system resources, such as open handles, DLLs, and memory-mapped files.</li> <li>ProcessExplorer provides users with advanced features, such as process and thread highlighting, process tree navigation, and process profiling.</li> <li>It also includes a powerful search functionality, allowing users to search for specific processes and resources based on different criteria, such as name, PID, and module name.</li> <li>The application provides users with the ability to suspend, resume, and terminate processes, as well as the ability to view and edit process properties.</li> <li>ProcessExplorer is a free application that can be used on Windows operating systems.</li> </ul>","tags":["debugging","windows","chatgpt"]},{"location":"notes/debugging-tools/index.html#processmonitor","title":"ProcessMonitor","text":"<ul> <li>link</li> </ul> <ul> <li>ProcessMonitor enables monitoring of system activity related to file system, registry, and network operations.</li> <li>It allows users to capture and display real-time system activity, including file system and registry activity, process and thread activity, and network activity.</li> <li>The application provides users with detailed information about each system event, including its timestamp, process ID, and operation details.</li> <li>ProcessMonitor provides users with advanced filtering capabilities, allowing them to filter the captured activity based on various criteria, such as process name, operation type, and result code.</li> <li>It also includes a powerful search functionality, allowing users to search for specific events based on different criteria, such as path, process name, and result code.</li> <li>ProcessMonitor is a free application that can be used on Windows operating systems.</li> <li>It is regularly updated with new features and improvements and has a large community of users and developers.</li> </ul>","tags":["debugging","windows","chatgpt"]},{"location":"notes/debugging-tools/index.html#dependency-walker","title":"Dependency Walker","text":"<ul> <li>link</li> </ul> <p> -   Dependency Walker is a software application that allows users to view the dependencies of a Windows-based executable or DLL file. -   It provides users with detailed information about the imported and exported functions, as well as the dependent modules, for a given file. -   Dependency Walker also allows users to view the module's entry point, its delay-load dependencies, and the symbols it exports. -   The application provides users with a graphical representation of the module's dependency tree, allowing them to easily identify missing or broken dependencies. -   Dependency Walker also includes a profiling feature that allows users to monitor a process's module loading activity in real-time. -   The application can be used to troubleshoot issues related to missing or broken dependencies, as well as to analyze the performance of module loading. -   Dependency Walker is a free application that can be used on Windows operating systems.</p>","tags":["debugging","windows","chatgpt"]},{"location":"notes/debugging-tools/index.html#x64dbg","title":"x64dbg","text":"<ul> <li>link</li> </ul> <ul> <li>x64dbg is a powerful and popular debugger for Windows-based operating systems.</li> <li>It supports both 32-bit and 64-bit executables and provides users with advanced features, such as code and memory analysis, breakpoint management, and plugin support.</li> <li>The application allows users to view and edit registers, memory, and disassembly of the debugged process, as well as to set and manage breakpoints and conditions.</li> <li>x64dbg provides users with a powerful script engine, allowing them to automate and customize the debugging process.</li> <li>It also includes a powerful search functionality, allowing users to search for specific instructions, strings, and memory regions in the debugged process.</li> <li>x64dbg is a free and open-source application that can be used on Windows operating systems.</li> </ul>","tags":["debugging","windows","chatgpt"]},{"location":"notes/debugging-tools/index.html#tracing","title":"Tracing","text":"","tags":["debugging","windows","chatgpt"]},{"location":"notes/debugging-tools/index.html#api-monitor-rohitabcom","title":"API Monitor (rohitab.com)","text":"<ul> <li>API Monitor is a powerful debugging tool used by software developers to monitor and debug API calls made by their applications.</li> <li>The tool is developed and maintained by Rohitab Batra, a software engineer and security researcher.</li> <li>API Monitor supports monitoring of over 1,300 different API functions, including functions in Windows operating systems, third-party libraries, and custom APIs.</li> <li>The tool allows developers to view detailed information about API calls, such as the parameters passed to the function and the return values.</li> <li>With API Monitor, developers can quickly identify and diagnose issues with their applications by analyzing the behavior of the API calls made by the application.</li> </ul>","tags":["debugging","windows","chatgpt"]},{"location":"notes/debugging-tools/index.html#memory-analysis","title":"Memory Analysis","text":"","tags":["debugging","windows","chatgpt"]},{"location":"notes/debugging-tools/index.html#mtuner","title":"MTuner","text":"<ul> <li>https://github.com/milostosic/MTuner</li> </ul>","tags":["debugging","windows","chatgpt"]},{"location":"notes/debugging-tools/index.html#hex-editors","title":"Hex Editors","text":"","tags":["debugging","windows","chatgpt"]},{"location":"notes/debugging-tools/index.html#imhex","title":"ImHex","text":"","tags":["debugging","windows","chatgpt"]},{"location":"notes/debugging-tools/index.html#other","title":"Other","text":"","tags":["debugging","windows","chatgpt"]},{"location":"notes/debugging-tools/index.html#wifiinfoview","title":"wifiinfoview","text":"<code>#debugging</code> <code>#windows</code> <code>#chatgpt</code>","tags":["debugging","windows","chatgpt"]},{"location":"notes/reverse-engineering-tools/index.html","title":"Reverse Engineering Tools","text":"","tags":["reversing","windows","chatgpt"]},{"location":"notes/reverse-engineering-tools/index.html#ofrak","title":"Ofrak","text":"<ul> <li> <p>Website</p> </li> <li> <p>Open-source framework for analyzing malware and other files</p> </li> <li>Supports various file formats including PE, ELF, and Mach-O</li> <li>Offers a web-based interface for interactive analysis</li> <li>Provides a RESTful API for integration with other tools</li> <li>Allows the creation of custom plugins for advanced analysis</li> </ul>","tags":["reversing","windows","chatgpt"]},{"location":"notes/reverse-engineering-tools/index.html#rada","title":"Rada","text":"<ul> <li> <p>Website</p> </li> <li> <p>Free and open-source binary analysis tool</p> </li> <li>Supports various architectures including x86, ARM, and MIPS</li> <li>Offers a command-line interface for static analysis and disassembly</li> <li>Provides advanced features for function identification and cross-referencing</li> <li>Allows the creation of custom scripts using the Python API</li> </ul>","tags":["reversing","windows","chatgpt"]},{"location":"notes/reverse-engineering-tools/index.html#capstone-engine","title":"Capstone Engine","text":"<ul> <li> <p>Website</p> </li> <li> <p>Open-source multi-platform disassembly framework</p> </li> <li>Supports various architectures including x86, ARM, PowerPC, and MIPS</li> <li>Offers a simple and easy-to-use API for disassembling and analyzing binary code</li> <li>Provides advanced features for instruction decoding and analysis</li> <li>Allows the creation of custom tools and plugins using the API</li> </ul>","tags":["reversing","windows","chatgpt"]},{"location":"notes/reverse-engineering-tools/index.html#ghidra","title":"Ghidra","text":"<ul> <li> <p>Website</p> </li> <li> <p>Free and open-source software reverse engineering framework developed by the National Security Agency (NSA)</p> </li> <li>Supports various architectures including x86, ARM, and MIPS</li> <li>Offers a graphical user interface for disassembly, decompilation, and analysis</li> <li>Provides advanced features for scripting and automation using the Python API</li> <li>Allows the creation of custom plugins and modules for advanced analysis and functionality</li> </ul>","tags":["reversing","windows","chatgpt"]},{"location":"notes/reverse-engineering-tools/index.html#dynamorio","title":"DynamoRIO","text":"<ul> <li> <p>Website</p> </li> <li> <p>Dynamic instrumentation tool for analyzing and modifying software at runtime</p> </li> <li>Supports various platforms including Windows, Linux, and macOS</li> <li>Offers a low-overhead, efficient API for tracing, profiling, and debugging applications</li> <li>Provides advanced features for code injection, instrumentation, and analysis</li> <li>Allows the creation of custom clients and plugins using the API</li> </ul>","tags":["reversing","windows","chatgpt"]},{"location":"notes/reverse-engineering-tools/index.html#triton","title":"Triton","text":"<ul> <li> <p>Website</p> </li> <li> <p>Dynamic binary analysis (DBA) framework</p> </li> <li>Supports various architectures including x86, ARM, and AArch64</li> <li>Offers a Python API for disassembly, symbolic execution, and SMT solving</li> <li>Provides advanced features for program analysis, debugging, and vulnerability discovery</li> <li>Allows the creation of custom tools and plugins using the API</li> </ul>","tags":["reversing","windows","chatgpt"]},{"location":"notes/reverse-engineering-tools/index.html#frida","title":"Frida","text":"<ul> <li>Website</li> <li>Documentation</li> <li> <p>Learn Frida</p> </li> <li> <p>Dynamic instrumentation tool for debugging and analyzing software at runtime</p> </li> <li>Supports various platforms including Windows, Linux, macOS, iOS, and Android</li> <li>Offers a JavaScript API for injecting code and interacting with the target process</li> <li>Provides advanced features for function tracing, hooking, and interception</li> <li>Allows the creation of custom scripts and plugins using the API</li> </ul>","tags":["reversing","windows","chatgpt"]},{"location":"notes/reverse-engineering-tools/index.html#dyninst","title":"Dyninst","text":"","tags":["reversing","windows","chatgpt"]},{"location":"notes/reverse-engineering-tools/index.html#links","title":"Links","text":"<ul> <li>Dynamic Binary Instrumentation Primer</li> </ul> <code>#reversing</code> <code>#windows</code> <code>#chatgpt</code>","tags":["reversing","windows","chatgpt"]},{"location":"notes/cheatsheets/docker-cheatsheet/index.html","title":"Docker Cheatsheet","text":"","tags":["wip"]},{"location":"notes/cheatsheets/docker-cheatsheet/index.html#dockerfile","title":"Dockerfile","text":"<pre><code>FROM ubuntu:latest\nUSER root\nWORKDIR /root\nCOPY ENTRYPOINT.sh /\n\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\ncurl \\\niproute2 \\\niputils-ping \\\nmininet \\\nnet-tools \\\nopenvswitch-switch \\\nopenvswitch-testcontroller \\\ntcpdump \\\nvim \\\nx11-xserver-utils \\\nxterm \\\n&amp;&amp; rm -rf /var/lib/apt/lists/* \\\n&amp;&amp; chmod +x /ENTRYPOINT.sh\n\nEXPOSE 6633 6653 6640\nENTRYPOINT [\"/ENTRYPOINT.sh\"]\n</code></pre>","tags":["wip"]},{"location":"notes/cheatsheets/docker-cheatsheet/index.html#entrypointsh","title":"Entrypoint.sh","text":"<pre><code>#!/usr/bin/env bash\nservice openvswitch-switch start\novs-vsctl set-manager ptcp:6640\n\nbash\n\nservice openvswitch-switch stop\n</code></pre>","tags":["wip"]},{"location":"notes/cheatsheets/docker-cheatsheet/index.html#buildsh","title":"build.sh","text":"<pre><code>#!/bin/sh\ndocker build -t mininet-docker:latest .\n</code></pre>","tags":["wip"]},{"location":"notes/cheatsheets/docker-cheatsheet/index.html#runsh","title":"run.sh","text":"<pre><code>#!/bin/sh\n\ndocker run -it --privileged --env DISPLAY=$(hostname):0.0 mininet-docker:latest \n</code></pre>","tags":["wip"]},{"location":"notes/cheatsheets/docker-cheatsheet/index.html#openshellsh","title":"openshell.sh","text":"<pre><code>#!/bin/sh\n\ndocker exec -it $(docker ps |grep mininet-docker | cut -f1 -d' ') /bin/bash\n</code></pre> <code>#wip</code>","tags":["wip"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html","title":"Git Cheatsheet","text":"<p>03-28-2023: Updated using ChatGPT</p>","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#github","title":"GitHub","text":"","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#pushing-existing-repo","title":"Pushing Existing Repo","text":"<pre><code>### \u2026or push an existing repository from the command line\ngit remote add origin https://github.com/peddamat/xxx.git\ngit branch -M main\ngit push -u origin main\n</code></pre>","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#fetch-only-latest-commits","title":"Fetch Only Latest Commits","text":"<pre><code>git fetch --no-tags --prune --no-recurse-submodules --depth=1 \\\n    origin +refs/heads/main:refs/remotes/origin/main\n</code></pre>","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#branching-and-merging","title":"Branching and Merging","text":"","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#create-a-new-branch","title":"Create a new branch","text":"<pre><code>git branch [new_branch_name]\n</code></pre>","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#switch-to-an-existing-branch","title":"Switch to an existing branch","text":"<pre><code>git checkout [branch_name]\n</code></pre>","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#create-a-new-branch-and-switch-to-it","title":"Create a new branch and switch to it","text":"<pre><code>git checkout -b [new_branch_name]\n</code></pre>","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#merge-changes-from-one-branch-into-another","title":"Merge changes from one branch into another","text":"<pre><code>git merge [source_branch] [destination_branch]\n</code></pre>","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#rebase-changes-from-one-branch-onto-another","title":"Rebase changes from one branch onto another","text":"<pre><code>git rebase [source_branch] [destination_branch]\n</code></pre>","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#undoing-changes","title":"Undoing Changes","text":"","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#discard-changes-in-working-directory","title":"Discard changes in working directory","text":"<pre><code>git checkout -- [file]\n</code></pre>","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#unstage-changes","title":"Unstage changes","text":"<pre><code>git reset [file]\n</code></pre>","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#undo-the-last-commit-and-keep-changes-in-working-directory","title":"Undo the last commit and keep changes in working directory","text":"<pre><code>git reset HEAD~\n</code></pre>","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#undo-the-last-commit-and-discard-changes","title":"Undo the last commit and discard changes","text":"<pre><code>git reset --hard HEAD~\n</code></pre>","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#remove-a-commit-from-the-history","title":"Remove a commit from the history","text":"<pre><code>git rebase -i HEAD~[number_of_commits_to_keep]\n</code></pre>","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#git-config","title":"Git Config","text":"","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#set-global-user-name","title":"Set global user name","text":"<pre><code>git config --global user.name \"[name]\"\n</code></pre>","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#set-global-user-email","title":"Set global user email","text":"<pre><code>git config --global user.email \"[email]\"\n</code></pre>","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#set-global-editor","title":"Set global editor","text":"<pre><code>git config --global core.editor [editor_name]\n</code></pre>","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#git-hooks","title":"Git Hooks","text":"","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#install-a-hook","title":"Install a hook","text":"<pre><code>cp [hook_name].sample .git/hooks/[hook_name]\n</code></pre>","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#make-a-hook-executable","title":"Make a hook executable","text":"<pre><code>chmod +x .git/hooks/[hook_name]\n</code></pre>","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#sample-pre-commit-hook-to-run-tests","title":"Sample pre-commit hook to run tests","text":"<pre><code>#!/bin/sh\n\n# Run tests\npython manage.py test\n\n# If tests fail, abort the commit\nif [ $? != 0 ]; then\n    echo \"Tests failed. Aborting commit.\"\n    exit 1\nfi\n</code></pre>","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#history","title":"History","text":"","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#show-a-log-of-changes","title":"Show a log of changes","text":"<pre><code>git log\n</code></pre>","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#show-a-diff-of-changes","title":"Show a diff of changes","text":"<pre><code>git diff [file]\n</code></pre>","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#rebasing","title":"Rebasing","text":"<ul> <li> <p>Mark the commits you want to squash with <code>s</code> and save the changes.</p> </li> <li> </li> </ul>","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#interactively-rebase-the-last-3-commits","title":"Interactively rebase the last 3 commits","text":"<p><code>git rebase -i HEAD~3</code></p>","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#pick-specific-commits-and-squash-them-into-one-commit","title":"Pick specific commits and squash them into one commit","text":"<p><code>git rebase -i HEAD~4</code></p>","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#rebase-and-preserve-merges","title":"Rebase and preserve merges","text":"<p><code>git rebase -p</code></p>","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#reflog","title":"Reflog","text":"<ul> <li> <p>View a list of past commits that are no longer referenced</p> <p><code>git reflog</code></p> </li> <li> <p>Recover a lost commit</p> <p><code>git cherry-pick [commit_hash]</code></p> </li> </ul>","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#recovering-lost-commits","title":"Recovering lost commits","text":"","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#bisect","title":"Bisect","text":"<ul> <li> <p>Mark the current commit as \"bad\"</p> <p><code>git bisect bad</code></p> </li> <li> <p>Mark an earlier commit as \"good\"</p> <p><code>git bisect good [commit_hash]</code></p> </li> <li> <p>Automatically find the commit that introduced the bug</p> <p><code>git bisect run [test_script]</code></p> </li> </ul>","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#finding-the-commit-that-introduced-a-bug","title":"Finding the commit that introduced a bug","text":"","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#submodules","title":"Submodules","text":"<p><code>git submodule add [repository_url] [path]</code></p> <ul> <li> <p>Update all submodules</p> <p><code>git submodule update --recursive</code></p> </li> <li> <p>Update a specific submodule</p> <p><code>git submodule update --remote [submodule_path]</code></p> </li> </ul>","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#adding-a-submodule","title":"Adding a submodule","text":"","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#updating-a-submodule","title":"Updating a submodule","text":"","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#git-worktree","title":"Git Worktree","text":"<p><code>git worktree add [path] [branch]</code></p> <p><code>git worktree list</code></p>","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#creating-a-new-worktree","title":"Creating a new worktree","text":"","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#listing-worktrees","title":"Listing worktrees","text":"","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#filter-branch","title":"Filter-branch","text":"","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#updating-author-information-in-a-repository","title":"Updating author information in a repository","text":"<p><code>git filter-branch --env-filter '   OLD_EMAIL=\"old_email@example.com\"   CORRECT_NAME=\"Correct Name\"   CORRECT_EMAIL=\"correct_email@example.com\"   if [ \"$GIT_COMMITTER_EMAIL\" = \"$OLD_EMAIL\" ]   then   export GIT_COMMITTER_NAME=\"$CORRECT_NAME\"   export GIT_COMMITTER_EMAIL=\"$CORRECT_EMAIL\"   fi   if [ \"$GIT_AUTHOR_EMAIL\" = \"$OLD_EMAIL\" ]   then   export GIT_AUTHOR_NAME=\"$CORRECT_NAME\"   export GIT_AUTHOR_EMAIL=\"$CORRECT_EMAIL\"   fi   ' --tag-name-filter cat -- --branches --tags</code></p>","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/git-cheatsheet/index.html#chatgpt-script","title":"ChatGPT Script","text":"<pre><code>Generate a markdown list of the most common advanced git commands in the following format, with the commands grouped by \"Command Group\":\n\n### Command Group\n\n- #### Description of command\n\n    ```\n     code for command\n    ```\n</code></pre> <code>#git</code> <code>#cheatsheet</code> <code>#chatgpt</code>","tags":["git","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/rsync-cheatsheet/index.html","title":"Rsync Cheatsheet","text":"","tags":["rsync","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/rsync-cheatsheet/index.html#syncing-with-qnap","title":"Syncing With QNAP","text":"","tags":["rsync","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/rsync-cheatsheet/index.html#confirm-accuracy-of-transfer","title":"Confirm Accuracy of Transfer","text":"<pre><code>rsync -av --delete --checksum --dry-run --stats --itemize-changes --out-format='%t %i %f ' SOURCE DESTINATION | tee log.txt\n\nrsync -av --delete --checksum --dry-run --stats --itemize-changes --out-format='%t %i %f '  rsync://alfie.local:'/root/Volumes/&lt;folder&gt;' . | tee log.txt\n</code></pre>","tags":["rsync","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/rsync-cheatsheet/index.html#initiate-sync","title":"Initiate Sync","text":"<p><code>rsync --exclude 'Spotlight-V100*' -P -av rsync://alfie.local:'/root/Volumes/&lt;folder&gt;' .</code></p>","tags":["rsync","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/rsync-cheatsheet/index.html#create-md5-digest","title":"Create MD5 Digest","text":"<p><code>find -type f -exec md5sum \"{}\" + &gt; checklist.chk</code></p>","tags":["rsync","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/rsync-cheatsheet/index.html#syncing-with-qnap-nas","title":"Syncing With QNAP NAS","text":"<pre><code>rsync -P -rltDvn --delete Consolidated/ rsync://rsync@monolith.guestwifi.home:\"/Public/Consolidated\"\n -r, --recursive             recurse into directories\n -l, --links                 copy symlinks as symlinks\n -t, --times                 preserve modification times\n -D                          same as --devices --specials\n     --devices               preserve device files (super-user only)\n     --specials              preserve special files\n -v, --verbose               increase verbosity\n -n, --dry-run               perform a trial run with no changes made\n -q, --quiet                 suppress non-error messages\n     --no-motd               suppress daemon-mode MOTD (see caveat)\n -c, --checksum              skip based on checksum, not mod-time &amp; size\n -a, --archive               archive mode; equals -rltDgop (no -H,-A,-X)\n     --no-OPTION             turn off an implied OPTION (e.g. --no-D)\n -R, --relative              use relative path names\n     --no-implied-dirs       don't send implied dirs with --relative\n -b, --backup                make backups (see --suffix &amp; --backup-dir)\n     --backup-dir=DIR        make backups into hierarchy based in DIR\n     --suffix=SUFFIX         backup suffix (default ~ w/o --backup-dir)\n -u, --update                skip files that are newer on the receiver\n     --inplace               update destination files in-place\n     --append                append data onto shorter files\n     --append-verify         --append w/old data in file checksum\n -d, --dirs                  transfer directories without recursing\n -L, --copy-links            transform symlink into referent file/dir\n     --copy-unsafe-links     only \"unsafe\" symlinks are transformed\n     --safe-links            ignore symlinks that point outside the tree\n -k, --copy-dirlinks         transform symlink to dir into referent dir\n -K, --keep-dirlinks         treat symlinked dir on receiver as dir\n -H, --hard-links            preserve hard links\n -p, --perms                 preserve permissions\n -E, --executability         preserve executability\n     --chmod=CHMOD           affect file and/or directory permissions\n -A, --acls                  preserve ACLs (implies -p)\n -X, --xattrs                preserve extended attributes\n -o, --owner                 preserve owner (super-user only)\n -g, --group                 preserve group\n\n -O, --omit-dir-times        omit directories from --times\n     --super                 receiver attempts super-user activities\n     --fake-super            store/recover privileged attrs using xattrs\n -S, --sparse                handle sparse files efficiently\n -W, --whole-file            copy files whole (w/o delta-xfer algorithm)\n -x, --one-file-system       don't cross filesystem boundaries\n -B, --block-size=SIZE       force a fixed checksum block-size\n -e, --rsh=COMMAND           specify the remote shell to use\n     --rsync-path=PROGRAM    specify the rsync to run on remote machine\n     --existing              skip creating new files on receiver\n     --ignore-existing       skip updating files that exist on receiver\n     --remove-source-files   sender removes synchronized files (non-dir)\n     --del                   an alias for --delete-during\n     --delete                delete extraneous files from dest dirs\n     --delete-before         receiver deletes before transfer (default)\n     --delete-during         receiver deletes during xfer, not before\n     --delete-delay          find deletions during, delete after\n     --delete-after          receiver deletes after transfer, not before\n     --delete-excluded       also delete excluded files from dest dirs\n     --ignore-errors         delete even if there are I/O errors\n     --force                 force deletion of dirs even if not empty\n     --max-delete=NUM        don't delete more than NUM files\n     --max-size=SIZE         don't transfer any file larger than SIZE\n     --min-size=SIZE         don't transfer any file smaller than SIZE\n     --partial               keep partially transferred files\n     --partial-dir=DIR       put a partially transferred file into DIR\n     --delay-updates         put all updated files into place at end\n -m, --prune-empty-dirs      prune empty directory chains from file-list\n     --numeric-ids           don't map uid/gid values by user/group name\n     --timeout=SECONDS       set I/O timeout in seconds\n     --contimeout=SECONDS    set daemon connection timeout in seconds\n -I, --ignore-times          don't skip files that match size and time\n     --size-only             skip files that match in size\n     --modify-window=NUM     compare mod-times with reduced accuracy\n -T, --temp-dir=DIR          create temporary files in directory DIR\n -y, --fuzzy                 find similar file for basis if no dest file\n     --compare-dest=DIR      also compare received files relative to DIR\n     --copy-dest=DIR         ... and include copies of unchanged files\n     --link-dest=DIR         hardlink to files in DIR when unchanged\n -z, --compress              compress file data during the transfer\n     --compress-level=NUM    explicitly set compression level\n     --skip-compress=LIST    skip compressing files with suffix in LIST\n -C, --cvs-exclude           auto-ignore files in the same way CVS does\n -f, --filter=RULE           add a file-filtering RULE\n -F                          same as --filter='dir-merge /.rsync-filter'\n                             repeated: --filter='- .rsync-filter'\n     --exclude=PATTERN       exclude files matching PATTERN\n     --exclude-from=FILE     read exclude patterns from FILE\n     --include=PATTERN       don't exclude files matching PATTERN\n     --include-from=FILE     read include patterns from FILE\n     --files-from=FILE       read list of source-file names from FILE\n -0, --from0                 all *from/filter files are delimited by 0s\n -s, --protect-args          no space-splitting; wildcard chars only\n     --address=ADDRESS       bind address for outgoing socket to daemon\n     --port=PORT             specify double-colon alternate port number\n     --sockopts=OPTIONS      specify custom TCP options\n     --blocking-io           use blocking I/O for the remote shell\n     --stats                 give some file-transfer stats\n -8, --8-bit-output          leave high-bit chars unescaped in output\n -h, --human-readable        output numbers in a human-readable format\n     --progress              show progress during transfer\n -P                          same as --partial --progress\n -i, --itemize-changes       output a change-summary for all updates\n     --out-format=FORMAT     output updates using the specified FORMAT\n     --log-file=FILE         log what we're doing to the specified FILE\n     --log-file-format=FMT   log updates using the specified FMT\n     --password-file=FILE    read daemon-access password from FILE\n     --list-only             list the files instead of copying them\n     --bwlimit=KBPS          limit I/O bandwidth; KBytes per second\n     --write-batch=FILE      write a batched update to FILE\n     --only-write-batch=FILE like --write-batch but w/o updating dest\n     --read-batch=FILE       read a batched update from FILE\n     --protocol=NUM          force an older protocol version to be used\n     --iconv=CONVERT_SPEC    request charset conversion of filenames\n     --checksum-seed=NUM     set block/file checksum seed (advanced)\n -4, --ipv4                  prefer IPv4\n -6, --ipv6                  prefer IPv6\n     --version               print version number\n(-h) --help                  show this help (see below for -h comment)\n</code></pre>","tags":["rsync","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/rsync-cheatsheet/index.html#references","title":"References","text":"<ul> <li>https://superuser.com/questions/1034408/make-rsync-show-progress-on-checksum-comparison-even-if-no-difference-is-being</li> <li>https://blog.wirelessmoves.com/2017/03/backup-doubts-use-checksums-and-rsync.html?utm_source=pocket_mylist</li> </ul>","tags":["rsync","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/rsync-cheatsheet/index.html#understanding-the-output-of-rsync-itemize-changes","title":"Understanding the output of rsync --itemize-changes","text":"<p>As you may know the rsync's --delete options if misused could make severe damage.</p> <p>To prevent this you can use the --itemize-change and the --dry-run options to figure out how the command will behave before launching the real one.</p> <p>The output will be something like that:</p> <pre><code>.d..t..g... ./\n.f...p.g... Something.pdf\n.f.....g... md5sum-2010-02-21.txt\n.f...p.g... prova.rb\n.d.....g... .metadata/\n.f...p.g... .metadata/.lock\n.f...p.g... .metadata/.log\n.f...p.g... .metadata/version.ini\n&gt;f+++++++++ Parameter_Usage.txt\nWhere the first field of each line tell what rsync would do to each file.\nI wrote this little schema that helped me to understand this output format and I'm publishing hoping it will be useful for others.\n\nYXcstpoguax  path/to/file\n|||||||||||\n`----------- the type of update being done::\n ||||||||||   &lt;: file is being transferred to the remote host (sent).\n ||||||||||   &gt;: file is being transferred to the local host (received).\n ||||||||||   c: local change/creation for the item, such as:\n ||||||||||      - the creation of a directory\n ||||||||||      - the changing of a symlink,\n ||||||||||      - etc.\n ||||||||||   h: the item is a hard link to another item (requires --hard-links).\n ||||||||||   .: the item is not being updated (though it might have attributes that are being modified).\n ||||||||||   *: means that the rest of the itemized-output area contains a message (e.g. \"deleting\").\n ||||||||||\n `---------- the file type:\n  |||||||||   f for a file,\n  |||||||||   d for a directory,\n  |||||||||   L for a symlink,\n  |||||||||   D for a device,\n  |||||||||   S for a special file (e.g. named sockets and fifos).\n  |||||||||\n  `--------- c: different checksum (for regular files)\n   ||||||||     changed value (for symlink, device, and special file)\n   `-------- s: Size is different\n    `------- t: Modification time is different\n     `------ p: Permission are different\n      `----- o: Owner is different\n       `---- g: Group is different\n        `--- u: The u slot is reserved for future use.\n         `-- a: The ACL information changed\n</code></pre>","tags":["rsync","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/rsync-cheatsheet/index.html#references_1","title":"References","text":"<ul> <li>http://www.staroceans.org/e-book/understanding-the-output-of-rsync-itemize-changes.html </li> </ul> <code>#rsync</code> <code>#cheatsheet</code> <code>#chatgpt</code>","tags":["rsync","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/ruby-cheatsheet/index.html","title":"Ruby Cheatsheet","text":"","tags":["ruby","cheatsheet"]},{"location":"notes/cheatsheets/ruby-cheatsheet/index.html#mac-setup","title":"Mac Setup","text":"<ul> <li> <p>Install C****ocoapods</p> <pre><code>sudo gem install cocoapods\n</code></pre> </li> </ul> <p></p> <code>#ruby</code> <code>#cheatsheet</code>","tags":["ruby","cheatsheet"]},{"location":"notes/cheatsheets/ruby-cheatsheet/index.html#install-ruby-latest","title":"Install Ruby Latest","text":"<pre><code># Install rvm\ncurl -sSL https://raw.githubusercontent.com/rvm/rvm/master/binscripts/rvm-installer | bash -s stable\n\n# Update $PATH\nsource /Users/me/.rvm/scripts/rvm\n\n# Install ruby\nrvm install ruby@latest\n</code></pre> <p>Check ruby version:</p> <pre><code>$ ruby -v ruby 3.0.0p0 (2020-12-25 revision 95aff21468) [x86_64-darwin22]\n</code></pre>","tags":["ruby","cheatsheet"]},{"location":"notes/cheatsheets/tls-cheatsheet/index.html","title":"TLS Cheatsheet","text":"","tags":["openssl","tls","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/tls-cheatsheet/index.html#converting-between-formats","title":"Converting Between Formats","text":"","tags":["openssl","tls","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/tls-cheatsheet/index.html#convert-a-der-file-crt-cer-der-to-pem","title":"Convert a DER file (.crt .cer .der) to PEM","text":"<p><code>openssl x509 -inform der -in certificate.cer -out certificate.pem</code></p>","tags":["openssl","tls","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/tls-cheatsheet/index.html#convert-a-pem-file-to-der","title":"Convert a PEM file to DER","text":"<p><code>openssl x509 -outform der -in certificate.pem -out certificate.der</code></p>","tags":["openssl","tls","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/tls-cheatsheet/index.html#generating-certificates","title":"Generating Certificates","text":"","tags":["openssl","tls","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/tls-cheatsheet/index.html#generating-a-root-cert","title":"Generating a Root Cert","text":"<p><code>openssl genrsa -out rootCA.key 2048  openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 1024 -out rootCA.pem</code></p>","tags":["openssl","tls","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/tls-cheatsheet/index.html#generating-a-verification-cert","title":"Generating a Verification Cert","text":"<pre><code>openssl genrsa -out verificationCert.key 2048 \nopenssl req -new -key verificationCert.key -out verificationCert.csr \nopenssl x509 -req -in verificationCert.csr -CA ../ca/rootCA.pem -CAkey ../ca/rootCA.key -CAcreateserial -out verificationCert.pem -days 500 -sha256\n</code></pre>","tags":["openssl","tls","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/tls-cheatsheet/index.html#generating-device-cert","title":"Generating device cert","text":"<pre><code>openssl genrsa -out $DEVICE_NAME.key 2048 \nopenssl req -new -key $DEVICE_NAME.key -out $DEVICE_NAME.csr \nopenssl x509 -req -in $DEVICE_NAME.csr -CA ../../ca/rootCA.pem -CAkey ../../ca/rootCA.key -CAcreateserial -out $DEVICE_NAME.pem -days 500 -sha256\n</code></pre>","tags":["openssl","tls","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/tls-cheatsheet/index.html#checking-certificates","title":"Checking Certificates","text":"<code>#openssl</code> <code>#tls</code> <code>#cheatsheet</code> <code>#chatgpt</code>","tags":["openssl","tls","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/tls-cheatsheet/index.html#check-a-certificate-signing-request-csr","title":"Check a Certificate Signing Request (CSR)","text":"<p><code>openssl req -text -noout -verify -in CSR.csr</code></p>","tags":["openssl","tls","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/tls-cheatsheet/index.html#check-a-private-key","title":"Check a private key","text":"<p><code>openssl rsa -in privateKey.key -check</code></p>","tags":["openssl","tls","cheatsheet","chatgpt"]},{"location":"notes/cheatsheets/tls-cheatsheet/index.html#check-a-certificate","title":"Check a certificate","text":"<p><code>openssl x509 -in certificate.crt -text -noout</code> </p>","tags":["openssl","tls","cheatsheet","chatgpt"]},{"location":"notes/debug-probes/black-magic-probe/index.html","title":"Black Magic Probe","text":"","tags":["wip"]},{"location":"notes/debug-probes/black-magic-probe/index.html#black-magic-probe","title":"Black Magic Probe","text":"","tags":["wip"]},{"location":"notes/debug-probes/black-magic-probe/index.html#diy-probe","title":"DIY Probe","text":"","tags":["wip"]},{"location":"notes/debug-probes/black-magic-probe/index.html#compile-firmware","title":"Compile Firmware","text":"<pre><code>sudo apt-get install gcc-arm-none-eabi\ngit clone https://github.com/blacksphere/blackmagic.git\ncd blackmagic &amp;&amp; make -j4\ncd src &amp;&amp; make clean &amp;&amp; make PROBE_HOST=stlink\n</code></pre>","tags":["wip"]},{"location":"notes/debug-probes/black-magic-probe/index.html#program-stm32f103-board","title":"Program STM32F103 Board","text":"<p>\u2022 Install latest dfu-util: http://dfu-util.sourceforge.net/releases/</p> <pre><code>$ dfu-util.exe -d 0x1eaf:0x0003 -a 1 -D C:\\...\\AppData\\Local\\Temp\\arduino_...\\HelloWorld.ino.bin\n</code></pre>","tags":["wip"]},{"location":"notes/debug-probes/black-magic-probe/index.html#references","title":"References","text":"<ul> <li>Converting an STM32F103 board to a Black Magic Probe</li> <li>https://github.com/blacksphere/blackmagic/wiki</li> <li>https://github.com/blacksphere/blackmagic/wiki/Hacking</li> </ul> <code>#wip</code>","tags":["wip"]},{"location":"notes/debug-probes/segger-j-link/index.html","title":"Segger J-Link","text":"","tags":["wip"]},{"location":"notes/debug-probes/segger-j-link/index.html#segger-j-link","title":"Segger J-Link","text":"","tags":["wip"]},{"location":"notes/debug-probes/segger-j-link/index.html#j-link-base-v10","title":"J-Link BASE V10","text":"","tags":["wip"]},{"location":"notes/debug-probes/segger-j-link/index.html#pinout","title":"Pinout","text":"","tags":["wip"]},{"location":"notes/debug-probes/segger-j-link/index.html#supported-features","title":"Supported Features","text":"<ul> <li>link</li> </ul>","tags":["wip"]},{"location":"notes/debug-probes/segger-j-link/index.html#j-link-edu-mini-v1","title":"J-Link EDU Mini V1","text":"","tags":["wip"]},{"location":"notes/debug-probes/segger-j-link/index.html#supported-features_1","title":"Supported Features","text":"<ul> <li>link</li> </ul>","tags":["wip"]},{"location":"notes/debug-probes/segger-j-link/index.html#configuring-j-link-for-platformio","title":"Configuring J-Link For PlatformIO","text":"<p>Adafruit Feather M0 SWD Debugging</p> <ul> <li>Use UsbDriverTool to confirm native driver is installed:     </li> </ul> <p>\u2022 Update platformio.ini: </p><pre><code>debug_tool = jlink\ndebug_speed = 1200\n</code></pre> <p></p> <p>From https://docs.platformio.org/en/stable/plus/debug-tools/jlink.html </p> <p></p> <code>#wip</code>","tags":["wip"]},{"location":"notes/development-kits/adafruit-feather-m0-wifi/index.html","title":"Adafruit Feather M0 WiFi","text":"","tags":["wip"]},{"location":"notes/development-kits/adafruit-feather-m0-wifi/index.html#adafruit-feather-m0-wifi","title":"Adafruit Feather M0 WiFi","text":"","tags":["wip"]},{"location":"notes/development-kits/adafruit-feather-m0-wifi/index.html#pinout","title":"Pinout","text":"","tags":["wip"]},{"location":"notes/development-kits/adafruit-feather-m0-wifi/index.html#arduino-setup","title":"Arduino Setup","text":"<ol> <li>Add this URL to \"Additional Boards Manasger URLs\":  <ul> <li>https://adafruit.github.io/arduino-board-index/package_adafruit_index.json </li> </ul> </li> <li>Install \"Adafruit SAMD boards\" package </li> <li>Install \"Arduino SAMD Boards\" package - Reference</li> </ol> <p>Sketches using the WiFi101 Library Must Include The Following</p> <pre><code>WiFi.setPins(8,7,4,2);\n</code></pre>","tags":["wip"]},{"location":"notes/development-kits/adafruit-feather-m0-wifi/index.html#schematic","title":"Schematic","text":"","tags":["wip"]},{"location":"notes/development-kits/adafruit-feather-m0-wifi/index.html#links","title":"Links","text":"<ul> <li>User Manual</li> <li>User Manual (pdf) </li> </ul> <code>#wip</code>","tags":["wip"]},{"location":"notes/development-kits/esp32/index.html","title":"ESP32","text":"","tags":["uc","esp32","arduino"]},{"location":"notes/development-kits/esp32/index.html#esp32","title":"ESP32","text":"","tags":["uc","esp32","arduino"]},{"location":"notes/development-kits/esp32/index.html#helpful-links","title":"Helpful Links","text":"<ul> <li>ESP32 Pinout Reference</li> <li>Low-cost ESP32 In-circuit Debugging</li> </ul> ESP32 Pinout Reference","tags":["uc","esp32","arduino"]},{"location":"notes/development-kits/esp32/index.html#esp32-wroom32-module","title":"ESP32 WROOM32 Module","text":"","tags":["uc","esp32","arduino"]},{"location":"notes/development-kits/esp32/index.html#esp32-wroom","title":"ESP32-WROOM","text":"","tags":["uc","esp32","arduino"]},{"location":"notes/development-kits/esp32/index.html#pinout","title":"Pinout","text":"","tags":["uc","esp32","arduino"]},{"location":"notes/development-kits/esp32/index.html#loading-micropython","title":"Loading MicroPython","text":"<ol> <li>Download firmware from: https://micropython.org/download/esp32/</li> <li>Burn firmware using: https://adafruit.github.io/Adafruit_WebSerial_ESPTool/<ul> <li>Offset is 0x1000</li> </ul> </li> <li>Reset board and connect to serial port using Putty</li> <li>Type following:</li> </ol> <pre><code>from machine import Pin\nled = Pin(2, Pin.OUT)\nled.value(1)\n</code></pre> <p>Additional information: https://docs.micropython.org/en/latest/esp32/general.html</p>","tags":["uc","esp32","arduino"]},{"location":"notes/development-kits/esp32/index.html#esp32-cam","title":"ESP32-CAM","text":"","tags":["uc","esp32","arduino"]},{"location":"notes/development-kits/esp32/index.html#pinout_1","title":"Pinout","text":"","tags":["uc","esp32","arduino"]},{"location":"notes/development-kits/esp32/index.html#loading-micropython_1","title":"Loading MicroPython","text":"<ol> <li>Download firmware from: https://micropython.org/download/esp32/</li> <li>Erase flash completely</li> <li>Burn firmware using: https://adafruit.github.io/Adafruit_WebSerial_ESPTool/     \u25cb Offset is 0x1000</li> <li>Reset board and connect to serial port using Putty</li> <li>Type following: <pre><code>from machine import Pin\nled = Pin(4, Pin.OUT)\nled.value(1)\n</code></pre></li> </ol>","tags":["uc","esp32","arduino"]},{"location":"notes/development-kits/esp32/index.html#loading-circuitpython","title":"Loading CircuitPython","text":"<ol> <li>Download firmware from: https://circuitpython.org/board/espressif_esp32_eye/</li> <li>Erase flash completely</li> <li>Burn firmware using: https://adafruit.github.io/Adafruit_WebSerial_ESPTool/     \u25cb Offset is 0x0</li> <li>Reset board and connect to serial port using Putty</li> <li>Type following: <pre><code>from machine import Pin\nled = Pin(4, Pin.OUT)\nled.value(1)\n</code></pre></li> </ol>","tags":["uc","esp32","arduino"]},{"location":"notes/development-kits/esp32/index.html#developing-in-vscode","title":"Developing in VSCode","text":"<ul> <li>Set Anaconda prompt as default terminal: </li> </ul> <p>\u2022 mpremote mount . \u2022 Use 'execfile(\"filename.py\")' to run code</p> <p></p>","tags":["uc","esp32","arduino"]},{"location":"notes/development-kits/esp32/index.html#jtag-debugging","title":"JTAG Debugging","text":"","tags":["uc","esp32","arduino"]},{"location":"notes/development-kits/esp32/index.html#segger-j-link","title":"Segger J-Link","text":"<p>Note: See Segger J-Link for additional information.</p>","tags":["uc","esp32","arduino"]},{"location":"notes/development-kits/esp32/index.html#software-setup","title":"Software Setup","text":"<ol> <li>Download 'USB Driver Tool' from: https://visualgdb.com/UsbDriverTool/</li> <li>Change Jlink driver to WinUSB</li> <li></li> </ol>","tags":["uc","esp32","arduino"]},{"location":"notes/development-kits/esp32/index.html#wiring","title":"Wiring","text":"<p>Here's what it looks like when the J-Link is correctly connected: </p><pre><code>$ cd C:\\...\\.platformio\\packages\\tool-openocd-esp32\\bin&gt;\n$ openocd -f ..\\share\\openocd\\scripts\\interface\\jlink.cfg -f ..\\share\\openocd\\scripts\\target\\esp32.cfg -c \"adapter speed 1000\"\n</code></pre> <p></p>","tags":["uc","esp32","arduino"]},{"location":"notes/development-kits/esp32/index.html#arduino-esp32-library","title":"Arduino-ESP32 Library","text":"","tags":["uc","esp32","arduino"]},{"location":"notes/development-kits/esp32/index.html#setup","title":"Setup","text":"<ol> <li>Install VSCode extension: https://github.com/espressif/vscode-esp-idf-extension/blob/master/docs/tutorial/install.md</li> <li>Follow instructions from: Arduino as an ESP-IDF component</li> </ol>","tags":["uc","esp32","arduino"]},{"location":"notes/development-kits/esp32/index.html#command-line-snippets","title":"Command Line Snippets","text":"","tags":["uc","esp32","arduino"]},{"location":"notes/development-kits/esp32/index.html#openocd","title":"OpenOCD","text":"<pre><code># Setup\ncd C:\\...\\.platformio\\packages\\tool-openocd-esp32&gt;\nbin\\openocd -f share\\openocd\\scripts\\interface\\jlink.cfg -f share\\openocd\\scripts\\target\\esp32.cfg -c \"adapter speed 1000\"\n# Erasing Flash\n-c \"init; reset halt; flash erase_address 0x1000 4096000; exit\"\n# Programming Binary\n-c \"program c:\\\\...\\\\esp32-20220618-v1.19.1.bin 0x1000 verify exit\"\n</code></pre>","tags":["uc","esp32","arduino"]},{"location":"notes/development-kits/esp32/index.html#rshell","title":"RShell","text":"<p>In an Anaconda Prompt, type the following: <code>.local/bin/rshell -p /dev/ttyS5 -b 115200</code></p>","tags":["uc","esp32","arduino"]},{"location":"notes/development-kits/esp32/index.html#esptool","title":"ESPTool","text":"<p>\u2022 Flashing Firmware:  <code>esptool --chip esp32 --port /dev/ttyUSB0 write_flash -z 0x1000 esp32-idf3-20200902-v1.13.bin</code></p>","tags":["uc","esp32","arduino"]},{"location":"notes/development-kits/esp32/index.html#esp-idf","title":"ESP-IDF","text":"","tags":["uc","esp32","arduino"]},{"location":"notes/development-kits/esp32/index.html#examples","title":"Examples","text":"<ul> <li>ESP-IDF: Show Examples Projects</li> </ul>","tags":["uc","esp32","arduino"]},{"location":"notes/development-kits/esp32/index.html#console","title":"Console","text":"<p>ESP-IDF provides console component, which includes building blocks needed to develop an interactive console over serial port. This component includes following facilities:</p> <ul> <li>Line editing, provided by linenoise library. This includes handling of backspace and arrow keys, scrolling through command history, command auto-completion, and argument hints.</li> <li>Splitting of command line into arguments.</li> <li>Argument parsing, provided by argtable3 library. This library includes APIs used for parsing GNU style command line arguments.</li> <li>Functions for registration and dispatching of commands.</li> <li>Functions to establish a basic REPL (Read-Evaluate-Print-Loop) environment.</li> </ul> <p>From https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/system/console.html </p>","tags":["uc","esp32","arduino"]},{"location":"notes/development-kits/esp32/index.html#arduino-usage","title":"Arduino Usage","text":"<p>This Arduino library wraps the ESP-IDF console: https://github.com/jbtronics/ESP32Console</p> <p></p> <code>#uc</code> <code>#esp32</code> <code>#arduino</code>","tags":["uc","esp32","arduino"]},{"location":"notes/development-kits/raspberry-pi/index.html","title":"Raspberry Pi","text":"","tags":["wip"]},{"location":"notes/development-kits/raspberry-pi/index.html#raspberry-pi","title":"Raspberry Pi","text":"","tags":["wip"]},{"location":"notes/development-kits/raspberry-pi/index.html#jtag-notes","title":"JTAG Notes","text":"","tags":["wip"]},{"location":"notes/development-kits/raspberry-pi/index.html#connecting-an-nrf24l01-module","title":"Connecting an NRF24L01 Module","text":"","tags":["wip"]},{"location":"notes/development-kits/raspberry-pi/index.html#pins","title":"Pins","text":"","tags":["wip"]},{"location":"notes/development-kits/raspberry-pi/index.html#references","title":"References","text":"<ul> <li>https://github.com/VaclavSynacek/RF24SN</li> <li>https://github.com/VaclavSynacek/RF24SN_CPP_Server </li> </ul> <code>#wip</code>","tags":["wip"]},{"location":"notes/development-kits/esp8266/index.html","title":"Index","text":"","tags":["uc","esp8266"]},{"location":"notes/development-kits/esp8266/index.html#handy-links","title":"Handy Links","text":"<p>Self-updating OTA firmware for ESP8266</p> <p></p> <code>#uc</code> <code>#esp8266</code>","tags":["uc","esp8266"]},{"location":"notes/development-kits/esp8266/esp-01/index.html","title":"ESP-01","text":"","tags":["uc","esp8266"]},{"location":"notes/development-kits/esp8266/esp-01/index.html#esp-01","title":"ESP-01","text":"","tags":["uc","esp8266"]},{"location":"notes/development-kits/esp8266/esp-01/index.html#pinout","title":"Pinout","text":"","tags":["uc","esp8266"]},{"location":"notes/development-kits/esp8266/esp-01/index.html#connecting-a-dht11","title":"Connecting A DHT11","text":"","tags":["uc","esp8266"]},{"location":"notes/development-kits/esp8266/esp-01/index.html#links","title":"Links","text":"<ul> <li>DHT11 Manual</li> </ul> <code>#uc</code> <code>#esp8266</code>","tags":["uc","esp8266"]},{"location":"notes/development-kits/esp8266/wemos-mini/index.html","title":"Wemos Mini","text":"","tags":["uc","esp8266"]},{"location":"notes/development-kits/esp8266/wemos-mini/index.html#wemos-mini","title":"Wemos Mini","text":"","tags":["uc","esp8266"]},{"location":"notes/development-kits/esp8266/wemos-mini/index.html#flashing-micropython-on-wemos-mini","title":"Flashing MicroPython on Wemos Mini","text":"","tags":["uc","esp8266"]},{"location":"notes/development-kits/esp8266/wemos-mini/index.html#commands","title":"Commands","text":"<pre><code>pip install esptool\nesptool --port COM27 --baud 460800 write_flash --flash_size=detect -fm dio 0 esp8266-20171101-v1.9.3.bin\n\nwget https://raw.githubusercontent.com/micropython/micropython/master/drivers/sdcard/sdcard.py\npip install adafruit-ampy\nampy --port COM26 put sdcard.py\n</code></pre>","tags":["uc","esp8266"]},{"location":"notes/development-kits/esp8266/wemos-mini/index.html#notes","title":"Notes","text":"<ul> <li>Serial port uses 115200 baud</li> <li>Setup WebREPL by typing <code>import webrepl_setup</code></li> </ul>","tags":["uc","esp8266"]},{"location":"notes/development-kits/esp8266/wemos-mini/index.html#reference","title":"Reference","text":"<ul> <li>http://docs.micropython.org/en/latest/esp8266/esp8266/tutorial/intro.html#deploying-the-firmware </li> </ul> <code>#uc</code> <code>#esp8266</code>","tags":["uc","esp8266"]},{"location":"notes/development-kits/stm32/black-pill/index.html","title":"Black Pill","text":"","tags":["uc","stm32","arduino"]},{"location":"notes/development-kits/stm32/black-pill/index.html#black-pill","title":"Black Pill","text":"","tags":["uc","stm32","arduino"]},{"location":"notes/development-kits/stm32/black-pill/index.html#uploading-code","title":"Uploading Code","text":"<p>There are two ways to load code onto the board:     1. Upload via JTAG     2. Upload via DFU</p>","tags":["uc","stm32","arduino"]},{"location":"notes/development-kits/stm32/black-pill/index.html#example-uploading-via-jtag","title":"Example: Uploading via JTAG","text":"<p>In this example, we'll compile the Arduino Blink example and upload it via the JTAG port using Segger Ozone.</p> <ol> <li>Compile 'Blink' sketch:     </li> <li>Upload and debug using Segger Ozone:     </li> </ol>","tags":["uc","stm32","arduino"]},{"location":"notes/development-kits/stm32/black-pill/index.html#example-uploading-via-dfu","title":"Example: Uploading via DFU","text":"","tags":["uc","stm32","arduino"]},{"location":"notes/development-kits/stm32/black-pill/index.html#example-using-micropython","title":"Example: Using MicroPython","text":"<p>To flash the Micropython firmware, do the following: - git clone https://github.com/peddamat/micropython-stm32f407ve.git - ./build.sh - ./run.sh</p> <p>The firmware files should now be in the 'output' subdirectory.</p> <p></p> <p>Power on the board in \"DFU Mode\", and then upload the 'firmware.elf' file using STM32CubeProgrammer.</p> <p></p> <p>After burning the firmware, move the Boot bin back to normal and reboot the board.</p> <p>The board should now show up as a serial port and a disk drive:</p> <p> </p> <p>Connect to the REPL via Putty and type the following:</p> <pre><code>from machine import Pin\nled = Pin(\"PA6\", Pin.OUT)\nled.low()\n</code></pre>","tags":["uc","stm32","arduino"]},{"location":"notes/development-kits/stm32/black-pill/index.html#links","title":"Links","text":"<ul> <li>STM32F407ZGT6-STM32F4XX</li> </ul> <code>#uc</code> <code>#stm32</code> <code>#arduino</code>","tags":["uc","stm32","arduino"]},{"location":"notes/development-kits/stm32/itead-maple/index.html","title":"ITead Maple","text":"","tags":["uc","stm32","arduino"]},{"location":"notes/development-kits/stm32/itead-maple/index.html#itead-maple","title":"ITead Maple","text":"","tags":["uc","stm32","arduino"]},{"location":"notes/development-kits/stm32/itead-maple/index.html#overview","title":"Overview","text":"<p>This board uses the STM32F103RBT6 chip, which is a medium-density chip.  - Tip: Pressing the 'Reset' button and immediately pressing the 'Boot' button puts the board in 'Perpetual bootloader mode', which gives you more time to upload sketches.  - Pin 0 is Serial2 RX / Pin 1 is Serial2 TX</p>","tags":["uc","stm32","arduino"]},{"location":"notes/development-kits/stm32/itead-maple/index.html#arduino-setup","title":"Arduino Setup","text":"<ol> <li>Install board support:<ul> <li>Extract 'Arduino_STM32' folder to ~/Documents/Arduino/hardware:<ul> <li>https://github.com/rogerclarkmelbourne/Arduino_STM32/archive/refs/heads/master.zip</li> </ul> </li> <li>SUPER IMPORTANT: Run 'install_drivers.bat' in drivers/win subfolder.</li> <li>Install the Arduino SAM boards (Cortex-M3) from the list of available boards.</li> <li>Reference: : https://github.com/rogerclarkmelbourne/Arduino_STM32/wiki/Installation</li> </ul> </li> <li>Use \"Maple (Rev 3)\" board:     </li> </ol>","tags":["uc","stm32","arduino"]},{"location":"notes/development-kits/stm32/itead-maple/index.html#updating-bootloader","title":"Updating Bootloader","text":"<p>To use this board with Arduino, you need to do two things: 1. Install board support (see above section): 2. Install the STM32duino bootloader:      1. Get the maple_rev5_boot20.bin here      2. Burn using STLink or via a USB-to-Serial cable.          1. USB-to-Serial instructions          NOTE: The original Maple bootloader can be found here 3. After burning the bootloader, the board should be blinking slowly and should show up in 'Device Manager' under 'libusb-win32-devices' as 'Maple DFU':           4. Running dfu-util -l should display the following:       5. Upload 'Blink' Sketch: - In Arduino, open the 'Examples/01. Basics/Blink' sketch and change the LED Pins:       - Set the board configuration to 'Maple (Rev 3)'. - Compile the sketch. - Open a CMD window in <code>Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win</code> and run:     <code>dfu-util -a 1 -RD \"C:\\Users\\me\\AppData\\Local\\Temp\\arduino-sketch-1A9B53EE5A5605D73A1329F94E782A5F\\Blink.ino.bin\"</code></p> <p></p> <ul> <li>The sketch should upload and a new serial device should show up in \"Device Manager\":         </li> </ul>","tags":["uc","stm32","arduino"]},{"location":"notes/development-kits/stm32/itead-maple/index.html#using-stlink","title":"Using STLink","text":"<p>This board doesn't provide a SWD interface, however, section 2.3.24 of the STM32F103RBT6 datasheet mentions that the following pins are SWD pins:</p> <ul> <li>TMS -&gt; SWDIO</li> <li> <p>TCK -&gt; SWCLK</p> <p>2.3.24 Serial wire JTAG debug port (SWJ-DP)</p> <p>The Arm SWJ-DP Interface is embedded. and is a combined JTAG and serial wire debug port that enables either a serial wire debug or a JTAG probe to be connected to the target. The JTAG TMS and TCK pins are shared with SWDIO and SWCLK, respectively, and a specific sequence on the TMS pin is used to switch between JTAG-DP and SW-DP.\"</p> </li> </ul> <p>Before burning the bootloader, do a Target -&gt; Erase Chip.</p> <p></p> <code>#uc</code> <code>#stm32</code> <code>#arduino</code>","tags":["uc","stm32","arduino"]},{"location":"notes/development-kits/stm32/super-blue-pill/index.html","title":"Super Blue Pill","text":"","tags":["uc","stm32","arduino"]},{"location":"notes/development-kits/stm32/super-blue-pill/index.html#super-blue-pill","title":"Super Blue Pill","text":"","tags":["uc","stm32","arduino"]},{"location":"notes/development-kits/stm32/super-blue-pill/index.html#overview","title":"Overview","text":"<p>The board uses an STM32F103C8T6 in a LQFP48 package. The front UART1 pins are Serial1 in Arduino.</p>","tags":["uc","stm32","arduino"]},{"location":"notes/development-kits/stm32/super-blue-pill/index.html#uploading-code","title":"Uploading Code","text":"<pre><code>dfu-util -a 2 -RD \"C:\\...\\AppData\\Local\\Temp\\arduino-sketch-1A9B...\\Blink.ino.bin\"\n</code></pre>","tags":["uc","stm32","arduino"]},{"location":"notes/development-kits/stm32/super-blue-pill/index.html#burning-bootloader","title":"Burning Bootloader","text":"<p>For the board to work (properly) in Arduino, you need to burn the latest STM32duino bootloader, which can be found here:     \u2022 https://github.com/rogerclarkmelbourne/STM32duino-bootloader/tree/master/binaries     \u2022 The board uses the 'generic_boot20_pa1_button_pa8.bin' binary.</p> <p>See the 'Introduction to the STM32 Blue Pill' page under 'References' for instructions on how to update the bootloader.</p> <p></p>","tags":["uc","stm32","arduino"]},{"location":"notes/development-kits/stm32/super-blue-pill/index.html#uart-pins","title":"UART Pins","text":"","tags":["uc","stm32","arduino"]},{"location":"notes/development-kits/stm32/super-blue-pill/index.html#links","title":"Links","text":"<ul> <li>Introduction to the STM32 Blue Pill (STM32duino)</li> <li>STM32F103C8T6 Black Board </li> </ul> <code>#uc</code> <code>#stm32</code> <code>#arduino</code>","tags":["uc","stm32","arduino"]},{"location":"projects/index.html","title":"Projects","text":""},{"location":"projects/index.html#projects","title":"Projects","text":"<p>My online project lab notebook.</p> <p>{{ blog_content projects }}</p>"},{"location":"projects/apps/introducing-recon/index.html","title":"Introducing Recon","text":"<p>Need a schmancy, new GUI for Nmap? Got Leopard? Give Recon a try.</p> <p>Recon is open source. This means I want you to help me improve it. To help you get started, here\u2019s an overview of the Recon object model.</p> <p></p> <p>Fig. 1: Recon Object Graph</p> <p>The primary object controller is MyDocument (Recon started life as an Core Data Persistent Document. It\u2019s windowControllerDidLoadNib: is effectively your int main().</p> <p>MyDocument configures the Core Data persistent store, and instantiates a SessionManager object.</p> <p>Fig. 2: SessionManager Interaction Through Session Drawer</p> <p>The SessionManager (SM) object creates a SessionController queue and allows the user to Run/Abort/Delete SessionController objects residing in the queue.</p> <p></p> <p>Fig 3: SessionManager Queue Controllers</p> <p>After the user selects a profile and enters a target, they click the queueSession: button. The SessionManager then instantiates a new SessionController (SC) object and adds it to the queue.</p> <p>Upon instantiate, the SessionController, itself, instantiates an:</p> <ul> <li>ArgumentListGenerator, which converts the selected scan profile into a string of Nmap arguments flags.</li> <li>NmapController, which instantiates an NSTask with the user-specified nmap binary and argument string from above.</li> <li>XMLController, which parses the Nmap output XML file, and populates the Core Data Store with the results.</li> </ul> <p>The SC handles the sequence of events which invokes its three sub-controllers, and handles any errors that may occur.</p> <p>The SessionControllers sit dormant in the SM queue, waiting for a signal to actually perform the scan.</p> <p></p> <p>Fig 4: SessionManager processQueue:</p> <p>When the user chooses to process the session queue, the processQueue: method is envoked in the SessionManager. The SM iterates through the SessionController queue, executing a startScan: in FIFO fashion.</p> <p>Each SC tells its corresponding NmapController (NC) to startScan: and waits for a notification indicating that the NC\u2019s NSTask has returned. If the scan went well, a successfulRunNotification: is sent back to the appropriate SessionController.</p> <p>If an SC receives a successfulRunNotification:, it reads the nmap output file path from the NC returned in the [notification object]. This output file path is then passed to an XMLController, which parses the output and inserts the scan results into the Core Data Store.</p> <p>The SC then sends a successfulRunNotification: to the SessionManager, which dequeues the SessionController.</p> <p>The functional flow is fairly straightforward for other interaction cases.</p> <p></p> <p>Recon Core Data Object Model</p> <p>Recon\u2019s data model is stored using a Core Data Store.</p> <p>Check out the source code at: recon @ googlecode.com.</p> <p>  ![[Picture-8.jpg]]   ![[Growl.png]] </p> <code>#wip</code>","tags":["wip"]},{"location":"projects/apps/introducing-sensie/index.html","title":"Introducing Sensie","text":"","tags":["diy","iot"]},{"location":"projects/apps/introducing-sensie/index.html#introducing-sensie","title":"Introducing Sensie","text":"<p>The Sensie is a low-cost, Nordic NRF24-based wireless sensor board. For true sensor mass-acceptance, the price of sensor boards needs to be as low as possible. My target for this project was to hit a per-board total cost, including Nordic Module, of $7.</p> <p>The Sensie has the following features:</p> <ul> <li> <p>iPod-charger powerable</p> </li> <li> <p>Battery-powerable with JST PH-header</p> </li> <li> <p>USB serial console</p> </li> <li> <p>RTC for periodic sampling</p> </li> <li> <p>Easily-accessible sensor headers</p> </li> <li> <p>Ability to disable power to analog sensors</p> </li> <li> <p>External counter pin</p> </li> <li> <p>Drop-in BMP085 Barometer support</p> </li> <li> <p>Drop-in Bluetooth module support</p> </li> <li> <p>Fully wirelessly controllable sensors</p> </li> <li> <p>A Beaglebone-based management interface </p> </li> </ul> <code>#diy</code> <code>#iot</code>","tags":["diy","iot"]},{"location":"projects/apps/serialmoose-serial-port-sniffer/index.html","title":"SerialMoose Serial Port Sniffer","text":"","tags":["wip"]},{"location":"projects/apps/serialmoose-serial-port-sniffer/index.html#serialmoose-serial-port-sniffer","title":"SerialMoose Serial Port Sniffer","text":"","tags":["wip"]},{"location":"projects/apps/serialmoose-serial-port-sniffer/index.html#uart","title":"UART","text":"<p>A typical programming workflow is broken down into the sections provided below:</p> <ol> <li>Set Communication Parameters- Setting baud rate, data bits, stop bits, etc.</li> <li>Set Communication Pins- Assigning pins for connection to a device</li> <li>Install Drivers- Allocating ESP32\u2019s resources for the UART driver</li> <li>Run UART Communication- Sending/receiving data</li> <li>Use Interrupts- Triggering interrupts on specific communication events</li> <li>Deleting a Driver- Freeing allocated resources if a UART communication is no longer required</li> </ol> <p>Steps 1 to 3 comprise the configuration stage. Step 4 is where the UART starts operating. Steps 5 and 6 are optional.</p> <p>The UART driver\u2019s functions identify each of the UART controllers using <code>uart_port_t</code>. This identification is needed for all the following function calls. - source</p>","tags":["wip"]},{"location":"projects/apps/serialmoose-serial-port-sniffer/index.html#uart-async-tasks-example","title":"UART Async Tasks Example","text":"<p>This example demonstrates how two asynchronous tasks can use the same UART interface for communication. One can use this example to develop more complex applications for serial communication.</p> <p>The example starts two FreeRTOS tasks: 1. The first task periodically transmits Hello world via the UART. 2. The second task task listens, receives and prints data from the UART. - source</p>","tags":["wip"]},{"location":"projects/apps/serialmoose-serial-port-sniffer/index.html#code-excerpt","title":"Code Excerpt","text":"<pre><code>static void tx_task(void *arg)\n{\nstatic const char *TX_TASK_TAG = \"TX_TASK\";\nesp_log_level_set(TX_TASK_TAG, ESP_LOG_INFO);\nwhile (1) {\nsendData(TX_TASK_TAG, \"Hello world\");\nvTaskDelay(2000 / portTICK_PERIOD_MS);\n}\n}\nstatic void rx_task(void *arg)\n{\nstatic const char *RX_TASK_TAG = \"RX_TASK\";\nesp_log_level_set(RX_TASK_TAG, ESP_LOG_INFO);\nuint8_t* data = (uint8_t*) malloc(RX_BUF_SIZE+1);\nwhile (1) {\nconst int rxBytes = uart_read_bytes(UART_NUM_1, data, RX_BUF_SIZE, 1000 / portTICK_PERIOD_MS);\nif (rxBytes &gt; 0) {\ndata[rxBytes] = 0;\nESP_LOGI(RX_TASK_TAG, \"Read %d bytes: '%s'\", rxBytes, data);\nESP_LOG_BUFFER_HEXDUMP(RX_TASK_TAG, data, rxBytes, ESP_LOG_INFO);\n}\n}\nfree(data);\n}\nvoid app_main(void)\n{\ninit();\nxTaskCreate(rx_task, \"uart_rx_task\", 1024*2, NULL, configMAX_PRIORITIES, NULL);\nxTaskCreate(tx_task, \"uart_tx_task\", 1024*2, NULL, configMAX_PRIORITIES-1, NULL);\n}\n</code></pre>","tags":["wip"]},{"location":"projects/apps/serialmoose-serial-port-sniffer/index.html#example-output","title":"Example Output","text":"<pre><code>...\nI (3261) TX_TASK: Wrote 11 bytes\nI (4261) RX_TASK: Read 11 bytes: 'Hello world'\nI (4261) RX_TASK: 0x3ffb821c   48 65 6c 6c 6f 20 77 6f  72 6c 64                 |Hello world|\n...\n</code></pre>","tags":["wip"]},{"location":"projects/apps/serialmoose-serial-port-sniffer/index.html#console-output-formatting","title":"Console Output Formatting","text":"<p>ESP-IDF provides the ESP_LOG_BUFFER_HEXDUMP() routine which formats an array thusly:</p> <p></p><pre><code> W (195) log_example: 0x3ffb4280   45 53 50 33 32 20 69 73  20 67 72 65 61 74 2c 20  |ESP32 is great, |\n W (195) log_example: 0x3ffb4290   77 6f 72 6b 69 6e 67 20  61 6c 6f 6e 67 20 77 69  |working along wi|\n W (205) log_example: 0x3ffb42a0   74 68 20 74 68 65 20 49  44 46 2e 00              |th the IDF..|\n</code></pre> - ESP_LOG_BUFFER_HEXDUMP()","tags":["wip"]},{"location":"projects/apps/serialmoose-serial-port-sniffer/index.html#references","title":"References","text":"<p>\u2022 UART Events Example \u2022 UART Async Tasks Example \u2022 FreeRTOS API \u2022 Event Loop Library</p>","tags":["wip"]},{"location":"projects/apps/serialmoose-serial-port-sniffer/index.html#baud-rate-identification","title":"Baud Rate Identification","text":"<p>Serial UART communication looks something like this:</p> <p></p> <p>A \"Start Bit\" followed by data bits, a parity, and a stop bit.  The \"baud\" rate of a channel can be determined by measuring the pulse width of the start bit and inverting it, as shown below.</p> <p></p>","tags":["wip"]},{"location":"projects/apps/serialmoose-serial-port-sniffer/index.html#pulse-width-measurement","title":"Pulse Width Measurement","text":"<p>Pulse width can be measured by using the \"Input Capture\" functionality found on many microcontrollers, generally part of their \"Timer\" subsystem.</p> <p>On the ST32Fx microcontrollers, a \"PWM Input\" mode exists.</p>","tags":["wip"]},{"location":"projects/apps/serialmoose-serial-port-sniffer/index.html#general-purpose-timers","title":"General Purpose Timers","text":"<p>The STM32Fx has four general purpose timers: TIMER2, TIMER3, TIMER4, and TIMER5.</p> <p>The block diagram for an individual timer is shown below, meaning the entire block diagram is replicated for each general purpose timer.</p> <p></p>","tags":["wip"]},{"location":"projects/apps/serialmoose-serial-port-sniffer/index.html#pwm-input-capture-mode","title":"PWM Input Capture Mode","text":"<p>Section \"15.3.6 PWM input mode\" of RM0008 describes a special input capture mode specifically designed for measure pulse widths of input signals.</p> <p>Adapting the documentation for Timer 2 using channel 1 and channel 2:</p> <ul> <li>TIM2_CH1 (Timer 2 channel 1) samples the external signal, generating TI1</li> <li>TIM2_CH2 (Timer 2 channel 2) is connected internally to TI1</li> </ul> <p>This mode is a particular case of input capture mode. The procedure is the same except:</p> <ul> <li>Two ICx signals (IC1 &amp; IC2) are mapped on the same Tix (TI1) input.</li> <li>These 2 ICx signals are active on edges with opposite polarity.</li> <li>One of the two TIxFP (TI1FP) signals is selected as trigger input and the slave mode controller is configured in reset mode.</li> </ul> <p>For example, the user can measure the period (in TIM2_CCR1 register) and the duty cycle (in TIM2_CCR2 register) of the PWM applied on TI1 using the following procedure (depending on CK_INT frequency and prescaler value):</p> <ul> <li>Select the active input for TIMx_CCR1 (TIM2_CCR1): write the CC1S bits to 01 in the TIMx_CCMR1 (TIM2_CCMR1)register (TI1 selected).</li> <li>Select the active polarity for TI1FP1 (used both for capture in TIMx_CCR1 (TIM2_CCR1) and counter clear): write the CC1P to \u20180\u2019 (active on rising edge) in TIM2_CCER.</li> <li>Select the active input for TIMx_CCR2 (TIM2_CCR2): write the CC2S bits to 10 in the TIMx_CCMR1 (TIM2_CCMR1) register (TI1 selected).</li> <li>Select the active polarity for TI1FP2 (used for capture in TIMx_CCR2 (TIM2_CCR2)): write the CC2P bit to \u20181\u2019 (active on falling edge).</li> <li>Select the valid trigger input: write the TS bits to 101 in the TIMx_SMCR (TIM2_SMCR) register (TI1FP1 selected).</li> <li>Configure the slave mode controller in reset mode: write the SMS bits to 100 in the TIMx_SMCR (TIM2_SMCR) register.</li> <li>Enable the captures: write the CC1E and CC2E bits to \u20181 in the TIMx_CCER (TIM2_CCER) register.</li> </ul>","tags":["wip"]},{"location":"projects/apps/serialmoose-serial-port-sniffer/index.html#tim2_ccmr1","title":"TIM2_CCMR1","text":"","tags":["wip"]},{"location":"projects/apps/serialmoose-serial-port-sniffer/index.html#tim2_ccer","title":"TIM2_CCER","text":"","tags":["wip"]},{"location":"projects/apps/serialmoose-serial-port-sniffer/index.html#tim2_smcr","title":"TIM2_SMCR","text":"","tags":["wip"]},{"location":"projects/apps/serialmoose-serial-port-sniffer/index.html#tim2_ccmr2","title":"TIM2_CCMR2","text":"","tags":["wip"]},{"location":"projects/apps/serialmoose-serial-port-sniffer/index.html#references_1","title":"References","text":"<ol> <li>https://support.saleae.com/protocol-analyzers/analyzer-user-guides/using-async-serial</li> <li>RM0008: https://www.st.com/resource/en/reference_manual/cd00171190-stm32f101xx-stm32f102xx-stm32f103xx-stm32f105xx-and-stm32f107xx-advanced-arm-based-32-bit-mcus-stmicroelectronics.pdf</li> </ol> <code>#wip</code>","tags":["wip"]},{"location":"projects/apps/calibresync/calibresync-development-notes/index.html","title":"CalibreSync Development Notes","text":"<p>CalibreSync is an iOS extension which allows you to browse your Calibre library from the Files application on your iPhone and iPad.</p>","tags":["ios","swift"]},{"location":"projects/apps/calibresync/calibresync-development-notes/index.html#development-environment-setup","title":"Development Environment Setup","text":"","tags":["ios","swift"]},{"location":"projects/apps/calibresync/calibresync-development-notes/index.html#install-cocoapods","title":"Install Cocoapods","text":"<p>Follow Cocoapod installation instructions here: Ruby Cheatsheet</p>","tags":["ios","swift"]},{"location":"projects/apps/calibresync/calibresync-development-notes/index.html#build-project","title":"Build Project","text":"<pre><code># Checkout codebase\ngit clone git@github.com:peddamat/CalibreSync3.git CalibreSync\n\n# Install deps\npod install\n\n# Open workspace\nopen CalibreSync3.xcworkspace\n</code></pre> <p>Hit <code>CMD+B</code> to build the project.</p>","tags":["ios","swift"]},{"location":"projects/apps/calibresync/calibresync-development-notes/index.html#components","title":"Components","text":"<p>The extension consists of three parts:</p> <ul> <li>CalibreSync<ul> <li>The main application allows users to configure CalibreSync by selecting one of the following:<ul> <li>URL for Calibre feed </li> <li>Location of Calibre database</li> </ul> </li> </ul> </li> <li>CalibreSyncExtension<ul> <li>The extension does the following:<ul> <li>Adds 'CalibreSync' to the Locations menu in the Files app</li> </ul> </li> </ul> </li> <li>CalibreSyncExtensionUI<ul> <li>Displays the downloaded Calibre library in the Files app</li> </ul> </li> </ul>","tags":["ios","swift"]},{"location":"projects/apps/calibresync/calibresync-development-notes/index.html#features","title":"Features","text":"<ul> <li>Download and load Calibre database<ul> <li>Mount SMB fileshare</li> <li>Locate metadata.db</li> <li>Parse metadata.db using SQLite</li> <li>Cache metadata.db for offline usage</li> </ul> </li> <li>Display book covers from Calibre database<ul> <li>Download and cache covers for offline usage</li> </ul> </li> <li>Download books from Calibre database</li> <li>Edit book metadata<ul> <li>Resync metadata with SMB database</li> </ul> </li> <li>Create Book model</li> <li>Create BookList view</li> <li>Create BookDetail view</li> <li>Create button to load Fileshare</li> </ul>","tags":["ios","swift"]},{"location":"projects/apps/calibresync/calibresync-development-notes/index.html#architecture","title":"Architecture","text":"","tags":["ios","swift"]},{"location":"projects/apps/calibresync/calibresync-development-notes/index.html#how-books-are-loaded-from-calibre-library","title":"How books are loaded from Calibre Library","text":"<ul> <li>The user selects the directory containing the Calibre Database<ul> <li>Check for existence of metadata.db in the root of this directory </li> <li>Load Calibre database from metadata.db</li> </ul> </li> <li>The 'Books' table contains the following relevant fields:<ul> <li>id</li> <li>title</li> <li>pubdate</li> <li>author_sort</li> <li>path</li> <li>has_cover</li> </ul> </li> <li>The 'Data' table contains the available formats for each book in the 'Books' table, and contains the following relevant fields:<ul> <li>name</li> </ul> </li> <li>The detailed metadata associated with each book is contained in the metadata.opf XML file stored in each Book's 'path'</li> </ul>","tags":["ios","swift"]},{"location":"projects/apps/calibresync/calibresync-development-notes/index.html#next-steps","title":"Next Steps","text":"<ul> <li>Copy example Calibre database to project and load book entries<ul> <li>Create Record stubs for Calibre book entries</li> <li>Load Calibre database and print out all book titles</li> </ul> </li> <li>Display book covers in waterfall grid</li> <li>Load Calibre database from file share</li> <li>Load .epub from fileshare</li> <li>Refactor CalibreSync v1 code to allow loading of Calibre Database from fileshare</li> <li>Implement infinite scrolling to load subsequent books in grid view</li> <li>Implement book cover caching</li> <li>Implement GRDB Scope Adapters to allow retrieving both the full database and initial set of books for main screen<ul> <li>https://github.com/groue/GRDB.swift#scopeadapter</li> </ul> </li> <li>Implement download folder scanning</li> <li>Implement PDFExpert-like SMB connection workflow</li> </ul>","tags":["ios","swift"]},{"location":"projects/apps/calibresync/calibresync-development-notes/index.html#references","title":"References","text":"<ul> <li>Using UIKit DocumentPicker for selecting Calibre Database: <ul> <li>https://gist.github.com/richo/61f308f5e4ba1fe7eefb8035aaa7817a</li> <li>https://github.com/developer-shubham101/iOS-Examples</li> <li>file:////Users/me/Documents/Source/iOS/ThirdParty/iOS-Examples</li> </ul> </li> <li>Display modal for DocumentPicker<ul> <li>https://dev.to/maeganwilson_/how-to-present-and-dismiss-a-modal-in-swiftui-155c</li> </ul> </li> <li>Interfacing with UIViewControllers from SwiftUI:<ul> <li>https://developer.apple.com/tutorials/swiftui/interfacing-with-uikit</li> <li>https://medium.com/@Johannes_Nevels/presenting-uiviewcontrollers-in-swiftui-22388616a24c</li> <li>https://developer.apple.com/videos/play/wwdc2019/231/</li> <li>https://developer.apple.com/tutorials/swiftui/interfacing-with-uikit</li> </ul> </li> <li>Supporting filtering for .db files:<ul> <li>https://stackoverflow.com/questions/44766527/ios-custom-uti-in-uidocumentpickerviewcontroller-initwithdocumenttypes</li> </ul> </li> <li>Allowing books to be accessible via Files app:<ul> <li>https://www.raywenderlich.com/697468-ios-file-provider-extension-tutorial</li> </ul> </li> <li>Sharing data between applications and extensions:<ul> <li>https://dmtopolog.com/ios-app-extensions-data-sharing/</li> </ul> </li> <li>Displaying books in grid:<ul> <li>https://github.com/paololeonardi/WaterfallGrid<ul> <li>file:///Users/me/Documents/Source/iOS/ThirdParty/WaterfallGrid</li> </ul> </li> <li>https://github.com/SwiftUIExtensions/Grid<ul> <li>file:///Users/me/Documents/Source/iOS/ThirdParty/Grid</li> </ul> </li> </ul> </li> <li>Saving setting via UserDefaults:<ul> <li>https://github.com/frnkwk/SwiftUI-SettingsView-Sample</li> </ul> </li> <li>Pull to refresh:<ul> <li>https://swiftui-lab.com/scrollview-pull-to-refresh/</li> <li>https://github.com/AppPear/SwiftUI-PullToRefresh</li> </ul> </li> <li>Share sheet:<ul> <li>https://github.com/AlanQuatermain/SwiftUIShareSheetDemo</li> <li>https://forums.developer.apple.com/thread/123951</li> <li>https://medium.com/if-let-swift-programming/managing-files-in-ios-dfcdfdc1f426</li> </ul> </li> <li>Loading images from file:/// URLs<ul> <li>https://medium.com/@shankarmadeshvaran/how-to-load-a-image-from-url-in-swiftui-59f870f9b3f7</li> </ul> </li> <li>Infinite scrolling<ul> <li>https://github.com/EphraimNetWorks/SwiftUIInfiniteScrollingTutorial/tree/master/InfiniteScrollTutorial </li> </ul> </li> <li>Onboarding screen / workflow<ul> <li>https://www.blckbirds.com/post/how-to-create-a-onboarding-screen-in-swiftui-1</li> </ul> </li> <li>Slide-out Menu<ul> <li>https://www.blckbirds.com/post/side-menu-hamburger-menu-in-swiftui</li> <li>https://github.com/BLCKBIRDS/Side-Menu--Hamburger-Menu--in-SwiftUI</li> </ul> </li> <li>Search bar<ul> <li>https://stackoverflow.com/questions/56490963/how-to-display-a-search-bar-with-swiftui</li> <li>https://medium.com/better-programming/implement-searchbar-in-swiftui-556a204e1970</li> </ul> </li> <li>Fuzzy Search<ul> <li>https://github.com/khoi/fuzzy-swift</li> <li>https://github.com/krisk/fuse-swift</li> </ul> </li> </ul>","tags":["ios","swift"]},{"location":"projects/apps/calibresync/calibresync-development-notes/index.html#testing","title":"Testing","text":"<ul> <li>https://www.swiftbysundell.com/articles/getting-started-with-xcode-ui-testing-in-swift/</li> </ul>","tags":["ios","swift"]},{"location":"projects/apps/calibresync/calibresync-development-notes/index.html#architecture_1","title":"Architecture","text":"<ul> <li>https://nalexn.github.io/clean-architecture-swiftui/<ul> <li>https://github.com/nalexn/clean-architecture-swiftui</li> </ul> </li> <li>https://medium.com/flawless-app-stories</li> </ul>","tags":["ios","swift"]},{"location":"projects/apps/calibresync/calibresync-development-notes/index.html#database","title":"Database","text":"<ul> <li>https://medium.com/@gwendal.roue/how-to-build-an-ios-application-with-sqlite-and-grdb-swift-d023a06c29b3</li> <li>https://github.com/groue/GRDB.swift/tree/master/Documentation/DemoApps/GRDBDemoiOS/GRDBDemoiOS</li> </ul>","tags":["ios","swift"]},{"location":"projects/apps/calibresync/calibresync-development-notes/index.html#uncategorized","title":"Uncategorized","text":"<ul> <li>https://github.com/Juanpe/About-SwiftUI</li> <li>https://medium.com/flawless-app-stories/a-swifty-way-to-pick-documents-59cad1988a8a</li> </ul>","tags":["ios","swift"]},{"location":"projects/apps/calibresync/calibresync-development-notes/index.html#todo","title":"Todo","text":"<ul> <li>Watch https://developer.apple.com/videos/play/wwdc2019/719/</li> <li>Fix TabView / NavigationView crash:<ul> <li>https://stackoverflow.com/questions/58404725/why-does-my-swiftui-app-crash-when-navigating-backwards-after-placing-a-navigat/58737171#58737171</li> <li>https://forums.developer.apple.com/thread/124757 </li> </ul> </li> </ul> <code>#ios</code> <code>#swift</code>","tags":["ios","swift"]},{"location":"projects/cancer-research/generating-complete-genomics-build37-files/index.html","title":"Generating Complete Genomics build37 Files","text":"<p>As part of the TARGET AML Data Analysis project I was working on to support my wife's research, I found myself analyzing Complete Genomics produced gene sequences.</p> <p>As the sequences were produced in the early 2010's, CGI did not provide a complete set of .vcf files.</p> <p>Creating .vcf files from the provided input requires using the <code>cgatools mkvcf</code> command.</p> <p>At the time of development, the CGI reference sequences hosted on ftp.completegenomics.com were unaccessible, therefore, the required inputs for <code>cgatools mkvcf</code> needed to be created using the process described in the CGAtools 1.8 User Guide (pages 16-18).</p> <p>The <code>cgatools</code> documentation mentions two mythical files, <code>build37.crr</code> and <code>build37.fa</code>, required to utilize the tool.  The provided documentation advices retrieving the files from an FTP site which no longer exists.</p> <p>Therefore, I had to figure out how to generate these files myself.</p> <p>The fruits of this effort are the following repositories:</p> <ul> <li>peddamat/cgatools-build37-crr </li> <li>peddamat/cgatools-build37-fa</li> </ul>","tags":["analysis","cancer"]},{"location":"projects/cancer-research/generating-complete-genomics-build37-files/index.html#build37crr","title":"build37.crr","text":"<p>This Dockerfile automatically generates a <code>build37.crr</code> reference file to support analyzing Complete Genomics Incorporated (CGI) sequencing data.</p> <p>The generated <code>build37.crr</code> matches the CGI reference <code>build37.crr</code> file:</p> <pre><code>&gt; cgatools listcrr --reference ref/build37.crr\nChromosomeId Chromosome    Length Circular Md5\n   0       chr1 249250621    false 1b22b98cdeb4a9304cb5d48026a85128\n   1       chr2 243199373    false a0d9851da00400dec1098a9255ac712e\n   2       chr3 198022430    false 641e4338fa8d52a5b781bd2a2c08d3c3\n   3       chr4 191154276    false 23dccd106897542ad87d2765d28a19a1\n   4       chr5 180915260    false 0740173db9ffd264d728f32784845cd7\n   5       chr6 171115067    false 1d3a93a248d92a729ee764823acbbc6b\n   6       chr7 159138663    false 618366e953d6aaad97dbe4777c29375e\n   7       chr8 146364022    false 96f514a9929e410c6651697bded59aec\n   8       chr9 141213431    false 3e273117f15e0a400f01055d9f393768\n   9      chr10 135534747    false 988c28e000e84c26d552359af1ea2e1d\n  10      chr11 135006516    false 98c59049a2df285c76ffb1c6db8f8b96\n  11      chr12 133851895    false 51851ac0e1a115847ad36449b0015864\n  12      chr13 115169878    false 283f8d7892baa81b510a015719ca7b0b\n  13      chr14 107349540    false 98f3cae32b2a2e9524bc19813927542e\n  14      chr15 102531392    false e5645a794a8238215b2cd77acb95a078\n  15      chr16  90354753    false fc9b1a7b42b97a864f56b348b06095e6\n  16      chr17  81195210    false 351f64d4f4f9ddd45b35336ad97aa6de\n  17      chr18  78077248    false b15d4b2d29dde9d3e4f93d1d0f2cbc9c\n  18      chr19  59128983    false 1aacd71f30db8e561810913e0b72636d\n  19      chr20  63025520    false 0dec9660ec1efaaf33281c0d5ea2560f\n  20      chr21  48129895    false 2979a6085bfe28e3ad6f552f361ed74d\n  21      chr22  51304566    false a718acaa6135fdca8357d5bfe94211dd\n  22       chrX 155270560    false 7e0e2e580297b7764e31dbc80c2540dd\n  23       chrY  59373566    false 1e86411d73e6f00a10590f976be01623\n  24       chrM     16569     true c68f52674c9fb33aef52dcf399755519\n</code></pre> <p> - CGA Tools User Guide 1.8</p>","tags":["analysis","cancer"]},{"location":"projects/cancer-research/generating-complete-genomics-build37-files/index.html#usage","title":"Usage","text":"","tags":["analysis","cancer"]},{"location":"projects/cancer-research/generating-complete-genomics-build37-files/index.html#build","title":"Build","text":"<p>The build process automatically creates <code>ref/build37.crr</code> and <code>ref/build37.crr.md5</code> file.</p> <pre><code>./build.sh\n</code></pre>","tags":["analysis","cancer"]},{"location":"projects/cancer-research/generating-complete-genomics-build37-files/index.html#run","title":"Run","text":"<pre><code>./run.sh\n\n# Confirm the generated build37.crr file matches the CGI reference file\ncgatools listcrr --reference ref/build37.crr\n\n# Copy the generated build37.crr out of the container\ncp ref/build37.crr output/\n</code></pre> <code>#analysis</code> <code>#cancer</code>","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html","title":"TARGET AML Data Analysis","text":"<p>The Therapeutically Applicable Research to Generate Effective Treatments (TARGET) program applies a comprehensive genomic approach to determine molecular changes that drive childhood cancers. The goal of the program is to use data to guide the development of effective, less toxic therapies. TARGET is organized into a collaborative network of disease-specific project teams.</p>","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#target-aml-overview","title":"TARGET AML Overview","text":"<p>The TARGET Acute Myeloid Leukemia (AML) projects elucidate comprehensive molecular characterization to determine the genetic changes that drive the initiation and progression of high-risk or hard-to-treat childhood cancers. Acute myeloid leukemia (AML) is a cancer that originates in the bone marrow from immature white blood cells known as myeloblasts. About 25% of all children with leukemia have AML.</p> <p>TARGET investigators are analyzing tumors from pediatric patients, many who have relapsed, to identify biomarkers that correlate with poor clinical outcome and/or new therapeutic approaches to treat childhood AML. The tissues used in this study were collected from patients enrolled in Children's Oncology Group (COG) biology studies and clinical trials.</p> <p>The AML project team members (like other TARGET researchers) are generating data in two phases: Discovery and Validation.</p>","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#research-methodology","title":"Research Methodology","text":"<p>TARGET researchers utilized various sequencing and array-based methods to examine the genomes, transcriptomes, and for some diseases epigenomes of select childhood cancers. This \u201cmulti-omic\u201d approach generated comprehensive profiles of molecular alterations for each cancer type. Alterations are changes in DNA or RNA, such as rearrangements in chromosome structure or variations in gene expression, respectively. Through computational analyses and assays to validate biological function, TARGET researchers predict which alterations disrupt the function of a gene or pathway and promote cancer growth, progression, and/or survival. Researchers identify candidate therapeutic targets and/or prognostic markers from the cancer-associated alterations.</p> <p>To learn about individual sequencing and array-based methods used in TARGET research, visit Methods below.</p>","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#discovery","title":"Discovery","text":"<p>TARGET project teams have characterized \u201cdiscovery\u201d cohorts of patient cases to identify molecular alterations of the transcriptome, genome, and epigenome in various pediatric cancer subtypes. Each project team independently selected their patient cohorts based upon characteristics of the disease or cancer subtype. A comprehensive genomic profile of each patient case was generated using nucleic acids from tumor tissue taken at the time of diagnosis and case-matched \u201cnormal\u201d tissue. Whenever available, case-matched tissues from relapsed or treatment-resistant tumors were also characterized by the same methods.* Robust clinical data were obtained for each case studied in TARGET. All tissues used meet strict scientific, technical, and ethical requirements.</p>","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#verification","title":"Verification","text":"<p>TARGET project teams employed multiple technologies to confirm the presence of mutations found in tumor tissue. The use of diverse sequencing approaches (e.g. mRNA-seq, whole exome or whole genome sequencing) to analyze discovery samples provided confirmation of somatic mutation(s) observed in a patient case and affirmed the quality of each data type generated. Individual project teams also analyzed a subset of their discovery cases using the method(s) employed for validation*.</p>","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#validation","title":"Validation","text":"<p>TARGET project teams used a separate sequencing method applied to an independent cohort of patients to validate at the gene level most candidate mutations found in the TARGET discovery data. Validation confirmed the population prevalence of mutations. Within each disease, characterizing a separate cohort more broadly representative of the disease population further allowed the project teams to estimate the frequency of somatic variants in a given cancer subtype.</p>","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#experimental-methodology","title":"Experimental Methodology","text":"<p>Each project team employed a large subset of the methods below. Visit the TARGET Project Experimental Methods page for detailed protocols and to learn which methods apply for each individual project.</p>","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#genome-scale-characterization","title":"Genome-scale Characterization","text":"<ul> <li>Gene expression profiling: determines patterns of all genes transcribed</li> <li>Copy number analysis: determines structural changes of chromosomes, such as copy number alterations (chromosome region gains and losses) including the loss of heterozygosity and translocations</li> <li>DNA methylation status: determines patterns of DNA (cytosine) methylation on chromosomes</li> <li>miRNA profiling: determines expression patterns of small regulatory molecules called microRNAs (miRNAs)</li> </ul>","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#sequencing","title":"Sequencing","text":"","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#sanger-method","title":"Sanger Method","text":"<ul> <li>Targeted Sequencing: DNA sequencing of specific genes or areas of the genome<ul> <li>Kinome Sequencing: DNA sequencing of genes encoding kinases</li> </ul> </li> </ul>","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#next-generation-method","title":"Next-generation Method","text":"<ul> <li>Whole Genome Sequencing: provides the DNA sequence of the genome</li> <li>Whole Exome Sequencing: provides DNA sequences of exons</li> <li>Transcriptome Sequencing (RNA-seq): provides sequences from transcribed RNAs<ul> <li>mRNA Sequencing (mRNA-seq): generates sequences of messenger RNAs (mRNAs)</li> <li>miRNA Sequencing (miRNA-seq): generates sequences of small RNA molecules, such as microRNAs(miRNAs)</li> </ul> </li> <li>Bisulfite sequencing: identifies pattern of methylation of individual cytosines in DNA within a defined area of the genome (i.e. epigenome)</li> <li>ChIP sequencing: identifies protein interactions with DNA of the genome</li> </ul>","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#detailed-methodology","title":"Detailed Methodology","text":"<ul> <li>TARGET Project Experimental Methods</li> </ul>","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#target-dataset","title":"TARGET Dataset","text":"","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#overview","title":"Overview","text":"<p>The TARGET Data Matrix contains a summary of all the datasets associated with each of the TARGET project, including the TARGET AML project.</p>","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#data-types","title":"Data Types","text":"<p>The TARGET program outputs consist of two overall types of datasets:  Patient Clinical Data and Patient Sample Data</p>","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#patient-clinical-data","title":"Patient Clinical Data","text":"<p>Patient clinical data, which include patient demographics, can be found: - target-data.nci.nih.gov/Public/AML/clinical/harmonized/ [Google Drive Mirror]</p>","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#patient-sample-data","title":"Patient Sample Data","text":"<p>The TARGET AML project was broken into two phases, Discovery and Validation, which constitute two distinct datasets.  Summaries of the data outputs of each phase are documented in the below samples matrices: - TARGET_AML_SampleMatrix_Discovery_20190807 - TARGET_AML_SampleMatrix_Validation_20180914</p>","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#patient-clinical-data_1","title":"Patient Clinical Data","text":"<ul> <li>TARGET_AML_CDE_20181213: Contains column metadata</li> <li>TARGET_AML_ClinicalData_AML1031_20190802: Patient clinical information</li> <li>...</li> </ul>","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#patient-sample-data_1","title":"Patient Sample Data","text":"<p>Patient sample data is located in three locations: - TARGET Public Website - Globus Connect - Genomic Data Commons Data (GDC) Portal</p>","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#overall-dataset-information","title":"Overall Dataset Information","text":"<ul> <li>https://portal.gdc.cancer.gov/projects?filters={\"op\"%3A\"and\"%2C\"content\"%3A[{\"op\"%3A\"in\"%2C\"content\"%3A{\"field\"%3A\"projects.program.name\"%2C\"value\"%3A[\"TARGET\"]}}]}</li> </ul>","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#target-dataset-analysis","title":"TARGET Dataset Analysis","text":"","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#directories","title":"Directories","text":"","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#naming-convention","title":"Naming Convention","text":"<p>In general, data stored at the DCC is organized within directories that correspond to the types of analysis, levels of data, and the names of centers that submitted a particular type of data when there are multiple data-submitting centers.</p> <ul> <li>Raw or low-level data files (level 1)</li> <li>Normalized and integrated data (levels 2 and 3)</li> <li>Summarized findings (level 4)</li> </ul>","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#structure","title":"Structure","text":"<pre><code>\u251c\u2500\u2500 WGS (Whole Genome Sequence)\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 CGI (Complete Genomics Inc)\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 OptionAnalysisPipeline2\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 PilotAnalysisPipeline2\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 READMEs\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 RequestedReports\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 L3 (Level 3 Analysis)\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 mutation\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 BCCA (British Columbia Cancer Agency)\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 CGI (Complete Genomics Inc)\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Analysis\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 FullMafsVcfs\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 SomaticFilteredMafs\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 TAWG-StJude\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0     \u2514\u2500\u2500 CandidateSomatic\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 structural\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 BCCA (British Columbia Cancer Agency)\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 CGI (Complete Genomics Inc)\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 StJude\n</code></pre> <p> Figure 1: Example of a TARGET Project's download directory structure.</p>","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#references","title":"References","text":"<ul> <li>OCG Newsletter 2018</li> </ul>","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#files","title":"Files","text":"","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#naming-convention_1","title":"Naming Convention","text":"","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#file-format-information","title":"File Format Information","text":"","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#wgs-files","title":"WGS Files","text":"<p>The Whole Genome Sequence (WGS) data was created by Complete Genomics Incorporated (CGI) and is delivered as a package, which is detailed here.</p> <p>The packages are accessible on Globus, in the <code>/AML/WGS/CGI/</code> directory.</p> <p>Alternatively,</p>","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#vcf-files","title":"VCF Files","text":"","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#tsv-files","title":"TSV Files","text":"<ul> <li>https://stjudecloud.github.io/docs/guides/proteinpaint/file-formats/sv-and-fusion/</li> <li>https://pecan.stjude.cloud/about</li> </ul>","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#references_1","title":"References","text":"<ul> <li>TARGET Naming Conventions</li> </ul>","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#activities","title":"Activities","text":"","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#initial-data-summary","title":"Initial Data Summary","text":"<pre><code># Summary of filetypes: \nfind . -type f | perl -ne 'print $1 if m/\\.([^.\\/]+)$/' | sort | uniq -c | tee AML-filetypes-summary.lst\n\n# List all filenames: \nfind . -type f -exec basename {} \\; | sort | tee AML-files-sorted.lst </code></pre>","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#dataset-sizing","title":"Dataset Sizing","text":"<ul> <li>https://groups.google.com/a/globus.org/g/archive-user-discuss/c/SWmHaxEB_v0 <pre><code># 1. List data on an endpoint\nglobus ls -Fjson ddb59aef-6d04-11e5-ba46-22000b92c6ec\n\n# 2. Filter the results to files only, no directories.\n#  The Transfer API supports more advanced filtering, but the CLI's\n#  `--filter` option only does filtering by name. So we'll use\n#  jmespath to do the filtering client-side.\nglobus ls ddb59aef-6d04-11e5-ba46-22000b92c6ec --jmespath 'DATA[?type==`file`]'\n# 3. Collect file sizes and convert the jmespath output to \"unix\" format\nglobus ls ddb59aef-6d04-11e5-ba46-22000b92c6ec --jmespath 'DATA[?type==`file`].size' --format unix\n\n# 4. Sum the values (add `--recursive` to get a recursive listing)\nglobus ls ddb59aef-6d04-11e5-ba46-22000b92c6ec --jmespath 'DATA[?type==`file`].size' --format unix | tr '\\t' '\\n' | awk '{sum+=$1}END{print sum}'\n</code></pre></li> </ul>","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#summarizing-vcfs","title":"Summarizing VCFs","text":"<ul> <li>https://samtools.github.io/bcftools/howtos/query.html</li> </ul> <pre><code># List samples\nbcftools query -l file.bcf\n\n# Number of samples\nbcftools query -l file.bcf | wc -l\n\n#List of positions\nbcftools query -f '%POS\\n' file.bcf\n</code></pre>","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#tagging","title":"Tagging","text":"<p>VCFs will be tagged with the following annotations: - clinVar - Cosmic - exAC/genomAD? - HGMD? - refGene - icgc28</p>","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#references_2","title":"References","text":"<ul> <li>https://ocg.cancer.gov/news-publications/e-newsletter-issue/issue-20#2602</li> <li>TARGET Project Website</li> <li>TARGET AML Project Website</li> <li>https://ocg.cancer.gov/data/data-access</li> </ul>","tags":["analysis","cancer"]},{"location":"projects/cancer-research/target-aml-data-analysis/index.html#reference-papers","title":"Reference Papers","text":"<ul> <li>https://jamanetwork.com/journals/jamaoncology/fullarticle/2762589</li> </ul> <code>#analysis</code> <code>#cancer</code>","tags":["analysis","cancer"]},{"location":"projects/home-assistant/my-smart-home-devices/index.html","title":"My Smart Home Devices","text":"","tags":["wip","iot","home assistant"]},{"location":"projects/home-assistant/my-smart-home-devices/index.html#my-smart-home-devices","title":"My Smart Home Devices","text":"<p>A place for me to keep notes on the devices I have integrated into Home Assistant.</p>","tags":["wip","iot","home assistant"]},{"location":"projects/home-assistant/my-smart-home-devices/index.html#wifi-light-switches","title":"WiFi Light Switches","text":"","tags":["wip","iot","home assistant"]},{"location":"projects/home-assistant/my-smart-home-devices/index.html#treatlife-ds01","title":"Treatlife DS01","text":"","tags":["wip","iot","home assistant"]},{"location":"projects/home-assistant/my-smart-home-devices/index.html#treatlife-ds02-wb3s","title":"Treatlife DS02 (WB3S)","text":"<p>The switch uses the Tuya WB3S module: </p> <p>WB3S is a low-power embedded Wi-Fi+Bluetooth LE Dual protocol module that Tuya has developed. It consists of a highly integrated RF chip (BK7231T) and several peripheral components, with an embedded Wi-Fi network protocol stack and robust library functions. - source</p>","tags":["wip","iot","home assistant"]},{"location":"projects/home-assistant/my-smart-home-devices/index.html#firmware","title":"Firmware","text":"<p>There are two projects creating replacement firmware for the module:</p> <ul> <li>LibreTuya: https://github.com/kuba2k2/libretuya<ul> <li>Documentation: https://docs.libretuya.ml/</li> </ul> </li> <li>OpenBK: https://github.com/openshwprojects/OpenBK7231T_App</li> </ul>","tags":["wip","iot","home assistant"]},{"location":"projects/home-assistant/my-smart-home-devices/index.html#teardown","title":"Teardown","text":"","tags":["wip","iot","home assistant"]},{"location":"projects/home-assistant/my-smart-home-devices/index.html#switches","title":"Switches","text":"","tags":["wip","iot","home assistant"]},{"location":"projects/home-assistant/my-smart-home-devices/index.html#switchbot-mini","title":"Switchbot Mini","text":"<p>The Switchbot Mini power monitoring switches (W1901400) that I purchased are currently flashed with Tasmota.  I'd like to get them working with ESPHome.</p>","tags":["wip","iot","home assistant"]},{"location":"projects/home-assistant/my-smart-home-devices/index.html#debugging-logs","title":"Debugging Logs","text":"Tasmota boot log <pre><code>[18:43:42]ESP-ROM:esp32c3-api1-20210207\n[18:43:42]Build:Feb  7 2021\n[18:43:42]rst:0x3 (RTC_SW_SYS_RST),boot:0xf (SPI_FAST_FLASH_BOOT)\n[18:43:42]Saved PC:0x40382e2c\n[18:43:42]SPIWP:0xee\n[18:43:42]mode:DIO, clock div:1\n[18:43:42]load:0x3fcd5810,len:0x48\n[18:43:42]load:0x403cc710,len:0x64c\n[18:43:42]load:0x403ce710,len:0x216c\n[18:43:42]SHA-256 comparison failed:\n[18:43:42]Calculated: e0d75ff7e0926df9f88222e5bdef5d235358e8deede65e96e9b562dc3b033d94\n[18:43:42]Expected: ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n[18:43:42]Attempting to boot anyway...\n[18:43:42]entry 0x403cc710\n[18:43:42]\n[18:43:42]00:00:00.000 HDW: ESP32-C3 \n[18:43:42]00:00:00.004 UFS: FlashFS mounted with 308 kB free\n[18:43:42]00:00:00.012 CFG: Loaded from File, Count 7\n[18:43:42]00:00:00.017 QPC: Count 1\n[18:43:42]00:00:00.049 BRY: Berry initialized, RAM used=4521 bytes\n[18:43:42]00:00:00.058 Project tasmota - Tasmota Version 12.2.0(tasmota)-2_0_5(2022-10-17T08:39:53)\n[18:43:42]00:00:00.578 WIF: Connecting to AP1 mtconifer-iot Channel 6 BSSId 72:A7:41:10:6D:52 in mode 11n as tasmota-316744-1860...\n[18:43:45]00:00:03.044 WIF: Connected\n[18:43:45]00:00:03.300 HTP: Web server active on tasmota-316744-1860 with IP address 172.16.3.164\n[18:43:52]00:00:10.099 RSL: INFO1 = {\"Info1\":{\"Module\":\"ESP32C3\",\"Version\":\"12.2.0(tasmota)\",\"FallbackTopic\":\"cmnd/DVES_316744_fb/\",\"GroupTopic\":\"cmnd/tasmotas/\"}}\n[18:43:52]00:00:10.111 RSL: INFO2 = {\"Info2\":{\"WebServerMode\":\"Admin\",\"Hostname\":\"tasmota-316744-1860\",\"IPAddress\":\"172.16.3.164\"}}\n[18:43:52]00:00:10.123 RSL: INFO3 = {\"Info3\":{\"RestartReason\":\"Software reset digital core\",\"BootCount\":4}}\n</code></pre> Fuses <pre><code>coniferhome-esphome on \ue0a0 main [\u21d5!?] via \ud83c\udd52 base\n[I] \u279c espefuse.py -p /dev/cu.usbserial-0001 summary\nConnecting....\nDetecting chip type... ESP32-C3\nespefuse.py v3.3.1\n\n=== Run \"summary\" command ===\nEFUSE_NAME (Block) Description  = [Meaningful Value] [Readable/Writeable] (Hex Value)\n----------------------------------------------------------------------------------------\nConfig fuses:\nDIS_ICACHE (BLOCK0)                                Disables ICache                                    = False R/W (0b0)\nDIS_DOWNLOAD_ICACHE (BLOCK0)                       Disables Icache when SoC is in Download mode       = False R/W (0b0)\nDIS_FORCE_DOWNLOAD (BLOCK0)                        Disables forcing chip into Download mode           = False R/W (0b0)\nDIS_CAN (BLOCK0)                                   Disables the TWAI Controller hardware              = False R/W (0b0)\nVDD_SPI_AS_GPIO (BLOCK0)                           Set this bit to vdd spi pin function as gpio       = False R/W (0b0)\nBTLC_GPIO_ENABLE (BLOCK0)                          Enable btlc gpio                                   = 0 R/W (0b00)\nPOWERGLITCH_EN (BLOCK0)                            Set this bit to enable power glitch function       = False R/W (0b0)\nPOWER_GLITCH_DSENSE (BLOCK0)                       Sample delay configuration of power glitch         = 0 R/W (0b00)\nDIS_LEGACY_SPI_BOOT (BLOCK0)                       Disables Legacy SPI boot mode                      = False R/W (0b0)\nUART_PRINT_CHANNEL (BLOCK0)                        Selects the default UART for printing boot msg     = UART0 R/W (0b0)\nUART_PRINT_CONTROL (BLOCK0)                        Sets the default UART boot message output mode     = Enabled R/W (0b00)\nFORCE_SEND_RESUME (BLOCK0)                         Force ROM code to send a resume command during SPI = False R/W (0b0)\n                                                    bootduring SPI boot\nBLOCK_USR_DATA (BLOCK3)                            User data\n   = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 R/W\n\nEfuse fuses:\nWR_DIS (BLOCK0)                                    Disables programming of individual eFuses          = 0 R/W (0x00000000)\nRD_DIS (BLOCK0)                                    Disables software reading from BLOCK4-10           = 0 R/W (0b0000000)\n\nFlash Config fuses:\nFLASH_TPUW (BLOCK0)                                Configures flash startup delay after SoC power-up, = 0 R/W (0x0)\n                                                    unit is (ms/2). When the value is 15, delay is 7.\n                                                   5 ms\n\nIdentity fuses:\nSECURE_VERSION (BLOCK0)                            Secure version (used by ESP-IDF anti-rollback feat = 0 R/W (0x0000)\n                                                   ure)\nMAC (BLOCK1)                                       Factory MAC Address\n   = a0:76:4e:31:67:44 (OK) R/W\nWAFER_VERSION (BLOCK1)                             WAFER version                                      = 3 R/W (0b011)\nPKG_VERSION (BLOCK1)                               Package version                                    = ESP32-C3 R/W (0b000)\nBLOCK1_VERSION (BLOCK1)                            BLOCK1 efuse version                               = 4 R/W (0b100)\nOPTIONAL_UNIQUE_ID (BLOCK2)                        Optional unique 128-bit ID\n   = e5 0b 40 a2 c7 ed 29 50 6d 9e 1a 5f d2 a4 bd 9f R/W\nBLOCK2_VERSION (BLOCK2)                            Version of BLOCK2                                  = 5 R/W (0b101)\nCUSTOM_MAC (BLOCK3)                                Custom MAC Address\n   = 00:00:00:00:00:00 (OK) R/W\n\nJtag Config fuses:\nSOFT_DIS_JTAG (BLOCK0)                             Software disables JTAG. When software disabled, JT = 0 R/W (0b000)\n                                                   AG can be activated temporarily by HMAC peripheral\nDIS_PAD_JTAG (BLOCK0)                              Permanently disable JTAG access via pads. USB JTAG = False R/W (0b0)\n                                                    is controlled separately.\n\nSecurity fuses:\nDIS_DOWNLOAD_MANUAL_ENCRYPT (BLOCK0)               Disables flash encryption when in download boot mo = False R/W (0b0)\n                                                   des\nSPI_BOOT_CRYPT_CNT (BLOCK0)                        Enables encryption and decryption, when an SPI boo = Disable R/W (0b000)\n                                                   t mode is set. Enabled when 1 or 3 bits are set,di\n                                                   sabled otherwise\nSECURE_BOOT_KEY_REVOKE0 (BLOCK0)                   If set, revokes use of secure boot key digest 0    = False R/W (0b0)\nSECURE_BOOT_KEY_REVOKE1 (BLOCK0)                   If set, revokes use of secure boot key digest 1    = False R/W (0b0)\nSECURE_BOOT_KEY_REVOKE2 (BLOCK0)                   If set, revokes use of secure boot key digest 2    = False R/W (0b0)\nKEY_PURPOSE_0 (BLOCK0)                             KEY0 purpose                                       = USER R/W (0x0)\nKEY_PURPOSE_1 (BLOCK0)                             KEY1 purpose                                       = USER R/W (0x0)\nKEY_PURPOSE_2 (BLOCK0)                             KEY2 purpose                                       = USER R/W (0x0)\nKEY_PURPOSE_3 (BLOCK0)                             KEY3 purpose                                       = USER R/W (0x0)\nKEY_PURPOSE_4 (BLOCK0)                             KEY4 purpose                                       = USER R/W (0x0)\nKEY_PURPOSE_5 (BLOCK0)                             KEY5 purpose                                       = USER R/W (0x0)\nSECURE_BOOT_EN (BLOCK0)                            Enables secure boot                                = False R/W (0b0)\nSECURE_BOOT_AGGRESSIVE_REVOKE (BLOCK0)             Enables aggressive secure boot key revocation mode = False R/W (0b0)\nDIS_DOWNLOAD_MODE (BLOCK0)                         Disables all Download boot modes                   = False R/W (0b0)\nENABLE_SECURITY_DOWNLOAD (BLOCK0)                  Enables secure UART download mode (read/write flas = False R/W (0b0)\n                                                   h only)\nBLOCK_KEY0 (BLOCK4)\n  Purpose: USER\n               Encryption key0 or user data\n   = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 R/W\nBLOCK_KEY1 (BLOCK5)\n  Purpose: USER\n               Encryption key1 or user data\n   = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 R/W\nBLOCK_KEY2 (BLOCK6)\n  Purpose: USER\n               Encryption key2 or user data\n   = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 R/W\nBLOCK_KEY3 (BLOCK7)\n  Purpose: USER\n               Encryption key3 or user data\n   = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 R/W\nBLOCK_KEY4 (BLOCK8)\n  Purpose: USER\n               Encryption key4 or user data\n   = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 R/W\nBLOCK_KEY5 (BLOCK9)\n  Purpose: USER\n               Encryption key5 or user data\n   = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 R/W\nBLOCK_SYS_DATA2 (BLOCK10)                          System data (part 2)\n   = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 R/W\n\nSpi_Pad_Config fuses:\nSPI_PAD_CONFIG_CLK (BLOCK1)                        SPI CLK pad                                        = 0 R/W (0b000000)\nSPI_PAD_CONFIG_Q (BLOCK1)                          SPI Q (D1) pad                                     = 0 R/W (0b000000)\nSPI_PAD_CONFIG_D (BLOCK1)                          SPI D (D0) pad                                     = 0 R/W (0b000000)\nSPI_PAD_CONFIG_CS (BLOCK1)                         SPI CS pad                                         = 0 R/W (0b000000)\nSPI_PAD_CONFIG_HD (BLOCK1)                         SPI HD (D3) pad                                    = 0 R/W (0b000000)\nSPI_PAD_CONFIG_WP (BLOCK1)                         SPI WP (D2) pad                                    = 0 R/W (0b000000)\nSPI_PAD_CONFIG_DQS (BLOCK1)                        SPI DQS pad                                        = 0 R/W (0b000000)\nSPI_PAD_CONFIG_D4 (BLOCK1)                         SPI D4 pad                                         = 0 R/W (0b000000)\nSPI_PAD_CONFIG_D5 (BLOCK1)                         SPI D5 pad                                         = 0 R/W (0b000000)\nSPI_PAD_CONFIG_D6 (BLOCK1)                         SPI D6 pad                                         = 0 R/W (0b000000)\nSPI_PAD_CONFIG_D7 (BLOCK1)                         SPI D7 pad                                         = 0 R/W (0b000000)\n\nUsb Config fuses:\nDIS_USB_JTAG (BLOCK0)                              Disables USB JTAG. JTAG access via pads is control = False R/W (0b0)\n                                                   led separately\nDIS_USB_DEVICE (BLOCK0)                            Disables USB DEVICE                                = False R/W (0b0)\nUSB_EXCHG_PINS (BLOCK0)                            Exchanges USB D+ and D- pins                       = False R/W (0b0)\nDIS_USB_DOWNLOAD_MODE (BLOCK0)                     Disables use of USB in UART download boot mode     = False R/W (0b0)\n\nWdt Config fuses:\nWDT_DELAY_SEL (BLOCK0)                             Selects RTC WDT timeout threshold at startup       = False R/W (0b0)\n</code></pre> ESPHome Boot Log <p>``` [I] \u279c esptool.py --chip esp32c3 --baud 921600 --before default_reset --after hard_reset write_flash -z --flash_mode dout --flash_size detect 0x0 build/kitchen-fridge-outlet/.pioenvs/kitchen-fridge-outlet/firmware.bin esptool.py v3.3.1 Found 3 serial ports Serial port /dev/cu.usbserial-0001 Connecting... Chip is ESP32-C3 (revision 3) Features: Wi-Fi Crystal is 40MHz MAC: a0:76:4e:31:67:44 Uploading stub... Running stub... Stub running... Changing baud rate to 921600 Changed. Configuring flash size... Auto-detected Flash size: 4MB Flash will be erased from 0x00000000 to 0x000c0fff... Flash params set to 0x032f Compressed 786832 bytes to 463199... Wrote 786832 bytes (463199 compressed) at 0x00000000 in 12.1 seconds (effective 519.8 kbit/s)... Hash of data verified.</p> <pre><code>Leaving...\nHard resetting via RTS pin...\n[10:27:01]ESP-ROM:esp32c3-api1-20210207\n[10:27:01]Build:Feb  7 2021\n[10:27:01]rst:0x10 (RTCWDT_RTC_RST),boot:0xf (SPI_FAST_FLASH_BOOT)\n[10:27:01]SPIWP:0xee\n[10:27:01]mode:DOUT, clock div:1\n[10:27:01]load:0x3c0a0020,len:0x1da70\n[10:27:01]load:0x3fc8de00,len:0x2580\n[10:27:01]load:0x42000020,len:0x91668\n[10:27:01]load:0x3fc90380,len:0xd10\n[10:27:01]load:0x40380000,len:0xdda8\n[10:27:01]load:0x50000000,len:0x10\n[10:27:01]SHA-256 comparison failed:\n[10:27:02]Calculated: e159e39a79c819ff4e2d3877a9127907c0315d0dd5156f4b9d846052ca549fa6\n[10:27:02]Expected: 16e0a551ee1cfc3ca0f4f55c7bc36a7289273a42a43c798cd454f972eed7f0da\n[10:27:02]Attempting to boot anyway...\n[10:27:02]entry 0x40380ae6\n```\n</code></pre> Fuses <pre><code>[I] \u279c espefuse.py -p /dev/cu.usbserial-0001 summary\nConnecting....\nDetecting chip type... ESP32-C3\nespefuse.py v3.3.1\n\n=== Run \"summary\" command ===\nEFUSE_NAME (Block) Description  = [Meaningful Value] [Readable/Writeable] (Hex Value)\n----------------------------------------------------------------------------------------\nConfig fuses:\nDIS_ICACHE (BLOCK0)                                Disables ICache                                    = False R/W (0b0)\nDIS_DOWNLOAD_ICACHE (BLOCK0)                       Disables Icache when SoC is in Download mode       = False R/W (0b0)\nDIS_FORCE_DOWNLOAD (BLOCK0)                        Disables forcing chip into Download mode           = False R/W (0b0)\nDIS_CAN (BLOCK0)                                   Disables the TWAI Controller hardware              = False R/W (0b0)\nVDD_SPI_AS_GPIO (BLOCK0)                           Set this bit to vdd spi pin function as gpio       = False R/W (0b0)\nBTLC_GPIO_ENABLE (BLOCK0)                          Enable btlc gpio                                   = 0 R/W (0b00)\nPOWERGLITCH_EN (BLOCK0)                            Set this bit to enable power glitch function       = False R/W (0b0)\nPOWER_GLITCH_DSENSE (BLOCK0)                       Sample delay configuration of power glitch         = 0 R/W (0b00)\nDIS_LEGACY_SPI_BOOT (BLOCK0)                       Disables Legacy SPI boot mode                      = False R/W (0b0)\nUART_PRINT_CHANNEL (BLOCK0)                        Selects the default UART for printing boot msg     = UART0 R/W (0b0)\nUART_PRINT_CONTROL (BLOCK0)                        Sets the default UART boot message output mode     = Enabled R/W (0b00)\nFORCE_SEND_RESUME (BLOCK0)                         Force ROM code to send a resume command during SPI = False R/W (0b0)\n                                                    bootduring SPI boot\nBLOCK_USR_DATA (BLOCK3)                            User data\n   = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 R/W\n\nEfuse fuses:\nWR_DIS (BLOCK0)                                    Disables programming of individual eFuses          = 0 R/W (0x00000000)\nRD_DIS (BLOCK0)                                    Disables software reading from BLOCK4-10           = 0 R/W (0b0000000)\n\nFlash Config fuses:\nFLASH_TPUW (BLOCK0)                                Configures flash startup delay after SoC power-up, = 0 R/W (0x0)\n                                                    unit is (ms/2). When the value is 15, delay is 7.\n                                                   5 ms\n\nIdentity fuses:\nSECURE_VERSION (BLOCK0)                            Secure version (used by ESP-IDF anti-rollback feat = 0 R/W (0x0000)\n                                                   ure)\nMAC (BLOCK1)                                       Factory MAC Address\n   = a0:76:4e:31:67:44 (OK) R/W\nWAFER_VERSION (BLOCK1)                             WAFER version                                      = 3 R/W (0b011)\nPKG_VERSION (BLOCK1)                               Package version                                    = ESP32-C3 R/W (0b000)\nBLOCK1_VERSION (BLOCK1)                            BLOCK1 efuse version                               = 4 R/W (0b100)\nOPTIONAL_UNIQUE_ID (BLOCK2)                        Optional unique 128-bit ID\n   = e5 0b 40 a2 c7 ed 29 50 6d 9e 1a 5f d2 a4 bd 9f R/W\nBLOCK2_VERSION (BLOCK2)                            Version of BLOCK2                                  = 5 R/W (0b101)\nCUSTOM_MAC (BLOCK3)                                Custom MAC Address\n   = 00:00:00:00:00:00 (OK) R/W\n\nJtag Config fuses:\nSOFT_DIS_JTAG (BLOCK0)                             Software disables JTAG. When software disabled, JT = 0 R/W (0b000)\n                                                   AG can be activated temporarily by HMAC peripheral\nDIS_PAD_JTAG (BLOCK0)                              Permanently disable JTAG access via pads. USB JTAG = False R/W (0b0)\n                                                    is controlled separately.\n\nSecurity fuses:\nDIS_DOWNLOAD_MANUAL_ENCRYPT (BLOCK0)               Disables flash encryption when in download boot mo = False R/W (0b0)\n                                                   des\nSPI_BOOT_CRYPT_CNT (BLOCK0)                        Enables encryption and decryption, when an SPI boo = Disable R/W (0b000)\n                                                   t mode is set. Enabled when 1 or 3 bits are set,di\n                                                   sabled otherwise\nSECURE_BOOT_KEY_REVOKE0 (BLOCK0)                   If set, revokes use of secure boot key digest 0    = False R/W (0b0)\nSECURE_BOOT_KEY_REVOKE1 (BLOCK0)                   If set, revokes use of secure boot key digest 1    = False R/W (0b0)\nSECURE_BOOT_KEY_REVOKE2 (BLOCK0)                   If set, revokes use of secure boot key digest 2    = False R/W (0b0)\nKEY_PURPOSE_0 (BLOCK0)                             KEY0 purpose                                       = USER R/W (0x0)\nKEY_PURPOSE_1 (BLOCK0)                             KEY1 purpose                                       = USER R/W (0x0)\nKEY_PURPOSE_2 (BLOCK0)                             KEY2 purpose                                       = USER R/W (0x0)\nKEY_PURPOSE_3 (BLOCK0)                             KEY3 purpose                                       = USER R/W (0x0)\nKEY_PURPOSE_4 (BLOCK0)                             KEY4 purpose                                       = USER R/W (0x0)\nKEY_PURPOSE_5 (BLOCK0)                             KEY5 purpose                                       = USER R/W (0x0)\nSECURE_BOOT_EN (BLOCK0)                            Enables secure boot                                = False R/W (0b0)\nSECURE_BOOT_AGGRESSIVE_REVOKE (BLOCK0)             Enables aggressive secure boot key revocation mode = False R/W (0b0)\nDIS_DOWNLOAD_MODE (BLOCK0)                         Disables all Download boot modes                   = False R/W (0b0)\nENABLE_SECURITY_DOWNLOAD (BLOCK0)                  Enables secure UART download mode (read/write flas = False R/W (0b0)\n                                                   h only)\nBLOCK_KEY0 (BLOCK4)\n  Purpose: USER\n               Encryption key0 or user data\n   = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 R/W\nBLOCK_KEY1 (BLOCK5)\n  Purpose: USER\n               Encryption key1 or user data\n   = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 R/W\nBLOCK_KEY2 (BLOCK6)\n  Purpose: USER\n               Encryption key2 or user data\n   = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 R/W\nBLOCK_KEY3 (BLOCK7)\n  Purpose: USER\n               Encryption key3 or user data\n   = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 R/W\nBLOCK_KEY4 (BLOCK8)\n  Purpose: USER\n               Encryption key4 or user data\n   = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 R/W\nBLOCK_KEY5 (BLOCK9)\n  Purpose: USER\n               Encryption key5 or user data\n   = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 R/W\nBLOCK_SYS_DATA2 (BLOCK10)                          System data (part 2)\n   = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 R/W\n\nSpi_Pad_Config fuses:\nSPI_PAD_CONFIG_CLK (BLOCK1)                        SPI CLK pad                                        = 0 R/W (0b000000)\nSPI_PAD_CONFIG_Q (BLOCK1)                          SPI Q (D1) pad                                     = 0 R/W (0b000000)\nSPI_PAD_CONFIG_D (BLOCK1)                          SPI D (D0) pad                                     = 0 R/W (0b000000)\nSPI_PAD_CONFIG_CS (BLOCK1)                         SPI CS pad                                         = 0 R/W (0b000000)\nSPI_PAD_CONFIG_HD (BLOCK1)                         SPI HD (D3) pad                                    = 0 R/W (0b000000)\nSPI_PAD_CONFIG_WP (BLOCK1)                         SPI WP (D2) pad                                    = 0 R/W (0b000000)\nSPI_PAD_CONFIG_DQS (BLOCK1)                        SPI DQS pad                                        = 0 R/W (0b000000)\nSPI_PAD_CONFIG_D4 (BLOCK1)                         SPI D4 pad                                         = 0 R/W (0b000000)\nSPI_PAD_CONFIG_D5 (BLOCK1)                         SPI D5 pad                                         = 0 R/W (0b000000)\nSPI_PAD_CONFIG_D6 (BLOCK1)                         SPI D6 pad                                         = 0 R/W (0b000000)\nSPI_PAD_CONFIG_D7 (BLOCK1)                         SPI D7 pad                                         = 0 R/W (0b000000)\n\nUsb Config fuses:\nDIS_USB_JTAG (BLOCK0)                              Disables USB JTAG. JTAG access via pads is control = False R/W (0b0)\n                                                   led separately\nDIS_USB_DEVICE (BLOCK0)                            Disables USB DEVICE                                = False R/W (0b0)\nUSB_EXCHG_PINS (BLOCK0)                            Exchanges USB D+ and D- pins                       = False R/W (0b0)\nDIS_USB_DOWNLOAD_MODE (BLOCK0)                     Disables use of USB in UART download boot mode     = False R/W (0b0)\n\nWdt Config fuses:\nWDT_DELAY_SEL (BLOCK0)                             Selects RTC WDT timeout threshold at startup       = False R/W (0b0)\n</code></pre>","tags":["wip","iot","home assistant"]},{"location":"projects/home-assistant/my-smart-home-devices/index.html#reference","title":"Reference","text":"<ul> <li>https://github.com/kendallgoto/switchbota</li> <li>https://community.home-assistant.io/t/support-for-switchbot-plug-mini-w1901400-with-bluetooth-proxying/441893</li> </ul>","tags":["wip","iot","home assistant"]},{"location":"projects/home-assistant/my-smart-home-devices/index.html#localtuya","title":"localtuya","text":"<ul> <li>Support updating MCU firmware</li> <li>Support setting dimmer lower range to 1%</li> </ul>","tags":["wip","iot","home assistant"]},{"location":"projects/home-assistant/my-smart-home-devices/index.html#pykasa","title":"pykasa","text":"<ul> <li>Support PIR and LAS modules</li> </ul>","tags":["wip","iot","home assistant"]},{"location":"projects/home-assistant/my-smart-home-devices/index.html#serial-dump","title":"Serial dump","text":"","tags":["wip","iot","home assistant"]},{"location":"projects/home-assistant/my-smart-home-devices/index.html#ceiling-fan-switch","title":"Ceiling Fan Switch","text":"<ul> <li>https://developer.tuya.com/en/docs/iot/tuya-cloud-universal-serial-port-access-protocol?id=K9hhi0xxtn9cb#title-12-Send%20commands</li> </ul> <pre><code>Field   Bytes   Description\nHeader  2   0x55aa\nVersion 1   0x00\nCommand 1   0x06\nData length 2   Depends on the type and number of data units.\nData    N   Data units\nChecksum    1   Start from the header, add up all the bytes, and then divide the sum by 256 to get the remainder.\n\n55aa 00 06 0008 69 02 00 04 00 00 00 5a d6\n55aa 00 06 0008 69 02 00 04 00 00 00 5d d9\n55aa 00 00 0000 ff\n55aa 00 06 0008 69 02 00 04 00 00 00 34 b0\n55aa 00 06 0008 69 02 00 04 00 00 00 2b a7\n55aa 00 06 0008 69 02 00 04 00 00 00 22 9e\n55aa 00 06 0008 69 02 00 04 00 00 00 16 92\n55aa 00 06 0008 69 02 00 04 00 00 00 0b 87\n55aa 00 06 0008 69 02 00 04 00 00 00 0a 86\n55aa 00 06 0008 69 02 00 04 00 00 00 0a 86\n55aa 00 06 0005 6a 04 00 01 01 7a\n\ndpid: 69\ntype: Value (4-bytes)\nlen: 4 bytes\nvalue: 0x0a (10) \n\n55AA 03 07 0008 02 02 00 04 00 00 00 0A 23\n\n# https://templates.blakadder.com/treatlife_DS02S.html\n# Dimming mode 1\n55AA 00 06 0005 04 04 00 01 00 13\n</code></pre> <code>#wip</code> <code>#iot</code> <code>#home assistant</code>","tags":["wip","iot","home assistant"]},{"location":"projects/home-assistant/samsung-refrigerator-integration/index.html","title":"Samsung Refrigerator Integration","text":"","tags":["wip"]},{"location":"projects/home-assistant/samsung-refrigerator-integration/index.html#samsung-refrigerator-integration","title":"Samsung Refrigerator Integration","text":"","tags":["wip"]},{"location":"projects/home-assistant/samsung-refrigerator-integration/index.html#overview","title":"Overview","text":"<p>My fridge is an:  RF23M8070SR</p> <p></p> <p></p>","tags":["wip"]},{"location":"projects/home-assistant/samsung-refrigerator-integration/index.html#samsung-wifi-dongle","title":"Samsung WiFi Dongle","text":"<p>I purchased the Samsung Smart Home Adapter (HD39J1230GW) to integrate the kitchen fridge (Samsung  RF23M8070SR) with Home Assistant.  The dongle works poorly so I'd like to figure out how it works to see if I can improve it's functionality.  There are no datasheets available, so comparing the images below, it appears that the \"USB\" connector is actually carrying a UART serial port signal.</p> <p>This makes sense since the cabling to the port on the fridge is not shielded and due to the level shifting FETs on the top-left of the board.</p> <p>The dongle uses the Qualcomm QCA4531 SoC: - https://www.qualcomm.com/products/technology/wi-fi/qca4531#Overview</p>","tags":["wip"]},{"location":"projects/home-assistant/samsung-refrigerator-integration/index.html#teardown","title":"Teardown","text":"","tags":["wip"]},{"location":"projects/home-assistant/samsung-refrigerator-integration/index.html#usb-pinout","title":"USB Pinout","text":"","tags":["wip"]},{"location":"projects/home-assistant/samsung-refrigerator-integration/index.html#qualcomm-qca4531-soc","title":"Qualcomm QCA4531 SoC","text":"","tags":["wip"]},{"location":"projects/home-assistant/samsung-refrigerator-integration/index.html#references","title":"References","text":"<ul> <li>https://github.com/zigpy/zigpy/discussions/796</li> <li>https://usermanual.wiki/Samsung-Electronics-Co/SWL-CQ51/html</li> </ul>","tags":["wip"]},{"location":"projects/home-assistant/samsung-refrigerator-integration/index.html#refrigerator-system-board","title":"Refrigerator System Board","text":"","tags":["wip"]},{"location":"projects/home-assistant/samsung-refrigerator-integration/index.html#links","title":"Links","text":"<ul> <li>https://hackaday.com/2016/12/05/taking-it-to-another-level-making-3-3v-and-5v-logic-communicate-with-level-shifters/ </li> </ul> <code>#wip</code>","tags":["wip"]},{"location":"projects/hunter-hacking/a-look-inside-a-hunter-pro-hc-controller/index.html","title":"A Look Inside A Hunter Pro-HC Controller","text":"","tags":["hunter","sprinker","irrigation","uC","teardown"]},{"location":"projects/hunter-hacking/a-look-inside-a-hunter-pro-hc-controller/index.html#a-look-inside-a-hunter-pro-hc-controller","title":"A Look Inside A Hunter Pro-HC Controller","text":"<p>I recently completed a redesign of my home's irrigation system, replacing an old Rainbird ESP-2 controller with a Hunter Pro-HC, a  \"professional-grade WiFi controller for residential and light commercial applications\".</p> <p></p> <p>The controller is part of the \"Hydrawise\" family of devices, a platform to enable internet-connectivity.</p> <p>The platform is great, but does not provide any mechanisms for local control of the controller.</p>","tags":["hunter","sprinker","irrigation","uC","teardown"]},{"location":"projects/hunter-hacking/a-look-inside-a-hunter-pro-hc-controller/index.html#research","title":"Research","text":"<p>While adding the controller to my network, I came across this blurb here:</p> <p></p> <p>Which seems to indicate that it uses Secure MQTT to communicate with its backend services.</p> <p>If Hydrawise is, in fact, built using MQTT, it would be fantastic, because MQTT and Home Assistant go together like ice cream and apple pie.</p> <p>Sniffing the controller's traffic confirms port 8883 traffic to backend services hosted on AWS:</p> <p></p>","tags":["hunter","sprinker","irrigation","uC","teardown"]},{"location":"projects/hunter-hacking/a-look-inside-a-hunter-pro-hc-controller/index.html#internals","title":"Internals","text":"","tags":["hunter","sprinker","irrigation","uC","teardown"]},{"location":"projects/hunter-hacking/a-look-inside-a-hunter-pro-hc-controller/index.html#pcb","title":"PCB","text":"<p>Cracking open the device reveals a nicely designed PCB:</p> <p> </p> <p>The two interesting ICs on the PCB are a Microchip PIC32 microcontroller and an Atmel ATWINC1500 WiFi module:</p> <p></p>","tags":["hunter","sprinker","irrigation","uC","teardown"]},{"location":"projects/hunter-hacking/a-look-inside-a-hunter-pro-hc-controller/index.html#microchip-pic32","title":"Microchip PIC32","text":"<p>The Microchip PIC32MX370F512L is a 32-bit MIPS-based microcontroller with the following specs:</p> <p></p> <p>With specs like that, we can assume that this puppy is the \"brains\" behind the Hunter controller, and contains the code which communicates with the Hydrawise backend systems.</p> <p></p>","tags":["hunter","sprinker","irrigation","uC","teardown"]},{"location":"projects/hunter-hacking/a-look-inside-a-hunter-pro-hc-controller/index.html#documentation","title":"Documentation","text":"<ul> <li>Datasheet</li> <li>[Pinout]] </li> </ul>","tags":["hunter","sprinker","irrigation","uC","teardown"]},{"location":"projects/hunter-hacking/a-look-inside-a-hunter-pro-hc-controller/index.html#atmel-atwinc1500","title":"Atmel ATWINC1500","text":"<p>The Atmel ATWINC1500-MR210PB is an 802.11 b/g/n \"IoT Module\", which seems like a fancy way of saying \"WiFi module\". </p>","tags":["hunter","sprinker","irrigation","uC","teardown"]},{"location":"projects/hunter-hacking/a-look-inside-a-hunter-pro-hc-controller/index.html#pinout","title":"Pinout","text":"<p>Page 7 of the datasheet contains a pin-out diagram which indicates that the module has the following interfaces: UART, SPI, and I2C.</p> <p>![Pasted image 20230313162712.png</p>","tags":["hunter","sprinker","irrigation","uC","teardown"]},{"location":"projects/hunter-hacking/a-look-inside-a-hunter-pro-hc-controller/index.html#documentation_1","title":"Documentation","text":"<ul> <li>Datasheet</li> <li>Wi-Fi Network Controller Software Design Guide</li> <li>Wi-Fi Network Controller Software Programming Guide</li> <li>Integrated Serial Flash and Memory Download Procedure</li> <li>Transport Layer Security (TLS) User's Guide</li> </ul>","tags":["hunter","sprinker","irrigation","uC","teardown"]},{"location":"projects/hunter-hacking/a-look-inside-a-hunter-pro-hc-controller/index.html#pinouts","title":"Pinouts","text":"<p>The board has a number of headers, so it seems logical to see what pins are broken out.</p>","tags":["hunter","sprinker","irrigation","uC","teardown"]},{"location":"projects/hunter-hacking/a-look-inside-a-hunter-pro-hc-controller/index.html#how-to-trace","title":"How To Trace","text":"<p>The best technique I\u2019ve found for tracing double-layered boards is to photograph both sides, then line them up carefully in an image editor.</p> <p>Adjusting opacities and/or toggling layers while carefully tracing with a cursor yields the best results:</p> <p></p>","tags":["hunter","sprinker","irrigation","uC","teardown"]},{"location":"projects/hunter-hacking/a-look-inside-a-hunter-pro-hc-controller/index.html#board-outs","title":"Board Outs","text":"<p>Here\u2019s what I discovered:</p> <p></p>","tags":["hunter","sprinker","irrigation","uC","teardown"]},{"location":"projects/hunter-hacking/a-look-inside-a-hunter-pro-hc-controller/index.html#taking-stock","title":"Taking Stock","text":"<p>From our initial explorations, it does seem possible for us to continue our journey with either the PIC32 or the Atmel WiFI device.</p> <p>However, revisiting our objective, being able to integrate the device into Home Assistant.</p> <p>Let's start with Atmel device.</p> <p>At this point, I figure there are basically two paths forward:</p> <ul> <li>Exploit the device and replace firmware ala ESPHome</li> <li>Extract TLS keys and MitM backend traffic</li> </ul> <p>Let\u2019s continue our investigation and see which option makes the most sense in ATWINC1500 IoT Module Deep-Dive (Part 1).</p> <p></p> <code>#hunter</code> <code>#sprinker</code> <code>#irrigation</code> <code>#uC</code> <code>#teardown</code>","tags":["hunter","sprinker","irrigation","uC","teardown"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-1/index.html","title":"ATWINC1500 IoT Module Deep-Dive (Part 1)","text":"","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-1/index.html#atwinc1500-iot-module-deep-dive-part-1","title":"ATWINC1500 IoT Module Deep-Dive (Part 1)","text":"<p>This is the second article in the Hunter Hacking Project series.</p> <p>The Microchip ATWINC1500 IoT Module is a low-cost 802.11 b/g/n WiFi module, popular in the \"maker\" DIY electronics communities, </p> <ul> <li>Adafruit Feather M0 WiFi </li> <li>Adafruit ATWINC1500 WiFi Breakout</li> <li>Arduino WiFi Shield</li> <li>Arduino WiFi101 Library</li> </ul> <p>Support for the module is even baked into Arduino: [WiFi101 / WiFiNINA Firmware Updater]]</p>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-1/index.html#history","title":"History","text":"<p>Originally designed by Newport Media Inc., along with the WILC1000/WILC3000 family of WiFi modules, the ATWINC1500 module became part of Atmel's SmartConnect family through the acquisition of Newport Media in 2014.</p> <p>Two years later, the device changed owners once again and became part of Microchip's portfolio through Microchip's acquisition of Atmel in 2016.  </p> <p>This is useful to know because the ATWINC1500 codebase bears the hallmarks of this tumultuous history.</p>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-1/index.html#architecture","title":"Architecture","text":"<p>The module has an embedded Cortus APS3S 32-bit RISC processor with either 2Mb or 4Mb of internal SPI flash.  </p> <p>The Wi-Fi Network Controller Software Design Guide provides this system architecture diagram:</p> <p>![Pasted image 20230321215912.png</p> <p></p>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-1/index.html#memory-map","title":"Memory Map","text":"<p>Root Certificate and TLS Certificate in ATWINC15x0 provides the following memory map:</p> <p></p> <p>(the table above is extracted from spi_flash_map.h)</p> <p>What immediately stands out are the two regions \"Root certificate\" and \"TLS Server\".  </p> <p>Why?  </p> <p>Well, because trusted root certs are distributed as X.509 certs and private keys are always highly prized.  Don't know what that means?  We'll get to it.</p> <p>Microchip elaborates: </p> <p>Why is there two location to store certificates in ATWINC15x0 flash? What is the difference between Root Certificate and TLS Certificate/key storage in ATWINC15x0 flash memory?</p> <p>There are two specific locations to store different certificates into WINC flash memory:</p> <ol> <li> <p>X.509 Root Certificate storage - This is for the ATWINC1500 TLS Client to verify the TLS server certificate (A self signed public key certificate that identify the authority) from the server that the module is trying to connect. (eg. When ATWINC1500 is trying to connect to google.com, device will use the \"GlobalSign Root CA\" certificate stored in the Root Certificate folder to verify the server certificate) </p> </li> <li> <p>ATWINC1500 TLS Server certificate storage - For proper operation of both the TLS server and TLS client authentication, the ATWINC1500 device must have a certificate/private key pair assigned to it.</p> </li> </ol> <p>Let's see what else we can find.</p>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-1/index.html#a-quick-primer-on-tls","title":"A Quick Primer On TLS","text":"<p>Well versed in TLS? [skip this section]]</p> <p>Transport Layer Security (TLS) is a cryptographic protocol used to secure communication over the internet. It is widely used to provide secure communication for web traffic, email, and other applications that require secure communication. TLS uses a combination of symmetric and asymmetric encryption to provide confidentiality, integrity, and authenticity of the data exchanged between two parties.</p> <p>One of the key components of TLS is the X.509 digital certificate, which is used to verify the identity of the communicating parties. X.509 certificates contain information such as the name of the entity being identified, the entity's public key, the digital signature of the certificate issuer (Certificate Authority) which signed the certificate, and the validity period of the certificate.</p> <p>To use TLS, both parties need to have a pair of private and public keys. The private key is kept secret by the owner and is used to encrypt and decrypt data. The public key, on the other hand, is freely distributed and is used to encrypt data that can only be decrypted by the corresponding private key.</p> <p>Info</p> <p>The ATWINC1500 stores these private and public keys in the TLS Cert Store.</p> <p>When a client initiates a TLS connection with a server, the server sends its X.509 certificate to the client. The client then verifies the authenticity of the certificate by checking the digital signature of the certificate issuer (Certificate Authority). If the certificate is valid, the client can use the public key in the certificate to encrypt data that can only be decrypted by the server's private key.</p> <p>Certificate Authorities (CA) are trusted third-party entities that issue X.509 certificates. A CA verifies the identity of an entity and signs its certificate to provide a chain of trust. This chain of trust can be traced back to a Root CA, which is trusted by default in most operating systems and web browsers.</p> <p>Info</p> <p>The ATWINC1500 stores the trusted Root CA certificates in the Root Cert Store.  If a server returns a certificate signed by a certificate stored in the Root Cert Store, the ATWINC1500 will assume it can trust it, and will allow the connection.</p> <p>Finally, TLS uses Abstract Syntax Notation One (ASN.1) to encode data in a compact and efficient format. ASN.1 is a standard that defines a notation for describing data structures that can be encoded and decoded in a machine-independent way. TLS uses ASN.1 to encode and transmit X.509 certificates, keys, and other cryptographic parameters in a compact format that can be easily decoded by the receiving party.</p> <p>To summarize: 1. X.509 is a standard defining the file format of certificates. 2. A certificate is basically a public key which has been signed by someone else's private key. 3. \"Someone else\" is a usually a \"Certificate Authority\", but certificates can also be self-signed. 4. Certificates also bundle identity data (common name, address, etc.) along with the public key, and the kaboodle is signed by the CA. 5. TLS private and public keys are stored in a format called ASN.1, which is translated into PEM, DER, CER, and other formats, as needed.</p> <p>Need more detail?</p> <p>Section 7 of the Wi-Fi Network Controller Software Design Guide contains a wealth of additional information.</p>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-1/index.html#root-certificate-store","title":"Root Certificate Store","text":"<p>The Wi-Fi Network Controller Software Design Guide explains that:</p> <p>Before connecting to a TLS Server, the root certificate of the server must be installed on the ATWINC15x0...</p> <p>![Pasted image 20230314001127.png</p> <p>And Integrated Serial Flash and Memory Download Procedure describes the procedure for installing certificates:</p> <p></p>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-1/index.html#tls-server-store","title":"TLS Server Store","text":"<p>The Transport Layer Security (TLS) User's Guide describes the procedure for installing certificates:</p> <p> </p>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-1/index.html#interfaces","title":"Interfaces","text":"<p>Page 7 of the datasheet contains a pin-out diagram which indicates that the module has the following interfaces: UART, SPI, and I2C.</p> <p></p> <p>The datasheet explains that the SPI interface is used to communicate with a host microcontroller.</p>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-1/index.html#debug-interfaces","title":"Debug Interfaces","text":"<p>Page 20 of the datasheet indicates that the UART and I2C interfaces are for \"debugging purposes\" only:</p> <p></p>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-1/index.html#debug-uart","title":"Debug UART","text":"<p>Integrated Serial Flash and Memory Download Procedure explains that to perform a serial flash download, the chip needs to be in the right \"bootloader state\":</p> <p></p> <p>The online documentation provides this handy diagram which explains what <code>m2m_bsp_init()</code> is doing behind the scenes:</p> <p></p>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-1/index.html#firmware-extraction","title":"Firmware Extraction","text":"<p>The WINC1500: Using Image Tool to build firmware image, gain table and program using serial bridge mentions that the module's firmware can be extracted by connecting a 3.3v TTL USB-to-Serial cable to pins UART_TXD and UART_RXD of module and executing the following command:</p> <pre><code>winc_programmer_uart.exe -p COM4 -d winc1500 -r -pfw programmer_firmware.bin -o atwinc1500-original.bin\n</code></pre> <p>Let's give it a shot!</p> Alternatively, you can use the Microchip <code>image_cloner.exe</code> tool <p>You can download a compiled binary: here</p> <pre><code>.\\image_cloner.exe -span 500000 -out_path atwinc1500-original.bin\n</code></pre>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-1/index.html#hardware-setup","title":"Hardware Setup","text":"<p>I will be using the above method to extract firmware from an Adafruit Feather M0 WiFi development module using a cheapo CP2102 USB-TTL UART module:</p> <p> </p> <p> </p> <p>Since I don't have a fancy POGO rig, I made a simple jig to hold the leads in place while the firmware is extracting:</p> <p> </p>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-1/index.html#software-setup","title":"Software Setup","text":"<p>As mentioned in ATWINC1500 IoT Module Deep-Dive (Part 1)#Debug Interfaces, to enable the debug interfaces, the ATWINC1500 module needs a specific boot-up sequence.</p> <p>Since the Adafruit Feather M0 is supported by Arduino, I wrote a simple sketch:</p> <pre><code>#define CE_PIN 2\n#define RST_PIN 4\nvoid setup() {\npinMode(LED_BUILTIN, OUTPUT);\npinMode(CE_PIN, OUTPUT);\npinMode(RST_PIN, OUTPUT);\ndigitalWrite(CE_PIN, LOW);\ndigitalWrite(RST_PIN, LOW);\ndelay(1000);\ndigitalWrite(CE_PIN, HIGH);\ndelay(100);\ndigitalWrite(RST_PIN, HIGH);\n}\nvoid loop() {\ndigitalWrite(LED_BUILTIN, HIGH);  // turn the LED on (HIGH is the voltage level)\ndelay(1000);                      // wait for a second\ndigitalWrite(LED_BUILTIN, LOW);   // turn the LED off by making the voltage LOW\ndelay(1000);   }\n</code></pre> Don't forget to set the Port! <p>The bossac programmer will silently fail if you forget to set the port.</p> <p></p>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-1/index.html#executing-dump","title":"Executing Dump","text":"<p>Adafruit Feather M0 Firmware Dump</p> Adafruit Feather M0<pre><code>$ winc_programmer_uart.exe -p COM4 -d winc1500 -r -pfw programmer_firmware.bin -o atwinc1500-adafruit.bin\n\nWINC Programming Tool 2.0.1 [ceebe5f] (Apr 20 2022)\nCopyright (C) Microchip Technology Inc. 2022\nhardware WINC serial bridge found\nchip ID is 0x001503a0\nprogramming firmware file: programmer_firmware.bin\nreinitialise onchip uart to 500000\nwaiting for firmware to run\nflash ID 0xc21320c2\nflash size is 4 Mb\n\nbegin read operation\n\n0x000000:[rrrrrrrr] 0x008000:[rrrrrrrr] 0x010000:[rrrrrrrr] 0x018000:[rrrrrrrr]\n0x020000:[rrrrrrrr] 0x028000:[rrrrrrrr] 0x030000:[rrrrrrrr] 0x038000:[rrrrrrrr]\n0x040000:[rrrrrrrr] 0x048000:[rrrrrrrr] 0x050000:[rrrrrrrr] 0x058000:[rrrrrrrr]\n0x060000:[rrrrrrrr] 0x068000:[rrrrrrrr] 0x070000:[rrrrrrrr] 0x078000:[rrrrrrrr]\noutput file format not specified, assuming 'raw'\n</code></pre> If you're using an older version of <code>winc_programmer_uart.exe</code> you might get the following error <pre><code>$ winc_programmer_uart.exe -p COM4 -d winc1500 -r -pfw programmer_firmware.bin -o atwinc1500-adafruit.bin\n\nWINC Programming Tool 1.0.3 [r708] (Jul 28 2020)\nCopyright (C) Microchip Technology Inc. 2020\nhardware WINC serial bridge found\nchip ID is 0x001503a0\nprogramming firmware file: ..\\programmer_firmware\\release3A0\\programmer_firmware.bin\nreinitialise onchip uart to 500000\nwaiting for firmware to runerror(uart_read:61): incomplete read from UART\nerror: failed to receive read register response\nerror: failed to initialise programming firmware '..\\programmer_firmware\\release3A0\\programmer_firmware.bin' on device\n</code></pre>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-1/index.html#firmware-analysis","title":"Firmware Analysis","text":"<p>Now that we've got a fresh binary sitting in <code>atwinc1500-adafruit.bin</code>, let's see what's inside.</p> <p>Using the <code>tls_cert_flash_tool.exe</code> mentioned in [TLS Server Store]] we can investigate the TLS Store.</p>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-1/index.html#tls-server-store-summary","title":"TLS Server Store Summary","text":"<p>Due to a bug, the tool reports the \"WINCRootCA\" twice, so there are only 4 certs stored in the TLS Store:</p> <p>```bash hl_lines=\"\" $ tls_cert_flash_tool.exe read -fwimg atwinc1500-adafruit.bin -ecdsa -rsa -dir</p> <ul> <li>WINC1500 TLS Certificate Flash Tool  *</li> </ul> <p></p> <p>PRIV_00ddb578c5a531f273                          1208 PRIVATE KEY CERT_00ddb578c5a531f273                           950 CERTIFICATE  *.winc.atmel.com CERT_00def74d6dfa50e85c                          1003 CERTIFICATE  WINCRootCA</p> <p></p> <p>CERT_00f4bb2e4a6fd5ae51                           579 CERTIFICATE  *.winc.atmel.com CERT_00ddefc26b1df1c50d                           754 CERTIFICATE  AtmelEccCA CERT_00def74d6dfa50e85c                          1003 CERTIFICATE  WINCRootCA</p> <p>== X509 ==         Subject &lt;*.winc.atmel.com&gt;         Issuer           &lt;2016-06-12 12:29:03&gt; to &lt;2021-12-03 12:29:03&gt;</p> <p>== X509 ==         Subject &lt;*.winc.atmel.com&gt;         Issuer           &lt;2016-07-18 13:31:13&gt; to &lt;2023-05-23 13:31:13&gt; <pre><code>---\n\n### Dumping TLS Private Key\n\n```bash\n$ tls_cert_flash_tool.exe read -fwimg atwinc1500-adafruit.bin -rsa -privkey\n\n******************************************\n*   WINC1500 TLS Certificate Flash Tool  *\n******************************************\nPrivate-Key: (2048 bit)\nmodulus (N):\n        AD 62 49 6E 87 72 FA D4 E0 1A 48 1C B8 B4 5E D1\n        9D B9 EC A4 99 86 6D 23 9E 10 BD 8D D3 07 FA 58\n        63 D1 E9 FB 8D A5 9B 61 83 68 4D 17 C8 35 E1 85\n        89 85 6F 29 91 CC AC A4 B1 3C E2 F4 E3 81 9E 30\n        8A 86 11 FF D4 97 C0 DD B1 14 64 44 14 C9 F9 BA\n        59 1B 8F 82 07 23 D0 00 C1 AD 95 BC 28 39 19 87\n        FB F3 10 5E 25 EF FB 8A 54 CA 96 1F A2 03 1C 90\n        DB 51 44 93 C9 11 EF 3F 93 34 66 36 6B 48 44 61\n        14 0A FE 15 AB 53 74 0B F7 30 F8 7B 3E 55 98 32\n        10 94 53 FA BC C4 C2 0D CE 91 F5 3D 50 3B 69 A8\n        3A AF 03 09 C4 A4 74 4C 62 49 98 C9 FC 1E 9B 7F\n        A7 9B 2D A4 BF C2 AE 42 D0 E7 09 27 D2 E4 CD DC\n        D0 88 3B 43 20 F2 15 0D 32 92 8E 4D 9E C6 E9 C6\n        DE 7D 65 01 22 E1 B7 60 6F C0 27 11 7C F7 FA FD\n        7C FE 5B 23 A7 00 56 DF 99 ED 1A 44 CF D6 BA F9\n        8A 09 6A D3 54 81 55 25 86 7D C0 7C 68 CC FF 31\npublicExponent (e):\n        01 00 01\nprivateExponent (d):\n        3D 37 5D 9B E3 C0 E9 E4 ED 36 FA 4D 01 BD D5 58\n        87 2A D4 ED 8C B3 14 A7 A5 B0 5D 6C CC 9C 9D 7C\n        45 CA 20 A5 CB 6E 34 3D 2A AB 51 C4 DA D0 83 4E\n        A5 AE 72 00 28 55 2E 83 7B 7C 76 D9 65 D6 26 E7\n        16 91 9D 9B 49 11 47 6C 3E 90 67 92 4E 10 BD D6\n        58 8D CD 8E 68 3C F1 BC C2 A5 2A 1F E3 C7 BD 46\n        F0 E2 F1 DD 7B E1 8E 5B 59 F2 A9 2C 84 04 3B 3A\n        BD E4 A4 A4 D5 32 3A D9 A4 7C B4 B5 F4 0C F0 EF\n        0C 86 C6 B1 6C EA 63 D5 79 D5 20 37 C0 8E AF 0E\n        20 E9 6B 91 D4 FB 15 B8 FF E4 1E 80 20 52 3A 7F\n        C2 83 92 22 AF AC 16 9D 93 0D E6 56 3A 84 E8 B6\n        77 56 77 AF 23 E3 68 DC 91 14 C8 FC 61 47 57 8C\n        7D B6 DA 19 13 2A D2 DE D7 E5 BD 59 70 86 AF 39\n        AD CB 29 75 20 CB 36 93 D3 57 34 74 E0 26 B4 B7\n        9B 37 49 F8 0E 11 FF 42 72 9B 93 5B 78 BA A8 55\n        4B 5F 78 E9 99 DE ED 9C 49 28 FC AC 9B B4 E4 C1\nprim1 (p):\n        E1 C9 49 53 EB 34 15 5B 0D E5 01 38 49 4E 0B 40\n        00 C6 AF 4C C1 EB 59 ED 07 69 5D 40 D7 82 14 21\n        3E 39 9F 94 F1 B8 FB EA B9 91 FB 7C F0 0D 96 F4\n        F5 30 81 D5 65 4D 7C 5A 19 35 C4 2D 04 C3 22 F1\n        73 12 4F 68 97 7A 66 71 D7 68 E5 22 41 B3 AF C4\n        C4 46 49 40 D5 7A FC EC F4 8D 02 EE 95 C4 01 F2\n        C5 E7 13 DD 62 D3 FF 46 18 BA 05 24 5C D7 3E 1C\n        C7 7B 84 66 D8 DC 0C 10 AE FD 8B 53 FF AE 51 19\nprime2 (q):\n        C4 95 DD 3F 4D E1 D3 75 1D CC 3C 82 82 40 4C C7\n        66 A5 71 A9 A5 DE F1 1A ED FA B5 6F 4A 92 E9 8C\n        05 1B 4A 67 D3 8A B7 53 6C 83 DD A5 31 34 92 D0\n        AF 3D FF 06 00 45 C4 A8 12 DF E1 29 8E 93 09 B9\n        99 25 12 1F 94 F1 09 B8 14 67 9D 35 2A D2 AF 39\n        05 92 88 F4 DC D3 5E 55 DA 99 C2 0E 8F C2 DC 3D\n        6B 98 22 40 80 72 6D 1F D9 E2 87 6F 60 33 16 6A\n        08 B3 2E 61 63 7C EE 69 BF 06 71 9D 1A DF 69 D9\nexponent1 (dP):\n        12 0E 5F CF D7 3A 66 0E CF 10 A6 45 53 0F 6B B4\n        E5 9A FD FF DC 6E 2E D5 D6 C6 E5 4F 3F 2C C6 E1\n        55 B1 94 02 7C 46 37 D7 30 99 ED 0B B3 C2 D2 74\n        AA 7B 03 97 06 2F E9 26 E7 67 36 56 07 50 77 A5\n        E9 76 E8 64 CB E0 5C FA F3 A8 0E D2 EB 80 2C 29\n        47 2C FB C4 B4 8D CE 56 40 C4 5A 1C AC 5B 6D 70\n        75 C5 22 00 8D 5B B8 C9 69 46 CF 0C 76 64 3C 32\n        5E FD 90 BC 0C D1 A4 21 5D 6D 27 4C 43 61 34 59\nexponent2 (dQ):\n        4F 8B 2C 48 EF 24 8F 41 76 5B 2B A8 CB 37 65 59\n        D1 C8 E3 E2 F7 40 EC 62 2F 25 20 C0 F5 75 D8 96\n        55 82 A3 6A BB 88 07 81 F4 08 AF 68 A6 2E 55 B1\n        A7 16 F8 D7 DE C8 5C 38 7D DA A4 EB 01 CB B1 45\n        AE 17 F7 EB 5B 82 E4 A1 DD 6F C7 86 B9 DB 22 17\n        7A 8F BE 67 05 EB 68 E2 68 5F 8A CC 05 93 9D 36\n        25 11 1B DA E9 9E 63 55 5D FE 71 3A B9 BC 32 37\n        99 69 97 3C C4 DA CA 45 73 8C 11 F0 B5 EC EC 91\ncoefficient(QInv):\n        62 4F E3 8A 73 BD 03 DC 17 DD 17 87 DB 1C EA 88\n        5E C2 F7 7D 3F 1F 47 52 B2 F5 43 92 A8 D0 9D D0\n        3E 7E 98 A3 B1 DC 84 90 01 B1 16 D6 0D 05 77 03\n        EA 0D 10 68 DC 74 D7 82 90 05 7C 80 26 8D C3 2D\n        7D 96 65 4C 29 6B 1A A2 F7 59 24 40 58 12 77 19\n        6C 37 FD 94 23 A9 C4 D3 82 67 F4 13 33 09 29 B0\n        88 D2 80 CC A5 3F C5 E7 53 A6 EA 87 26 0A 42 0E\n        35 97 07 88 66 4C BA 1A B1 08 92 97 49 74 3C D0\n\n*=*=* X509 *=*=*\n        Subject &lt;*.winc.atmel.com&gt;\n        Issuer  &lt;WINCRootCA&gt;\n        &lt;2016-06-12 12:29:03&gt; to &lt;2021-12-03 12:29:03&gt;\n</code></pre></p>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-1/index.html#dumping-tls-certificates","title":"Dumping TLS Certificates","text":"<p>Unfortunately, the tool only dumps the certificates and not the private key.</p> <pre><code># Extract TLS Certificate(s)\ntls_cert_flash_tool.exe read -fwimg atwinc1500-adafruit.bin -ecdsa -rsa -all -out output\n\n******************************************\n*   WINC1500 TLS Certificate Flash Tool  *\n******************************************\nPress any key to continue . . .\n\n$ ls output\nAtmelEccCA.cer  ECDSA_winc.atmel.com.cer  RSA_winc.atmel.com.cer  WINCRootCA.cer\n</code></pre>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-1/index.html#firmware-versions","title":"Firmware Versions","text":"<p>Before we wrap, let's talk about how to upgrade the firmware on our ATWINC1500 module.</p> <p>As vulnerabilities are found and patched, Microchip, and integrators will roll out firmware updates, I believe the latest firmware (as of March 22, 2023) is <code>19.7.7</code>, available here.</p>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-1/index.html#checking-firmware-version","title":"Checking Firmware Version","text":"<p>The easiest way I've found to check the ATWINC1500 firmware version is to use the Arduino <code>CheckWifi101FirmwareVersion</code> sketch:</p> <p>![Pasted image 20230321160515.png</p> <p>After uploading the sketch to your board it spits out the firmware version:</p> <p></p>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-1/index.html#updating-firmware","title":"Updating Firmware","text":"<p>The easiest way I've found to upgrade the ATWINC1500 firmware is to use the Arduino \"WiFi101 / WiFiNINA Firmware Updater\" tool, built right into the Arduino IDE:</p> <p></p>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-1/index.html#write-firmwareupdater-sketch","title":"Write FirmwareUpdater Sketch","text":"<p>To use the updater, you'll need to first upload the <code>FirmwareUpdater</code> sketch</p> <p></p>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-1/index.html#update-firmware","title":"Update Firmware","text":"<p>Once the <code>FirmwareUpdater</code> sketch has been uploaded, you can select the board and desired firmware version and click 'Update Firmware':</p> <p></p> <p>Resulting in:</p> <p></p> <p>Subsequently, running the <code>CheckWifi101FirmwareVersion</code> sketch should result in:</p> <p></p>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-1/index.html#further-reading","title":"Further Reading","text":"<ul> <li>Adafruit Feather M0 Firmware Update Guide</li> <li>Debug UART Firmware Upgrade Example</li> </ul>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-1/index.html#uploading-ssl-root-certificates","title":"Uploading SSL Root Certificates","text":"<p>If you're in a hurry, the Arduino \"WiFi101 / WiFiNINA Firmware Updater\" also provides a convenient way to add certificates to the Root Cert Store.</p> <p>For example, to add the root cert for <code>www.google.com</code>:</p> <p></p> <p></p> <p></p>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-1/index.html#next-steps","title":"Next Steps","text":"<p>Unfortunately, <code>tls_cert_flash_tool.exe</code> is the only tool Microchip provides for extracting information from a firmware binary.</p> <p>To probe further we're going to have to put on our big boy pants and go down an ADHD hyperfocus rabbit hole.</p> <p>Follow along in ATWINC1500 IoT Module Deep-Dive (Part 2). </p> <code>#microchip</code> <code>#firmware</code> <code>#binary-analysis</code> <code>#iot</code>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-2/index.html","title":"ATWINC1500 IoT Module Deep-Dive (Part 2)","text":"","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-2/index.html#atwinc1500-iot-module-deep-dive-part-2","title":"ATWINC1500 IoT Module Deep-Dive (Part 2)","text":"<p>If you haven't read ATWINC1500 IoT Module Deep-Dive (Part 1) start there and come back.</p> <p>As discussed, we currently have three ways of interacting with the ATWINC1500 module:</p> <ul> <li><code>winc_usb_programmer.exe</code> to dump firmware over Debug UART</li> <li><code>tls_cert_tool.exe</code> to view TLS Cert Store contents</li> <li>Arduino Wifi101 Firmware/Certificates Updater Tool</li> </ul> <p>If we want need to recover all objects stored in the Root Cert Store and TLS Server Store, we're going to have to write some code.</p>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-2/index.html#surveying-the-landscape","title":"Surveying The Landscape","text":"<p>As good code writers, we must start our pilgrimage by consulting the Oracle: </p> <ol> <li>Atmel Software Framework (ASF)<ul> <li>root_tls_cert</li> </ul> </li> <li>MPLAB-Harmony</li> <li>WiFi101-FirmwareUpdater-Plugin<ul> <li>wifi101</li> </ul> </li> <li>SAM-IoT WG Development Board (EV75S95A) Provisioning Tools Package</li> <li>Provisioning the Microchip AVR-IoT WA/WG Development Board for Azure IoT Services<ul> <li>tls_cert_flash_tool</li> </ul> </li> <li>pitaya-go</li> </ol> <p>Each of these provide a piece of the larger puzzle, but, none does exactly what we want.</p> <p>And, of course, none of it compiles...</p> <p>Let's get started.</p>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-2/index.html#firmware-analysis","title":"Firmware Analysis","text":"<p>The classic approach to firmware analysis is to pop the damn thing into a hex editor.</p> <p>Note</p> <p>My preferred hex editor is ImHex.  Why?  Mostly because it's open source, it's just the one that worked, and it supports 010 Editor-style binary templates.</p> <p>Luckily, Microchip provided us with a [memory map]] (reproduced below), so let's open up  <code>atwinc1500-adafruit.bin</code> and take a look!</p> <p>![Pasted image 20230321010550.png</p>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-2/index.html#root-cert-store","title":"Root Cert Store","text":"<p>The Root Cert Store is at \"16K\", which translates to <code>0x4000</code>:</p> <p></p> <p>Comparing what we see with the code in <code>root_tls_cert/root_setup.c</code> should give you the tingles:</p> root_tls_cert/root_setup.c<pre><code>#define ROOT_CERT_FLASH_START_PATTERN_LENGTH 16\n#define ROOT_CERT_FLASH_EMPTY_PATTERN\n{\n0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\n0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF\n}\n// tstrRootCertEntryHeader Format used in 19.4.x\n#define ROOT_CERT_FLASH_START_PATTERN_V0\n{\n0x01, 0xF1, 0x02, 0xF2, 0x03, 0xF3, 0x04, 0xF4,\n0x05, 0xF5, 0x06, 0xF6, 0x07, 0xF7, 0x08, 0xF8\n}\n// tstrRootCertEntryHeader Format used in 19.5.x\n#define ROOT_CERT_FLASH_START_PATTERN\n{\n0x11, 0xF1, 0x12, 0xF2, 0x13, 0xF3, 0x14, 0xF4,\n0x15, 0xF5, 0x16, 0xF6, 0x17, 0xF7, 0x18, 0xF8\n}\n</code></pre> <p>We can see that the dump contains the 19.5.x start pattern!</p> <p>Now let's take a look at the TLS Store.</p>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-2/index.html#tls-cert-store","title":"TLS Cert Store","text":"<p>The TLS Cert Store is at \"20K\", which translates to <code>0x5000</code>:</p> <p></p> <p>The TLS Cert Store start pattern is in <code>root_tls_cert/tls_srv_sec.h</code>:</p> root_tls_cert/tls_srv_sec.h<pre><code>#define TLS_SRV_SEC_START_PATTERN   {0xAB, 0xFE, 0x18, 0x5B, 0x70, 0xC3, 0x46, 0x92}\n</code></pre> <p>Woo!</p>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-2/index.html#creating-binary-templates","title":"Creating Binary Templates","text":"<p>Now, this is a bit of \"[Draw the rest of the fucking owl]]\", but the only way to create binary templates is by hand (or with ChatGPT, soon).</p> <p>In our case, we're lucky enough to have source code available (<code>root_tls_cert</code>), so we can tease out the data structures used to pack the objects into the two areas we're interested in: the Root Cert Store and the TLS Cert Store.</p> <p>And, voil\u00e0:</p> Root Cert StoreTLS Store <pre><code>#define uint8 u8\n#define uint32 u32\n#define uint16 u16\n#define ROOT_CERT_FLASH_START_PATTERN_LENGTH 16\n#define CRYPTO_SHA1_DIGEST_SIZE 20\nfn WORD_ALIGN(u16 val) {\nreturn (((val) &amp; 0x03) ? ((val) + 4 - ((val) &amp; 0x03)) : (val));\n};\nstruct tstrSystemTime {\nuint16  u16Year;\nuint8   u8Month;\nuint8   u8Day;\nuint8   u8Hour;\nuint8   u8Minute;\nuint8   u8Second;\nuint8   __PAD8__;\n};\n// Cert Flash Header\nstruct tstrRootCertFlashHeader {\nuint8 au8StartPattern[ROOT_CERT_FLASH_START_PATTERN_LENGTH];\nuint32 u32nCerts;\n};\nenum tenuRootCertPubKeyType : u32 {\nROOT_CERT_PUBKEY_RSA = 1,\nROOT_CERT_PUBKEY_ECDSA = 2\n};\nstruct tstrRootCertRsaKeyInfo {\nuint16 u16NSz;\nuint16 u16ESz;\n};\nstruct tstrRootCertEcdsaKeyInfo {\nuint16 u16CurveID;\nuint16 u16KeySz;\n};\nunion RootCertKeyInfo {\ntstrRootCertRsaKeyInfo strRsaKeyInfo;\ntstrRootCertEcdsaKeyInfo strEcsdaKeyInfo;\n};\nstruct tstrRootCertPubKeyInfo {\nuint32 u32PubKeyType;\nRootCertKeyInfo KeyInfo;\n};\n// Cert Entry Header\nstruct tstrRootCertEntryHeader {\nuint8 au8SHA1NameHash[CRYPTO_SHA1_DIGEST_SIZE];\ntstrSystemTime strStartDate;\ntstrSystemTime strExpDate;\ntstrRootCertPubKeyInfo strPubKey;\n};\nstruct certEntry {\ntstrRootCertEntryHeader certHeader;\nif (certHeader.strPubKey.u32PubKeyType == 1) {\nu8 N[WORD_ALIGN(certHeader.strPubKey.KeyInfo.strRsaKeyInfo.u16NSz)];\nu8 E[WORD_ALIGN(certHeader.strPubKey.KeyInfo.strRsaKeyInfo.u16ESz)];\n}\nif (certHeader.strPubKey.u32PubKeyType == 2) {\nu8 data[WORD_ALIGN(certHeader.strPubKey.KeyInfo.strEcsdaKeyInfo.u16KeySz)*2];\n}    };\nstruct header {\ntstrRootCertFlashHeader header;\ncertEntry cert[header.u32nCerts];\n};\nheader root_cert_store @ 0x4000;\n</code></pre> <pre><code>#define uint8 u8\n#define uint32 u32\n#define uint16 u16\n#define ECC_POINT_MAX 72\n#define TLS_FILE_NAME_MAX 48\n#define TLS_SRV_SEC_MAX_FILES 8\n#define TLS_SRV_SEC_START_PATTERN_LEN 8\nstruct tstrSystemTime {\nuint16  u16Year;\nuint8   u8Month;\nuint8   u8Day;\nuint8   u8Hour;\nuint8   u8Minute;\nuint8   u8Second;\nuint8   __PAD8__;\n};\nenum tenuCertPubKeyType : u16 {\nX509_CERT_PUBKEY_RSA    = 1,\nX509_CERT_PUBKEY_ECDSA  = 2\n};\nstruct tstrECDSAPubKey{\nuint16  u16CurveID;\nuint16  u16EcPointSz;\nuint8   au8EcPoint[ECC_POINT_MAX * 2];\n};\nstruct tstrRSAPubKey {\nuint16  u16NSize;\nuint16  u16ESize;\nuint8   *pu8N : u32;\nuint8   *pu8E : u32;\n};\nunion PubKey {\ntstrRSAPubKey   strRsaPub;\ntstrECDSAPubKey strEcdsaPub;\n};\nstruct tstrX509CertPublicKey{\ntenuCertPubKeyType  enuCertKeyType;\nPubKey pubKey;\n};\nstruct tstrX509Name {\nchar    acCmnName[64];\nuint8   au8NameSHA1[20];\n};\nstruct txtrX509CertInfo{\nuint8                   u8SerialNumberLength;\nuint8                   au8SerialNo[64];\ntstrX509Name            strIssuer;\ntstrSystemTime          strExpiryDate;\ntstrSystemTime          strStartDate;\ntstrX509Name            strSubject;\ntstrX509CertPublicKey   strPubKey;\nuint16                  *pvPrivate : u32;\n};\nstruct tstrBuff {\nuint16  u16BufferSize;\nuint8   *pu8Data : u32;\n};\nstruct tstrX509Entry {\ntxtrX509CertInfo    strX509;\ntstrBuff            strX509ASN1Buff;\nchar                acFileName[60];\n//tstrX509Entry *pstrNext : u32;\n};\nstruct tstrTlsSrvSecFileEntry{\nchar    acFileName[TLS_FILE_NAME_MAX];\nuint32  u32FileSize;\nuint32  u32FileAddr;\n};\nstruct tstrTlsSrvSecHdr{\nuint8                   au8SecStartPattern[TLS_SRV_SEC_START_PATTERN_LEN];\nuint32                  u32nEntries;\nuint32                  u32NextWriteAddr;\ntstrTlsSrvSecFileEntry  astrEntries[u32nEntries];\nuint32                  u32CRC;\n};\ntstrTlsSrvSecHdr tls_cert_store @ 0x5000;\n</code></pre> <p>To play along, grab an ATWINC1500 firmware image here</p> <p>If you have Arduino installed, you can find ATWINC1500 binaries in: <code>C:\\Program Files (x86)\\Arduino\\WiFi101\\tool\\firmwares\\WINC1500\\19.6.1</code>.</p> <p>If you don't, you can grab one here: link</p>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-2/index.html#root-cert-store_1","title":"Root Cert Store","text":"<p>Loading up the Root Cert Store template in ImHex, we can see that my Root Cert Store currently contains 12 certs:</p> <p>![Pasted image 20230322153240.png</p>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-2/index.html#tls-cert-store_1","title":"TLS Cert Store","text":"<p>Loading up the TLS Cert Store template in ImHex, we can see that my Root Cert Store currently contains 7 entries:</p> <p></p> <p>Now that we have an idea of how things are organized the stores, let's take our hand at getting the tantalizingly named <code>tls_cert_flash_tool</code> compiling.</p>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-2/index.html#further-reading","title":"Further Reading","text":"<ul> <li>Arduino Wifi101 Firmware Updater - writing the certs to offset 0x00004000</li> </ul>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-2/index.html#tls_cert_flash_tool","title":"tls_cert_flash_tool","text":"<p>To get the <code>tls_cert_flash_tool</code> solution to compile, you'll need random headers from the <code>randywu763/sam-iot-provision</code> and about two weeks:</p> <p></p> <p>When you're done, you'll end up with a whole new binary called <code>atwin1500_fwtool</code> (yes, I went down a rabbit hole \ud83e\udd23).</p>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-2/index.html#atwin1500_fwtool","title":"atwin1500_fwtool","text":"<p><code>atwin1500_fwtool</code> is a heavily modified/refactored version of <code>tls_cert_flash_tool</code>, with the following improvements:</p> <ul> <li>Improved CLI</li> <li>Less crashy</li> <li>Less trashy</li> <li>Allows dumping of all objects in TLS Cert Store and Root Cert Store</li> </ul>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-2/index.html#building","title":"Building","text":"<p>To build the binary, clone the <code>peddamat/AzureDemo_AVR-IoT_Wx</code> repo: link</p>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-2/index.html#visual-studio-2022","title":"Visual Studio 2022","text":"<p>Then, open up the <code>\\Tools\\tls_cert_flash_tool\\atwin1500_fwtool.sln</code> solution in Visual Studio 2022 and hit compile:</p> <p></p> <p>The solution places the binary in <code>\\Tools\\tls_cert_flash_tool\\Debug_UART\\atwin1500_fwtool.exe</code>.</p>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-2/index.html#visual-studio-code","title":"Visual Studio Code","text":"<p>The solution can also be compiled in VSCode, by running the <code>build atwinc1500_fwtool</code> task:</p> <p></p>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-2/index.html#usage","title":"Usage","text":"<p>The tool has an improved CLI:</p> <pre><code>$ atwinc1500_fwtool.exe\nUsage: atwin1500_fwtool.exe  [-vh] read [&lt;firmware image&gt;] [-o &lt;output directory&gt;] [-p &lt;COM Port&gt;]\natwin1500_fwtool.exe  [-trh] update [&lt;firmware image&gt;] [-o &lt;output directory&gt;] [--key=&lt;key&gt;]\n[--cert=&lt;cert&gt;] [--ca_dir=&lt;ca_dir&gt;] [--erase] [-p &lt;COM Port&gt;]\natwin1500_fwtool.exe  [-trh] erase [&lt;firmware image&gt;] [-p &lt;COM Port&gt;]\natwin1500_fwtool.exe  [-h] write &lt;firmware image&gt; [-p &lt;COM Port&gt;]\nFor a specific command help, use &lt;atwin1500_fwtool.exe &lt;CMD&gt; --help&gt;\n</code></pre>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-2/index.html#read-command","title":"Read Command","text":"<p>Using the <code>read</code> command and specifying an output directory will write the contents of the Root Cert Store and TLS Server Store to the specified directory:</p> <pre><code>$ atwinc1500_fwtool.exe read --help\n\nUsage: atwin1500_fwtool.exe  [-vh] read [&lt;firmware image&gt;] [-o &lt;output directory&gt;] [-p &lt;COM Port&gt;]\nRead contents of Root Cert Store and TLS Server Store from WINC Device or a given WINC firmware image\n\nOptions:\n  &lt;firmware image&gt;          Input firmware binary\n  -o &lt;output directory&gt;     Directory to dump certs\n  -v, --verbose             Output more details\n  -p, --port=&lt;COM Port&gt;     COM Port\n  -h, --help                Show help\nExamples:\n  atwin1500_fwtool.exe read -o &lt;output dir&gt;\n  atwin1500_fwtool.exe read atwinc1500.bin\n  atwin1500_fwtool.exe read atwinc1500.bin -v\n</code></pre>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-2/index.html#example","title":"Example","text":"<pre><code>$ tls_cert_flash_tool.exe read atwinc1500-adafruit.bin -o output-adafruit\n\nDumping TLS Store contents...\nTLS Certificate Store Loaded Successfully From: Firmware Image\nFound 7 entries...\n- RSA Certificate Chain File List\n  NAME                                             SIZE TYPE         INFO\n  PRIV_00ddb578c5a531f273                          1208 PRIVATE KEY\n  CERT_00ddb578c5a531f273                           950 CERTIFICATE  *.winc.atmel.com\n  CERT_00def74d6dfa50e85c                          1003 CERTIFICATE  WINCRootCA\n- ECDSA Certificate Chain File List\n  NAME                                             SIZE TYPE         INFO\n  CERT_00f4bb2e4a6fd5ae51                           579 CERTIFICATE  *.winc.atmel.com\n  CERT_00ddefc26b1df1c50d                           754 CERTIFICATE  AtmelEccCA\n  CERT_00def74d6dfa50e85c                          1003 CERTIFICATE  WINCRootCA\n- Private Key Details:\n  Size: (2048 bit)\nModulus (N) :(00D5322C)(256)\nAD 62 49 6E 87 72 FA D4 E0 1A 48 1C B8 B4 5E D1\n        9D B9 EC A4 99 86 6D 23 9E 10 BD 8D D3 07 FA 58\n63 D1 E9 FB 8D A5 9B 61 83 68 4D 17 C8 35 E1 85\n89 85 6F 29 91 CC AC A4 B1 3C E2 F4 E3 81 9E 30\n8A 86 11 FF D4 97 C0 DD B1 14 64 44 14 C9 F9 BA\n        59 1B 8F 82 07 23 D0 00 C1 AD 95 BC 28 39 19 87\nFB F3 10 5E 25 EF FB 8A 54 CA 96 1F A2 03 1C 90\nDB 51 44 93 C9 11 EF 3F 93 34 66 36 6B 48 44 61\n14 0A FE 15 AB 53 74 0B F7 30 F8 7B 3E 55 98 32\n10 94 53 FA BC C4 C2 0D CE 91 F5 3D 50 3B 69 A8\n        3A AF 03 09 C4 A4 74 4C 62 49 98 C9 FC 1E 9B 7F\n        A7 9B 2D A4 BF C2 AE 42 D0 E7 09 27 D2 E4 CD DC\n        D0 88 3B 43 20 F2 15 0D 32 92 8E 4D 9E C6 E9 C6\n        DE 7D 65 01 22 E1 B7 60 6F C0 27 11 7C F7 FA FD\n        7C FE 5B 23 A7 00 56 DF 99 ED 1A 44 CF D6 BA F9\n        8A 09 6A D3 54 81 55 25 86 7D C0 7C 68 CC FF 31\nDumping Root Cert Store contents...\nRoot Certificate Store Loaded Successfully From: Firmware Image\nFound 12 entries:\n1) RSA Certificate: 5/30/2000 [10:48:38] to 5/30/2020 [10:48:38]\nName Hash (SHA1): 42 CA CF 1C 28 84 DA FB C7 7E AC 5D 09 75 3D 63 1E FA AD 7D\n...\n</code></pre> <p>The <code>output-adafruit</code> directory contains:</p> <pre><code>$ tree\n.\n\u251c\u2500\u2500 AtmelEccCA.cer\n\u251c\u2500\u2500 ECDSA_winc.atmel.com.cer\n\u251c\u2500\u2500 RSA_winc.atmel.com.cer\n\u251c\u2500\u2500 WINCRootCA.cer\n\u251c\u2500\u2500 private-key.asn1\n\u251c\u2500\u2500 private-key.bat\n\u251c\u2500\u2500 public-key.bat\n\u251c\u2500\u2500 public-rsa-cert-01.asn1\n...\n</code></pre> <p>The two <code>.bat</code> files convert the <code>.asn1</code> files into <code>.der</code> format:</p>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-2/index.html#private-keybat","title":"private-key.bat","text":"private-key.bat<pre><code>openssl asn1parse -genconf private-key.asn1 -out private-key.der -noout\nopenssl rsa -in private-key.der -inform der -out private-key.pem\nopenssl rsa -in private-key.pem -text -noout\n</code></pre>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-2/index.html#public-keybat","title":"public-key.bat","text":"public-key.bat<pre><code>openssl asn1parse -genconf public-rsa-cert-01.asn1 -out public-rsa-cert-01.der -noout\nopenssl pkey -pubin -in public-rsa-cert-01.der -inform DER -text -noout\n...\n</code></pre>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-2/index.html#write-command","title":"Write Command","text":"<p>The <code>write</code> command allows writing firmware images to the device over USB/serial:</p> <pre><code>$ atwinc1500_fwtool.exe write --help\n\nUsage: atwin1500_fwtool.exe  [-h] write &lt;firmware image&gt; [-p &lt;COM Port&gt;]\nWrite WINC firmware image file to device\n\nOptions:\n  &lt;firmware image&gt;          Input firmware binary\n  -p, --port=&lt;COM Port&gt;     COM Port\n  -h, --help                Show help\nExamples:\n  atwin1500_fwtool.exe write -key rsa.key -cert rsa.cer -erase\n  atwin1500_fwtool.exe write -key rsa.key -cert rsa.cer -fwimg m2m_aio_3a0.bin\n</code></pre>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-2/index.html#example_1","title":"Example","text":"<pre><code>$ atwin1500_fwtool.exe write atwinc1500-adafruit.bin     Writing firmware to device...\nDetecting COM port...\nAvail port COM5\n1 of ports found\n- Reading firmware from disk...\n- Writing firmware to device...\n</code></pre>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-2/index.html#update-command","title":"Update Command","text":"<pre><code>$ atwinc1500_fwtool.exe update --help\n\nUsage: atwin1500_fwtool.exe  [-trh] update [&lt;firmware image&gt;] [-o &lt;output directory&gt;] [--key=&lt;key&gt;] [--cert=&lt;cert&gt;] [--ca_dir=&lt;ca_dir&gt;] [--erase] [-p &lt;COM Port&gt;]\nUpdate contents of Root Cert Store or TLS Server Store from WINC Device or a given WINC firmware image\n\nOptions:\n  &lt;firmware image&gt;          Input firmware binary\n  -o &lt;output directory&gt;     Directory to dump certs\n  --key=&lt;key&gt;               Private key in PEM format (RSA Keys only). It MUST NOT be encrypted\n  --cert=&lt;cert&gt;             X.509 Certificate file in PEM or DER format\n  -t, --tls                 TLS Store\n  -r, --root                Update Root Store\n  --ca_dir=&lt;ca_dir&gt;         Path to folder containing intermediate CAs and/or Root CA of given certificate\n  --erase                   Erase the certificate store before writing. If this option is not given, the new certificate material is appended to the certificate store\n  -p, --port=&lt;COM Port&gt;     COM Port\n  -h, --help                Show help\nExamples:\n  atwin1500_fwtool.exe update --tls -key rsa.key --cert rsa.cer --erase\n  atwin1500_fwtool.exe update --root --cadir &lt;dir&gt;\n</code></pre>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-2/index.html#example_2","title":"Example","text":"<pre><code>atwin1500_fwtool.exe update \\\n--key=..\\connect_device_package\\feathermitm.private.key \\\n--cert=..\\connect_device_package\\feathermitm.cert.pem \\\n--ca_dir=..\\connect_device_package\n</code></pre>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-2/index.html#erase-command","title":"Erase Command","text":"<p>The erase command allows erasing the TLS Cert Store and/or Root Cert Store, either directly via USB or to a file:</p> <pre><code>$ atwinc1500_fwtool.exe erase --help\n\nUsage: atwin1500_fwtool.exe  [-trh] erase [&lt;firmware image&gt;] [-p &lt;COM Port&gt;]\nErase contents of Root Cert Store or TLS Server Store from WINC Device or a given WINC firmware image\n\nOptions:\n  &lt;firmware image&gt;          Input firmware binary\n  -t, --tls                 Erase TLS Store\n  -r, --root                Erase Root Store\n  -p, --port=&lt;COM Port&gt;     COM Port\n  -h, --help                Show help\nExamples:\n  atwin1500_fwtool.exe erase --root\n  atwin1500_fwtool.exe erase --tls\n  atwin1500_fwtool.exe erase --root --tls\n</code></pre>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-2/index.html#example_3","title":"Example","text":"<pre><code>$ atwin1500_fwtool.exe erase --tls --root\n\nErasing device...\nDetecting COM port...\nAvail port COM5\n1 of ports found\nTLS Certificate Store Updated Successfully On: Flash\nRoot Certificate Store Updated Successfully On: Flash\n</code></pre> <p>Then checking with a <code>read</code>:</p> <pre><code>$ atwin1500_fwtool.exe read\nDumping TLS Store contents...\nDetecting COM port...        Avail port COM5\n1 of ports found\nTLS Certificate Store Loaded Successfully From: Flash\n- Parsing TLS Store...\n- Found 0 entries...\n\nDumping Root Cert Store contents...\nRoot Certificate Store Loaded Successfully From: Flash\n- Found 0 entries!\n</code></pre>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-2/index.html#serial-bridge-arduino-port","title":"Serial Bridge Arduino Port","text":"<p>Awesome, now that we have all that working, there's still the promise of the \"Serial Bridge\" example which Microchip frequently mentions throughout their documentation.  </p> <p>By getting it working, we can interact directly with the ATWIN1500 module over USB using <code>atwin1500_firmware.exe</code>.</p> <p>Scouring the internet, you can find many, many versions of this mythical \"Serial Bridge\" example.  I settled on the  <code>serial_bridge_example</code> from the <code>avrxml/asf</code> repository.</p> <p>The ported code can be found here <code>peddamat/SerialBridge</code> and is configured to work out-of-the-box on Adafruit Feather M0 boards.</p>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-2/index.html#building_1","title":"Building","text":"<p>The project is a PlatformIO project and can be built and uploaded to the board using the <code>Upload</code> task:</p> <p></p> <p>The output log should look something like this:</p> <pre><code>Atmel SMART device 0x10010005 found\nErase flash\ndone in 0.824 seconds\n\nWrite 25192 bytes to flash (394 pages)\n[====                          ] 16% (64/394 pages)\n[=========                     ] 32% (128/394 pages)\n[==============                ] 48% (192/394 pages)\n[===================           ] 64% (256/394 pages)\n[========================      ] 81% (320/394 pages)\n[============================= ] 97% (384/394 pages)\n[==============================] 100% (394/394 pages)\ndone in 0.197 seconds\n\nVerify 25192 bytes of flash with checksum.\nVerify successful\ndone in 0.018 seconds\nCPU reset.\n=============================================================================== [SUCCESS] Took 33.98 seconds ===============================================================================\n</code></pre>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-2/index.html#usage_1","title":"Usage","text":"<p>Once the Feather MCU has been programmed with the Serial Bridge firmware, the we can use the <code>atwin1500_fwtool</code> to directly read, write, update, and erase the TLS and Root Cert Stores over USB!</p>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-2/index.html#notes","title":"Notes","text":"<p>Arduino provides a similar \"Serial Bridge\" in the form of the <code>FirmwareUpdater</code> sketch:</p> <p></p>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-2/index.html#supporting-code","title":"Supporting Code","text":"<p>A small reward for folks who made it all the way down here.  Here's how to grab the supporting code for this series:</p> <pre><code>git clone https://github.com/peddamat/hunter-hacking-adafruit.git adafruit\ngit submodule init\ngit submodule update\n</code></pre> <pre><code>$ git clone https://github.com/peddamat/hunter-hacking-adafruit.git adafruit\nCloning into 'adafruit'...\nremote: Enumerating objects: 6, done.\nremote: Counting objects: 100% (6/6), done.\nremote: Compressing objects: 100% (4/4), done.\nremote: Total 6 (delta 0), reused 6 (delta 0), pack-reused 0\nReceiving objects: 100% (6/6), done.\n\n$ cd adafruit\n\n$ git submodule init\nSubmodule 'AWS_IoT_WiFi' (https://github.com/peddamat/AWS_IoT_WiFi.git) registered for path 'AWS_IoT_WiFi'\nSubmodule 'CheckWifi101FirmwareVersion' (https://github.com/peddamat/CheckWifi101FirmwareVersion.git) registered for path 'CheckWifi101FirmwareVersion'\nSubmodule 'FirmwareUpdater' (https://github.com/peddamat/FirmwareUpdater.git) registered for path 'FirmwareUpdater'\nSubmodule 'SerialBridge' (https://github.com/peddamat/SerialBridge.git) registered for path 'SerialBridge'\nSubmodule 'WiFiSSLClient' (https://github.com/peddamat/WiFiSSLClient.git) registered for path 'WiFiSSLClient'\n$ git submodule update\nCloning into 'D:/adafruit/AWS_IoT_WiFi'...\nCloning into 'D:/adafruit/CheckWifi101FirmwareVersion'...\nCloning into 'D:/adafruit/FirmwareUpdater'...\nCloning into 'D:/adafruit/SerialBridge'...\nCloning into 'D:/adafruit/WiFiSSLClient'...\nSubmodule path 'AWS_IoT_WiFi': checked out '65ac6bdbc864748b4c48fe95dbdd041d50e33341'\nSubmodule path 'CheckWifi101FirmwareVersion': checked out '9593f8e9bdb041349084fef4bb3f06dc7aaf0e7f'\nSubmodule path 'FirmwareUpdater': checked out 'c1e5802f97e2d62f2ec3b486589b3b0cadf2a367'\nSubmodule path 'SerialBridge': checked out '6ccd76051e346f6db61f078a27da89b6fb6e11b2'\nSubmodule path 'WiFiSSLClient': checked out '89d6b111e2402d908edb44502ff8c29446c446ee'\n</code></pre>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/atwinc1500-iot-module-deep-dive-part-2/index.html#next-steps","title":"Next Steps","text":"<p>Now that we've added a few tools to our arsenal, let's take things further and see Hands On IoT MitM (Part 1)! </p> <code>#microchip</code> <code>#firmware</code> <code>#binary-analysis</code> <code>#iot</code>","tags":["microchip","firmware","binary-analysis","iot"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-1/index.html","title":"Hands On IoT MitM (Part 1)","text":"","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-1/index.html#hands-on-iot-mitm-part-1","title":"Hands On IoT MitM (Part 1)","text":"<p>This is the third article in the [Hunter Hacking]] Project.</p> <p>In [[How To Quickly Setup A Wireless MitM Proxy]], I discussed how to setup a \"Man In The Middle\" (MitM) proxy using Kali Linux, but what is  a man-in-the-middle proxy?  What are they used for?</p> <p>In this article we'll explore MitM proxies using Kali Linux and an Adafruit Feather M0 WiFi module.</p>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-1/index.html#the-basics","title":"The Basics","text":"<p>A man-in-the-middle (MITM) proxy is an application or device that intercepts communication between two parties and can eavesdrop, modify, or block data transmission.</p> <p>![man-in-the-middle-attack.png</p> <p>In the early days of the internet, before the Let's Encrypt  revolution, it was ridiculously easy to insert yourself in between one computer and another: Cain and Abel, ettercap, etherape...</p> <p>Mainly for lulz, but probably for some nefarious stuff, as well.</p> <p>Nowadays, unless you're \"leet\", it's basically impossible to \"sniff\" a random TLS-secured connection, unless... you have root on one of the devices.</p> <p>To better understand things, we're going to examine a few scenarios.</p> <p>Our intention is to understand what is required to intercept traffic between an ATWINC1500-based IoT device and an AWS IoT MQTT endpoint:</p> <ol> <li> <p>Basic SSL Connection</p> <p>By establishing a basic SSL connection, we confirm that our network is configured correctly to allow the microcontroller (uC) to connect to google.com over port 443.  We also confirm that the Root Cert Store on the uC contains a Root CA certificate which trusts Google's certificate****.</p> </li> <li> <p>MitM'd SSL Connection</p> <p>Establishing an SSL connection through <code>mitmproxy</code> allows us to understand what happens when an SSL connection is man-in-the-middle'd.  Learning how to get things working helps us understand the role that the Root Cert Store plays in the ATWINC1500.</p> </li> <li> <p>Basic MQTTS Connection</p> <p>This scenario allows us to understand how to get AWS IoT configured as an MQTT endpoint.  In addition, we learn how how to write TLS certificates to the ATWINC1500.</p> </li> <li> <p>MitM'd MQTTS Connection</p> <p>This final scenario allows us to understand how insert a... ...</p> </li> </ol> <p>For all of these tests, we'll be using an Adafruit Feather M0 module.</p>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-1/index.html#1-basic-ssl-connection","title":"1. Basic SSL Connection","text":"<p>The Arduino WiFi101 Library includes the <code>WifiSSLClient</code> example, which simply connects to an access point and retrieves the <code>google.com</code> homepages and prints it to the serial terminal.</p> <p></p> <p>We can use this example out-of-the-box, with one change.  Add the following to your <code>setup()</code>:</p> <pre><code>void setup() {\nWiFi.setPins(8, 7, 4, 2);\n... </code></pre> <p>After uploading the sketch to you should see the following:</p> <p></p>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-1/index.html#troubleshooting","title":"Troubleshooting","text":"<p>Didn't work?</p> <p>Try adding the <code>google.com</code> certificate to your ATWINC1500 by following the instructions here: ATWINC1500 IoT Module Deep-Dive (Part 1)#Uploading SSL Root Certificates.</p>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-1/index.html#2-mitmd-ssl-connection","title":"2. MitM'd SSL Connection","text":"<p>Now let's run the same example through a transparent proxy, using <code>mitmproxy</code>.  </p> <p>I'm going to setup my proxy, using the instructions here: How To Quickly Setup A Wireless MitM Proxy#Start Transparent MitM Proxy)</p>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-1/index.html#upload-sketch","title":"Upload Sketch","text":"<p>Update the <code>WifiSSLClient</code> sketch so that it connects to your proxy and re-run the sketch:</p> <p></p> <p>Hrm...  </p> <p>Checking the <code>mitmproxy</code> logs we see the following:</p> <pre><code>192.168.1.22:60689: client connect\n192.168.1.22:60689: server connect 17.248.180.49:443\n192.168.1.22:60689: Client TLS handshake failed. Client and mitmproxy cannot agree on a TLS version to use. You may need to adjust mitmproxy's tls_version_client_min option.\n192.168.1.22:60689: client disconnect\n192.168.1.22:60689: server disconnect 17.248.180.49:443\n192.168.1.3:62014: client connect\n192.168.1.3:62014: server connect 142.250.68.68:443\n192.168.1.3:62014: Client TLS handshake failed. The client disconnected during the handshake. If this happens consistently for www.google.com, this may indicate that the client does not trust the proxy's certificate.\n192.168.1.3:62014: client disconnect\n192.168.1.3:62014: server disconnect 142.250.68.68:443\n...\n</code></pre> <p>This line is of particular interest:</p> <p>Client TLS handshake failed. The client disconnected during the handshake. If this happens consistently for www.google.com, this may indicate that the client does not trust the proxy's certificate.</p> <p><code>mitmproxy</code> is hinting that something similar to this is happening within the microcontroller's network stack causing the connection to be aborted:</p> <p></p> <p>If you recall from How To Quickly Setup A Wireless MitM Proxy, the above error occurs when we haven't installed the <code>mitmproxy</code> root certificate.</p> <p>Let's test this hypothesis by installing the <code>mitmproxy</code> root certificate.</p>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-1/index.html#installing-mitmproxy-root-certificate","title":"Installing mitmproxy Root Certificate","text":"","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-1/index.html#1-upload-serial-bridge","title":"1. Upload Serial Bridge","text":"<p>First, we need to install the  [peddamat/SerialBridge]] so <code>atwinc1500_fwtool.exe</code> can talk directly to the ATWINC1500 module over USB.</p>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-1/index.html#2-obtain-certificate","title":"2. Obtain Certificate","text":"<p>You'll need a copy of the <code>mitmproxy</code> certificate, which you can grab by connecting to <code>bumper_mitm</code> on your phone and downloading the cert in <code>.cer</code> format.</p> <p>Place the certificate in a directory named \"certs\".</p> <pre><code>$ tree\n.\n\u251c\u2500\u2500 Interm\n...\n\u251c\u2500\u2500 atwinc1500_fwtool.exe\n\u251c\u2500\u2500 atwinc1500_fwtool.pdb\n\u2514\u2500\u2500 certs\n    \u2514\u2500\u2500 mitmproxy-ca-cert.cer\n</code></pre>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-1/index.html#3-write-certificate","title":"3. Write Certificate","text":"<p>To reduce any confounding variables, let's first erase both stores on our ATWINC1500.</p> <pre><code>$ atwinc1500_fwtool.exe erase --root\n\nErasing device...\nRoot Certificate Store Updated Successfully On: Flash\n</code></pre> <p>Confirming:</p> <pre><code>$ atwinc1500_fwtool.exe read\n\nDumping Root Cert Store contents...\nRoot Certificate Store Loaded Successfully From: Flash\n- Found 0 entries!\n...\n</code></pre> <p>Now we let's add the cert to the Root Cert Store:</p> <pre><code>$ atwinc1500_fwtool.exe update --root --ca_dir certs\n\nRoot Certificate Store Loaded Successfully From: Flash\n\n&gt;&gt;&gt;Found Certificate:\n&gt;&gt;&gt;     mitmproxy\nRoot Certificate Store Updated Successfully On: Flash\n</code></pre> <p>Confirming:</p> <pre><code>$ atwinc1500_fwtool.exe read\n\nDumping Root Cert Store contents...\nRoot Certificate Store Loaded Successfully From: Flash\n- Found 1 entries!\n  Name Hash (SHA1): 14 65 65 22 40 7A D1 30 64 06 9E 87 AD BB C5 31 7D 37 94 FF   Certificate 1: RSA\n  &lt;2023-03-19 20:00:22&gt; to &lt;2033-03-18 20:00:22&gt;\n</code></pre>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-1/index.html#re-upload-sketch","title":"Re-Upload Sketch","text":"<p>Re-uploading the Sketch and checking the serial monitor yields in: </p> <p>![Pasted image 20230323034716.png BOOM!!!</p>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-1/index.html#troubleshooting_1","title":"Troubleshooting","text":"Trouble connecting to your Adafruit Feather M0? <p>Check to make sure your VMWare Player isn't intercepting the USB device connection request:</p> <p></p>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-1/index.html#3-basic-mqtts-connection","title":"3. Basic MQTTS Connection","text":"<p>Now that we have a handle of the basics, let's model something more realistic, a scenario where our Adafruit Feather M0 is an IoT device which communicates with an AWS IoT MQTT endpoint.</p> <p>Before we get started, it's worth spending a moment talking about mutual TLS.</p> <p>TODO: Tighten up verbiage</p> <p>Mutual TLS (mTLS) differs from the TLS we've previously done, in that it's a protocol that allows a mutual exchange of keys during session initiation.</p> <p>What this means is that the \"IoT Device\" has its own unique public/private key pair, which essentially serves as a username and password when it connects to AWS IoT.</p> <p>This means... </p>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-1/index.html#aws-iot-setup","title":"AWS IoT Setup","text":"<p>First, you'll need to create an AWS account by heading over to: aws.amazon.com</p> <p>Next, scroll down and click the \"Connect an IoT device\" link under \"Build a solution\".</p> <p></p> <p>This will bring up a \"Prepare your device\" wizard:</p> <p></p> <p>Scroll down and click Next:</p> <p></p> <p>Under \"Thing properties\" enter \"feathermitm\":</p> <p></p> <p>and click Next:</p> <p></p> <p>Select \"Python\" and click Next:</p> <p></p> <p>Click Download connection kit and click Next:</p> <p></p> <p>Finish by clicking View thing:</p> <p></p>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-1/index.html#testing","title":"Testing","text":"","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-1/index.html#connection-kit","title":"Connection Kit","text":"<p>Unzip <code>connect_device_package.zip</code>: </p> <pre><code>$ tree\n.\n\u251c\u2500\u2500 feathermitm-Policy\n\u251c\u2500\u2500 feathermitm.cert.pem\n\u251c\u2500\u2500 feathermitm.private.key\n\u251c\u2500\u2500 feathermitm.public.key\n\u2514\u2500\u2500 start.sh\n</code></pre> <p>and run <code>start.sh</code> in a WSL terminal:</p> <pre><code>$ ./start.sh\n...\nRunning pub/sub sample application...\nConnecting to xxx.amazonaws.com with client ID 'basicPubSub'...\nConnected!\nSubscribing to topic 'sdk/test/python'...\nSubscribed with QoS.AT_LEAST_ONCE\nSending messages until program killed\nPublishing message to topic 'sdk/test/python': Hello World! [1]\nReceived message from topic 'sdk/test/python': b'\"Hello World! [1]\"'\n</code></pre> <p>We can see the messages show up in the \"MQTT test client\" section:</p> <p></p>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-1/index.html#mqtt-explorer","title":"MQTT Explorer","text":"<p>Since we're going to be in MQTT-world for a while, it's worth getting a hang of MQTT Explorer, a tool which lets us pub and sub MQTT endpoints:</p> <p></p> <p>Grab the connection settings from <code>start.sh</code>, populate the host name and port, and then click Advanced:</p> start.sh<pre><code>#!/usr/bin/env bash\n...\n# run pub/sub sample app using certificates downloaded in package\nprintf \"\\nRunning pub/sub sample application...\\n\"\npython3 aws-iot-device-sdk-python-v2/samples/pubsub.py --endpoint xxx.iot.amazonaws.com --ca_file root-CA.crt --cert feathermitm.cert.pem --key feathermitm.private.key --client_id basicPubSub --topic sdk/test/python --count 0\n</code></pre> <p>Set the \"MQTT Client ID\" to \"basicPubSub\" and click Certificates:</p> <p></p> <p>Populate the entries with the contents of the <code>connect_device_package</code> folder as shown, and click Back (twice):</p> <p></p> <p>NOW CLICK SAVE!!!</p> <p>Then click on \"MQTT test client\" in the AWS IoT sidebar, enter <code>sdk/test/python</code> in the Topic filter, and click Subscribe:</p> <p></p> <p>Back in MQTT Explorer, click \"Connect\", enter \"sdk/test/python\" in the Topic, add a message and click Publish:</p> <pre><code>{\n  \"message\": \"Hello from MQTT Explorer!\"\n}\n</code></pre> <p></p> <p>Back in \"MQTT test client\", you should see your message!</p> <p></p>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-1/index.html#iot-device-setup","title":"IoT Device Setup","text":"<p>Now that we've setup and tested our AWS IoT gateway, let's prepare our \"IoT device\".</p> <p>Unlike <code>mitmproxy</code>, IOXY requires some certificate configuration work to get things working.</p>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-1/index.html#write-certificates","title":"Write Certificates","text":"<p>For the mTLS handshake to work, we're going to need to upload the private key and cert to the ATWINC1500 TLS Server Store and Amazon's RootCA cert to its Root Cert Store.</p> <p>Start by renaming <code>root-CA.crt</code> to <code>root-CA.cer</code>:</p> <p></p> <p>Then upload the device's private key and certificate to the TLS Server Store:</p> Update TLS Server Store<pre><code>$ atwinc1500_fwtool.exe update \\\n--tls \\\n--key connect_device_package\\feathermitm.private.key \\\n--cert connect_device_package\\feathermitm.cert.pem\n\nTLS Certificate Store Loaded Successfully From: Flash\nTLS Certificate Store Updated Successfully On: Flash\n</code></pre> <p>Now upload the Amazon Root CA certificate to the Root Cert Store:</p> Update Root Cert Store<pre><code>$ atwinc1500_fwtool.exe update --root --ca_dir connect_device_package\n\nRoot Certificate Store Loaded Successfully From: Flash\n\n&gt;&gt;&gt;Found Certificate:\n&gt;&gt;&gt;     Amazon Root CA 1\nRoot Certificate Store Updated Successfully On: Flash\n</code></pre> <p>Verifying:</p> <pre><code>$ atwinc1500_fwtool.exe read\nDumping TLS Store contents...\nTLS Certificate Store Loaded Successfully From: Flash\nFound 3 entries...\n- RSA Certificate Chain File List\n  NAME                                             SIZE TYPE         INFO\n  PRIV_62a1f32e421df7f65e2290155189f76dbd6953bd    1208 PRIVATE KEY\n  CERT_62a1f32e421df7f65e2290155189f76dbd6953bd     861 CERTIFICATE  AWS IoT Certificate\n- Private Key Details:\n  Modulus (N) :(00B7440C)(256)\nA9 34 C5 DD 7F 50 C2 23 90 AA 85 5B DA EC 23 80\n09 AB E7 B8 1E 1F 66 1C 37 9E 3A 28 BB 9D 07 6C\n        AE D9 50 5C 45 D8 F1 5A 09 4A 44 A1 56 1F A6 41\n4C B4 20 2D D9 0F 78 68 E7 6E 11 61 94 54 70 13\nDF A0 86 38 BC 0F 9E 09 B0 04 39 53 F2 29 35 BF\n        8E FA 19 97 86 40 74 3C 20 79 B9 0F 2A 1E 7A 01\nF5 55 C2 BB CE F6 7A AA 14 48 BB 77 92 AB 0E 6D\n        C2 FE 6C 62 F6 DD 76 90 63 40 C8 58 2F 4F D6 B1\n        87 09 CF C7 40 34 24 E7 26 C1 BB 29 F5 45 C1 7D\n        75 4D 79 4A C0 F7 78 FA EA 7F 3F 44 DA F8 BE D0\n        17 3D 9E FF 0C BF F9 B6 C4 06 5F 12 88 7C C2 9F\n        B8 82 D3 E2 21 A9 73 72 AC 09 9B 2B 4F 91 8A 2D\n        E6 5F A0 83 73 82 56 5D 4E 6C 85 A9 43 87 74 81\n2A B3 47 D5 E2 18 F8 39 FC 66 1A 5B D2 C4 06 24\nCC 4C 0E BF 49 2A 90 3D 0F 47 12 16 52 F0 5E B7\n        4A 3E F4 76 02 6E 64 C0 16 0B 14 A7 93 90 58 99\n- TLS Certificate Details:\n    Subject &lt;AWS IoT Certificate&gt;\n    Issuer  &lt; &gt;\n    &lt;2023-03-23 12:47:18&gt; to &lt;2049-12-31 23:59:59&gt;\n\nDumping Root Cert Store contents...\nRoot Certificate Store Loaded Successfully From: Flash\nFound 1 entries:\n1) RSA Certificate: 5/26/2015 [00:00:00] to 1/17/2038 [00:00:00]\nName Hash (SHA1): A8 66 80 C4 56 27 2E AF E3 A7 CE 2E 49 D1 31 DC 65 BB B1 ED\n</code></pre>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-1/index.html#upload-sketch_1","title":"Upload Sketch","text":"<p>The <code>Arduino Cloud Provider Examples</code> Library includes the <code>AWS_IoT_WiFi</code> sketch, which can be used to connect to the AWS IoT Gateway.</p> <p>Install it by opening the Library Manager and search for \"Arduino Cloud\":</p> <p>Now, open the <code>AWS_IoT_WiFi</code> sketch:</p> <p></p> <p>Alternatively, use the PlatformIO code here: peddamat/AWS_IoT_WiFi</p> <p>Compiling and uploading the sketch results in:</p> <p></p> <p>Voila!</p> <p>You should see this in the \"MQTT test client\" console:</p> <p></p>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-1/index.html#next-steps","title":"Next Steps","text":"<p>Ok, as usual, things have gone way longer than expected, so we'll leave the grand finale to the next part, here:  Hands On IoT MitM (Part 2).</p>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-1/index.html#troubleshooting_2","title":"Troubleshooting","text":"Having issues connecting to IOXY from MQTT Explorer? <p>You can check to see if your firewall is blocking connections between your machine and your WSL container by launching a Python web server on each port, and checking accessibility via a web browser.</p> <pre><code>[I] \u276f python3 -m http.server\nServing HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...\n127.0.0.1 - - [23/Mar/2023 16:23:33] \"GET / HTTP/1.1\" 200 -\n127.0.0.1 - - [23/Mar/2023 16:23:33] code 404, message File not found\n127.0.0.1 - - [23/Mar/2023 16:23:33] \"GET /favicon.ico HTTP/1.1\" 404 -\n</code></pre> <pre><code>[I] \u276f python3 -m http.server 8883\nServing HTTP on 0.0.0.0 port 8883 (http://0.0.0.0:8883/) ...\n</code></pre> Having issues with the atwinc1500_fwtool update command? <p>You can debug the atwinc1500_fwtool.exe binary by opening the solution in Visual Studio 2022 and:</p> <p></p> <p></p> <pre><code>update --key=..\\aws-iot-certs\\adafeathermqtt.private.key -p12 --cert=..\\aws-iot-certs\\adafeathermqtt.cert.pem --ca_dir=..\\aws-iot-certs\\RootCA\n</code></pre>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-1/index.html#links","title":"Links","text":"<ul> <li>Connecting a device to AWS IoT Core by using the AWS IoT Device SDK</li> <li>AWS IoT and Adafruit WICED Feather</li> <li>Building an AWS IoT Core device using AWS Serverless and an ESP32</li> <li>Securely Connecting an Arduino MKR WiFi 1010 to AWS IoT Core</li> <li>MicrochipTech/aws-iot-winc1500-secure-wifi-board-included-source-files</li> <li>https://github.com/peddamat/winc </li> </ul> <code>#microchip</code> <code>#firmware</code> <code>#analysis</code> <code>#iot</code> <code>#mitm</code>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-2/index.html","title":"Hands On IoT MitM (Part 2)","text":"","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-2/index.html#hands-on-iot-mitm-part-2","title":"Hands On IoT MitM (Part 2)","text":"<p>If you haven't read Hands On IoT MitM (Part 1), you really should </p> <p>Ok, so where were we...  we've got our little \"IoT Device\" Googling over SSL, Googling over SSL through <code>mitmproxy</code>, chatting away with AWS IoT over MQTT, and <code>IOXY</code> is setup and ready to transparently proxy its messages to AWS IoT.</p> <p>So the final bit seems pretty easy, we just need to flash some certs and figure out how to get IOXY to intercept our traffic.</p> <p>Let's start with the latter.</p>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-2/index.html#4-mitmd-mqtts-connection","title":"4. MitM'd MQTTS Connection","text":"<p>For the final piece of this saga, we're going to want to intercept our humble hello messages, as they leave our \"IoT Device\" and make their way to AWS IoT.</p> <p>To do this, we'll going to use IOXY, an \" MQTT intercepting proxy\", which  IOXY plays the role of <code>mitmproxy</code> from our [Basic SSL Connection]] example.</p> <p>Conveniently, IOXY comes with an AWS PubSub example, which is worth reading through to get familiar with the tool. </p>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-2/index.html#ioxy-setup","title":"IOXY Setup","text":"<p>Check the code out from my repo: peddamat/IOXY (my fork includes fixes not yet in upstream)</p> <p>Open it in Visual Studio Code.  When prompted to \"Reopen in Container\", please do so:</p> <p>![[Pasted image 20230323201037.png]]</p>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-2/index.html#building","title":"Building","text":"<p>Open a VSCode terminal and type <code>./build.sh</code>:</p> <pre><code>[I] \u276f ./build.sh\ngo: downloading github.com/GeertJohan/go.rice v1.0.3\n...\n</code></pre> <p>Which places the binary in <code>ioxy\\ioxy</code>.</p> VSCode terminal? <p>![Pasted image 20230323201153.png</p>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-2/index.html#cert-setup","title":"Cert Setup","text":"<p>Unlike <code>mitmproxy</code>, we have to fiddle with certificates to get things working.  If you recall, we're using mTLS, which means that our \"IoT Device\" has a private key and certificate.</p> <p>For IOXY to serve as an intermediary, it's going to need to use those, itself, to connect to AWS IoT.  </p> <p>Conversely, IOXY will need to present an endpoint to our \"IoT Device\", so IOXY needs its own Root CA certificate, and the device needs a new private key and certificate combo.</p>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-2/index.html#client-side-certs","title":"Client-Side Certs","text":"<p>IOXY comes with the <code>ioxy/certs/genCerts.sh</code> script, which generates a self-signed Root CA certificate and device certs:</p> genCerts.sh<pre><code>#!/bin/sh\nDEVICE_NAME=\"d1\"\n# create directories if needed\nmkdir -p \"./ca\"\nmkdir -p \"./devices/$DEVICE_NAME\"\nmkdir -p \"./verificationCert\"\n# generate root key\necho \"=============------------============\"\necho \"[+] Generating Root cert\"\necho \"=============------------============\"\necho \"\"\ncd \"./ca\"\nopenssl genrsa -out rootCA.key 2048 &amp;&amp; openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 1024 -out rootCA.pem\ncd ..\n\n# generate verification cert\necho \"\"\necho \"=============------------============\"\necho \"[+] Generating Verification cert\"\necho \"=============------------============\"\necho \"\"\ncd \"./verificationCert\"\nopenssl genrsa -out verificationCert.key 2048 &amp;&amp; openssl req -new -key verificationCert.key -out verificationCert.csr &amp;&amp; openssl x509 -req -in verificationCert.csr -CA ../ca/rootCA.pem -CAkey ../ca/rootCA.key -CAcreateserial -out verificationCert.pem -days 500 -sha256\ncd ..\n\n# generate device cert\necho \"\"\necho \"=============------------============\"\necho \"[+] Generating Device cert\"\necho \"=============------------============\"\necho \"\"\ncd \"./devices/$DEVICE_NAME\"\nopenssl genrsa -out $DEVICE_NAME.key 2048 &amp;&amp; openssl req -new -key $DEVICE_NAME.key -out $DEVICE_NAME.csr &amp;&amp; openssl x509 -req -in $DEVICE_NAME.csr -CA ../../ca/rootCA.pem -CAkey ../../ca/rootCA.key -CAcreateserial -out $DEVICE_NAME.pem -days 500 -sha256\n\necho \"\"\necho \"=============------------============\"\necho \"[+] Done!\"\necho \"=============------------============\"\necho \"\"\n</code></pre> <p>Running the <code>genCerts.sh</code> script...</p> <pre><code>$ ./genCerts.sh =============------------============\n[+] Generating Root cert\n=============------------============\n...\n</code></pre> <p>... generates the following:</p> <pre><code>$ tree\n.\n...\n\u251c\u2500\u2500 ca\n\u2502   \u251c\u2500\u2500 rootCA.key\n\u2502   \u251c\u2500\u2500 rootCA.pem\n\u2502   \u2514\u2500\u2500 rootCA.srl\n\u251c\u2500\u2500 devices\n\u2502   \u2514\u2500\u2500 d1\n\u2502       \u251c\u2500\u2500 d1.csr\n\u2502       \u251c\u2500\u2500 d1.key\n\u2502       \u2514\u2500\u2500 d1.pem\n\u2514\u2500\u2500 verificationCert\n    \u251c\u2500\u2500 verificationCert.csr\n    \u251c\u2500\u2500 verificationCert.key\n    \u2514\u2500\u2500 verificationCert.pem\n</code></pre>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-2/index.html#server-side-certs","title":"Server-Side Certs","text":"<p>We need the Amazon-provided certificates to be handy, so copy the <code>connect_device_package</code> into <code>ioxy\\certs</code>:</p> <pre><code>$ tree\n.\n...\n\u251c\u2500\u2500 ca\n\u2502   \u251c\u2500\u2500 rootCA.key\n\u2502   \u251c\u2500\u2500 rootCA.pem\n\u2502   \u2514\u2500\u2500 rootCA.srl\n\u251c\u2500\u2500 connect_device_package\n\u2502   \u251c\u2500\u2500 aws-iot-device-sdk-python-v2\n\u2502   \u251c\u2500\u2500 feathermitm-Policy\n\u2502   \u251c\u2500\u2500 feathermitm.cert.pem\n\u2502   \u251c\u2500\u2500 feathermitm.private.key\n\u2502   \u251c\u2500\u2500 feathermitm.public.key\n\u2502   \u251c\u2500\u2500 root-CA.crt\n\u2502   \u2514\u2500\u2500 start.sh\n\u251c\u2500\u2500 devices\n\u2502   \u2514\u2500\u2500 d1\n\u2502       \u251c\u2500\u2500 d1.csr\n\u2502       \u251c\u2500\u2500 d1.key\n\u2502       \u2514\u2500\u2500 d1.pem\n\u251c\u2500\u2500 genCerts.sh\n\u2514\u2500\u2500 verificationCert\n    \u251c\u2500\u2500 verificationCert.csr\n    \u251c\u2500\u2500 verificationCert.key\n    \u2514\u2500\u2500 verificationCert.pem\n</code></pre>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-2/index.html#usage","title":"Usage","text":"<p>IOXY can be started using the <code>run.sh</code> script.</p> <p>Before running it, be sure to update the <code>ENDPOINT</code> and <code>THINGNAME</code>:</p> run.sh<pre><code>#!/bin/sh\nENDPOINT=\"xxx-ats.iot.us-west-2.amazonaws.com\"\nTHINGNAME=\"feathermitm\"\n./ioxy mqtts \\\n-mqtts-port 8883 \\\n-mqtts-cert certs/verificationCert/verificationCert.pem \\\n-mqtts-key certs/verificationCert/verificationCert.key \\\nbroker \\\n-mqtt-broker-tls \\\n-mqtt-broker-host ${ENDPOINT} \\\n-mqtt-broker-port 8883 \\\n-mqtt-broker-cert certs/connect_device_package/${THINGNAME}.cert.pem \\\n-mqtt-broker-key certs/connect_device_package/${THINGNAME}.private.key\n</code></pre> <p>Then run the script:</p> <pre><code>$ ./run.sh\n\nLog Level Set To : info\n[...]  INFO auth : no auth url configured : bypassing!\n[...]  INFO Starting ioxy\n[...]  INFO MiTM Broker Settings | Mode : mqtts | Host : 0.0.0.0 | Port : 8883\n[...]  INFO Distant Broker Settings | Host : xxx-ats.iot.us-west-2.amazonaws.com | Port : 8883\n[...]  INFO Broker Misc | Payload Intercept : disabled\n[...]  INFO mqtts: listening on mqtts://0.0.0.0:8883\n</code></pre>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-2/index.html#testing","title":"Testing","text":"<p>Now that we have IOXY setup, let's make sure it's configured properly.</p> <p>Once we're comfortable that things are working, we can get our Adafruit Feather M0 connected.</p> <p>To do this we can use the handy dandy MQTT Explorer:</p>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-2/index.html#mqtt-explorer","title":"MQTT Explorer","text":"<p>Awesome!</p>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-2/index.html#intercepting-traffic","title":"Intercepting Traffic","text":"<p>There are a few ways to accomplish this:</p> <ol> <li>Update the damn code</li> <li> <p>Use DNS-based attack</p> <p>This is a good choice if we don't have access to the device's source code, and have admin of the network.  To do this we'll need to:</p> <ol> <li>Need to serve spoofed IP address to device</li> <li>Need to intercept the device's hard-coded DNS server</li> </ol> </li> <li> <p>Use routing-based attack </p> <p>This is a good choice if we don't have access to the device's source code, have admin of the network, and don't want to mess with DNS.   To do this we'll need to:</p> <ol> <li>Modify network route to route traffic from IoT device to IOXY</li> </ol> </li> <li> <p>Use wireless man-in-the-middle attack </p> <p>This choice works if you don't have access to the device source and you don't have control of the network.  To do this we'll need to:</p> <ol> <li>Setup a [bridged MitM proxy]].</li> <li>Reconfigure device to connect to MitM SSID.</li> </ol> </li> </ol>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-2/index.html#1-updating-the-damn-code","title":"1. Updating The Damn Code","text":"<p>Of course, this is the simplest way to convince our device to connect to our IOXY proxy.  If we have access to the device and to the device's source code, it's a trivial matter to... well, let's just do it. </p>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-2/index.html#arduino-setup","title":"Arduino Setup","text":"<p>Load the <code>AWS_IoT_WiFi</code> sketch and  update the <code>SECRET_BROKER</code> in your <code>arduino_secrets.h</code>, pointing it to the IP address of the machine running IOXY:</p> <pre><code>// Fill in  your WiFi networks SSID and password\n#define SECRET_SSID \"\"\n#define SECRET_PASS \"\"\n\n// Fill in the hostname of your AWS IoT broker\n//#define SECRET_BROKER \"xxx-ats.iot.us-west-2.amazonaws.com\"\n#define SECRET_BROKER \"172.16.1.172\"\n</code></pre> <p>Upload and run the sketch, and...</p> <p>![Pasted image 20230323215613.png</p> <p>The IOXY logs only state that the client has closed the connection:</p> <pre><code>vscode@ec86a37648ea:/workspaces/IOXY/ioxy$ ./run.sh Log Level Set To : info\n[...]  INFO auth : no auth url configured : bypassing!\n[...]  INFO Starting ioxy\n[...]  INFO MiTM Broker Settings | Mode : mqtts | Host : 0.0.0.0 | Port : 8883\n[...]  INFO Distant Broker Settings | Host : xxx-ats.iot.us-west-2.amazonaws.com | Port : 8883\n[...]  INFO Broker Misc | Payload Intercept : disabled\n[...]  INFO mqtts: listening on mqtts://0.0.0.0:8883\n[...]  INFO New client connected\n[...] ERROR Session 43b29e53-a4e2-4452-9cb4-eb37f639a413 &gt; - Error reading MQTT packet\n[...]  INFO The client may have closed the connection\n...\n</code></pre> <p>So, what's happening here?   The error message seems very similar to the <code>mitmproxy</code> error we experienced back in Hands On IoT MitM (Part 1)#2. MitM'd SSL Connection.</p> <p>When we last touched the device, we'd just finished uploading the Amazon Root CA certificate to the device's Root Cert Store.</p> <p>Now, when we configured IOXY, <code>genCerts.sh</code> generated a Root CA certificate for IOXY, which it used to sign the device's verification cert.</p> <p>Let's see what happens when we add IOXY's Root CA certificate to the device's Root Cert Store.</p>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-2/index.html#prepare-root-cert-store","title":"Prepare Root Cert Store","text":"<p>First, erase the Root Cert Store:</p> <pre><code>$ atwinc1500_fwtool.exe erase --root\nErasing device...\nDetecting COM port...\nRoot Certificate Store Updated Successfully On: Flash\n</code></pre> <p>Check to make sure it worked:</p> <pre><code>$ atwinc1500_fwtool.exe read\nDumping TLS Store contents...\n...\nDumping Root Cert Store contents...\nRoot Certificate Store Loaded Successfully From: Flash\n- Found 0 entries!\n</code></pre> <p>Now, copy over the <code>genCerts.sh</code> generated <code>rootCA.cer</code> to somewhere handy:</p> <p></p> <p>Run the <code>update</code> command:</p> <p>```bash hl_line=\"22\" $ atwinc1500_fwtool.exe update --ca_dir certs TLS Certificate Store Loaded Successfully From: Flash Root Certificate Store Loaded Successfully From: Flash</p> <p>Found Certificate:     mitmproxy</p> <p>Found Certificate:</p> <p>Root Certificate Store Updated Successfully On: Flash </p><pre><code>Check to make sure *that* worked:\n\n```bash hl_lines=\"14 16-17 19-20\"\n$ atwinc1500_fwtool.exe read\nDumping TLS Store contents...\n...\nDumping Root Cert Store contents...\nRoot Certificate Store Loaded Successfully From: Flash\n- Found 2 entries!\n\n  Name Hash (SHA1): 14 65 65 22 40 7A D1 30 64 06 9E 87 AD BB C5 31 7D 37 94 FF   Certificate 1: RSA\n  &lt;2023-03-19 20:00:22&gt; to &lt;2033-03-18 20:00:22&gt;\n\n  Name Hash (SHA1): 85 E9 39 C3 32 E4 60 1F 7E 69 9A 5F 49 99 76 39 FC BB D9 87   Certificate 2: RSA\n  &lt;2023-03-24 04:48:33&gt; to &lt;2026-01-11 04:48:33&gt;\n</code></pre>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-2/index.html#upload-sketch","title":"Upload Sketch","text":"<p>Upload and run the sketch:</p> <p></p> <p> Amazing, it worked!</p> <p>Checking the IOXY logs:</p> <pre><code>vscode@ec86a37648ea:/workspaces/IOXY/ioxy$ ./run.sh Log Level Set To : info\n[...]  INFO auth : no auth url configured : bypassing!\n[...]  INFO Starting ioxy\n[...]  INFO MiTM Broker Settings | Mode : mqtts | Host : 0.0.0.0 | Port : 8883\n[...]  INFO Distant Broker Settings | Host : xxx-ats.iot.us-west-2.amazonaws.com | Port : 8883\n[...]  INFO Broker Misc | Payload Intercept : disabled\n[...]  INFO mqtts: listening on mqtts://0.0.0.0:8883\n[...]  INFO New client connected\n[...]  INFO New client added to the database\n[...]  INFO client &gt; broker | Subscribe | packet : SessionId : ., Topic : sdk/test/python, Dup : false, QoS : 1, Retain : false\n[...]  INFO client &gt; broker | Publish | packet : SessionId : ., Topic : sdk/test/python , Payload : hello 5847, Dup : false, QoS : 0, Retain : false\n</code></pre>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-2/index.html#2-using-dns","title":"2. Using DNS","text":"","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-2/index.html#spoofing-ip-address","title":"Spoofing IP Address","text":"<p>I use AdGuard, which provides an easy way to rewrite DNS:</p> <p></p> <p>Confirming things are working:</p> <pre><code>$ ping xxx.iot.amazonaws.com\nPING xxx.iot.amazonaws.com (172.16.1.172) 56(84) bytes of data.\n64 bytes from host.docker.internal (172.16.1.172): icmp_seq=1 ttl=127 time=0.372 ms\n64 bytes from host.docker.internal (172.16.1.172): icmp_seq=2 ttl=127 time=0.306 ms\n64 bytes from host.docker.internal (172.16.1.172): icmp_seq=3 ttl=127 time=0.277 ms\n</code></pre> <p>Great!</p>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-2/index.html#handling-hard-coded-dns","title":"Handling Hard-Coded DNS","text":"<p>I also use NAT Masquerading  to force all devices on my network to use my AdGuard DNS server.  What this means is that when a device initiates a request to a hard-coded DNS server, my router transparently rewrites the destination IP address of port 53 (DNS) traffic to my AdGuard server.</p> <p>See Your Smart TV is probably ignoring your PiHole for a handy guide on doing this on your network.</p> <p></p> <p>Updating my computer's network config to \"hard-code\" a DNS server:</p> <pre><code>$ ipconfig /all\n\nWireless LAN adapter Wi-Fi:\n\n   Connection-specific DNS Suffix  . : xxx.home\n   Description . . . . . . . . . . . : Intel(R) Dual Band Wireless-AC 7265\n   ...\n   IPv4 Address. . . . . . . . . . . : 172.16.1.172(Preferred)\n   ...\n   DNS Servers . . . . . . . . . . . : 8.8.8.8\n</code></pre> <p>Confirming things are working:</p> <pre><code>$ ping xxx.iot.amazonaws.com\nPING xxx.iot.amazonaws.com (172.16.1.172) 56(84) bytes of data.\n64 bytes from host.docker.internal (172.16.1.172): icmp_seq=1 ttl=127 time=0.372 ms\n64 bytes from host.docker.internal (172.16.1.172): icmp_seq=2 ttl=127 time=0.306 ms\n64 bytes from host.docker.internal (172.16.1.172): icmp_seq=3 ttl=127 time=0.277 ms\n</code></pre>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-2/index.html#3-using-routing","title":"3. Using Routing","text":"<p>TBD</p>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-2/index.html#using-wireless-mitm","title":"Using Wireless MitM","text":"<p>Check out How To Quickly Setup A Wireless MitM Proxy for a good starting point.</p>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/hands-on-iot-mitm-part-2/index.html#graveyard","title":"Graveyard","text":"<pre><code>$ atwinc1500_fwtool.exe update --root --ca_dir output-dryrun\\public-rsa-cert-01.der\n</code></pre> <pre><code>$ atwinc1500_fwtool.exe read -p5\n\nDumping TLS Store contents...\nTLS Certificate Store Loaded Successfully From: Flash\nFound 3 entries...\n- RSA Certificate Chain File List\n  NAME                                             SIZE TYPE         INFO\n  PRIV_62a1f32e421df7f65e2290155189f76dbd6953bd    1208 PRIVATE KEY\n  CERT_62a1f32e421df7f65e2290155189f76dbd6953bd     861 CERTIFICATE  AWS IoT Certificate\n- Private Key Details:\n  Modulus (N) :(013D9DA4)(256)\n        A9 34 C5 DD 7F 50 C2 23 90 AA 85 5B DA EC 23 80\n        09 AB E7 B8 1E 1F 66 1C 37 9E 3A 28 BB 9D 07 6C\n        AE D9 50 5C 45 D8 F1 5A 09 4A 44 A1 56 1F A6 41\n        4C B4 20 2D D9 0F 78 68 E7 6E 11 61 94 54 70 13\n        DF A0 86 38 BC 0F 9E 09 B0 04 39 53 F2 29 35 BF\n        8E FA 19 97 86 40 74 3C 20 79 B9 0F 2A 1E 7A 01\n        F5 55 C2 BB CE F6 7A AA 14 48 BB 77 92 AB 0E 6D\n        C2 FE 6C 62 F6 DD 76 90 63 40 C8 58 2F 4F D6 B1\n        87 09 CF C7 40 34 24 E7 26 C1 BB 29 F5 45 C1 7D\n        75 4D 79 4A C0 F7 78 FA EA 7F 3F 44 DA F8 BE D0\n        17 3D 9E FF 0C BF F9 B6 C4 06 5F 12 88 7C C2 9F\n        B8 82 D3 E2 21 A9 73 72 AC 09 9B 2B 4F 91 8A 2D\n        E6 5F A0 83 73 82 56 5D 4E 6C 85 A9 43 87 74 81\n        2A B3 47 D5 E2 18 F8 39 FC 66 1A 5B D2 C4 06 24\n        CC 4C 0E BF 49 2A 90 3D 0F 47 12 16 52 F0 5E B7\n        4A 3E F4 76 02 6E 64 C0 16 0B 14 A7 93 90 58 99\n\n- TLS Certificate Details:\n    Subject &lt;AWS IoT Certificate&gt;\n    Issuer  &lt; &gt;\n    &lt;2023-03-23 12:47:18&gt; to &lt;2049-12-31 23:59:59&gt;\n\nDumping Root Cert Store contents...\nRoot Certificate Store Loaded Successfully From: Flash\nFound 1 entries:\n1) RSA Certificate: 5/26/2015 [00:00:00] to 1/17/2038 [00:00:00]\n   Name Hash (SHA1): A8 66 80 C4 56 27 2E AF E3 A7 CE 2E 49 D1 31 DC 65 BB B1 ED\n</code></pre> <code>#microchip</code> <code>#firmware</code> <code>#analysis</code> <code>#iot</code> <code>#mitm</code>","tags":["microchip","firmware","analysis","iot","mitm"]},{"location":"projects/hunter-hacking/reverse-engineering-a-hunter-pro-hc-controller/index.html","title":"Reverse Engineering A Hunter Pro HC Controller","text":"<p>This is the final part of the [Hunter Hacking]] series</p> <p>All right, it's been a long journey, let's take a quick survey:</p> <ul> <li> <p>[[A Look Inside A Hunter Pro-HC Controller]]</p> <p>Here we discovered the Hunter Pro-HC Irrigation controller uses the Microchip ATWINC1500 IoT module as part of its architectural design.  We also learned that the controller communicates with backend services on Amazon using MQTTS on port 8883.</p> </li> <li> <p>[[ATWINC1500 IoT Module Deep-Dive (Part 1)]]</p> <p>Here we learned that the ATWINC1500 has easily accessible debug interfaces which allow firmware extraction.  We also learned that the module stores Root CA certificates in its Root Cert Store and TLS certificates in its TLS Server Store.</p> </li> <li> <p>[[ATWINC1500 IoT Module Deep-Dive (Part 2)]]</p> <p>Here we modify the Microchip-supplied ATWINC1500 tools to allow dumping and modification of the Root Cert Store and TLS Server Store contents.</p> </li> <li> <p>[[Hands On IoT MitM (Part 1)]]</p> <p>Here we learn about intercepting traffic between ATWINC1500-based IoT devices and Amazon AWS IoT.</p> </li> <li> <p>[Hands On IoT MitM (Part 2)</p> <p>Here we actually intercept traffic between an ATWINC1500-based IoT device and Amazon AWS IoT.</p> </li> </ul> <p>In this final series of articles, we will try to actually man-in-the-middle the Hunter Pro-HC Irrigation Controller and integrate it with Home Assistant.</p>","tags":["microchip","firmware","analysis","uC"]},{"location":"projects/hunter-hacking/reverse-engineering-a-hunter-pro-hc-controller/index.html#firmware-extraction","title":"Firmware Extraction","text":"<p>The first thing we'll need to do is dump the Hunter Pro-HC's firmware so we can extract the device's private key and certificate.  </p>","tags":["microchip","firmware","analysis","uC"]},{"location":"projects/hunter-hacking/reverse-engineering-a-hunter-pro-hc-controller/index.html#hardware-setup","title":"Hardware Setup","text":"<p>I'm going to use the same steps we used in Firmware Extraction with the board outs from [Board Outs]].</p> <p>![Pasted image 20230321012439.png </p>","tags":["microchip","firmware","analysis","uC"]},{"location":"projects/hunter-hacking/reverse-engineering-a-hunter-pro-hc-controller/index.html#executing-dump","title":"Executing Dump","text":"Hunter Pro-HC<pre><code>$ winc_programmer_uart.exe -p COM4 -d winc1500 -r -pfw programmer_firmware.bin -o atwinc1500-hunter.bin\nWINC Programming Tool 2.0.1 [ceebe5f] (Apr 20 2022)\nCopyright (C) Microchip Technology Inc. 2022\nhardware WINC serial bridge found\nchip ID is 0x001503a0\nprogramming firmware file: programmer_firmware.bin\nreinitialise onchip uart to 500000\nwaiting for firmware to run\nflash ID 0xc21320c2\nflash size is 4 Mb\n\nbegin read operation\n\n0x000000:[rrrrrrrr] 0x008000:[rrrrrrrr] 0x010000:[rrrrrrrr] 0x018000:[rrrrrrrr]\n0x020000:[rrrrrrrr] 0x028000:[rrrrrrrr] 0x030000:[rrrrrrrr] 0x038000:[rrrrrrrr]\n0x040000:[rrrrrrrr] 0x048000:[rrrrrrrr] 0x050000:[rrrrrrrr] 0x058000:[rrrrrrrr]\n0x060000:[rrrrrrrr] 0x068000:[rrrrrrrr] 0x070000:[rrrrrrrr] 0x078000:[rrrrrrrr]\noutput file format not specified, assuming 'raw'\n</code></pre> <p>Having trouble?</p> <p>It took me a ~15 tries to get the dump to work.  Here are some tips: - Make sure you're powering the board with 3.3V - Make sure you're supplying enough power to the board - Try disconnecting the display flex cable  - Try manually trying the ATWINC1500 <code>RESET_N</code> pin high - Pray</p>","tags":["microchip","firmware","analysis","uC"]},{"location":"projects/hunter-hacking/reverse-engineering-a-hunter-pro-hc-controller/index.html#firmware-analysis","title":"Firmware Analysis","text":"<p>We can now dump the Root Cert Store and TLS Server Store contents using:</p> <pre><code>$ atwinc1500_fwtool.exe read atwinc1500-hunter.bin -o output-hunter\n\nDumping TLS Store contents...\n- TLS Certificate Store Loaded Successfully From: Firmware Image\nFound 3 entries...\n- RSA Certificate Chain File List\n  NAME                                             SIZE TYPE         INFO\n  PRIV_00ecf54963945448ad3fe767799ed084f6b2befda4  1208 PRIVATE KEY\n  CERT_00ecf54963945448ad3fe767799ed084f6b2befda4   862 CERTIFICATE  AWS IoT Certificate\n- Private Key Details:\n  Modulus (N) :(015430B4)(256)\nD1 CD 2B BD DA A8 2E 05 E3 DA D6 1A D0 B9 8E 50\n06 DB 67 E1 E2 74 64 0A E0 82 88 89 C5 06 BA C8\n        EB 4B A0 1D 99 68 85 CE 16 E0 A9 8C 9E 02 11 70\nF9 72 70 D1 C4 2A 31 A8 BA 99 82 94 5F 3B F8 1C\n        81 FB 27 69 02 2B DF 6A 5F 31 46 80 FE 87 32 DF\n        54 96 B2 12 F6 F6 B4 B2 CB 9E EA 45 E4 1A A6 DF\n        AB 93 25 27 C0 77 F0 6C AF C5 40 42 90 87 EE 7F\n        0C DD F8 BC 78 CE 79 C6 B5 91 50 63 6E B6 8D 3D\n        A4 6D E2 3D 9A 84 ED 39 BB A9 04 ED 6E 34 22 0E\n        F3 F4 2C 14 EB CD 94 2A 99 D9 D7 F3 73 3D 16 BD\n        25 20 B4 84 89 4D 47 3F E7 F4 E8 DA A4 E0 41 05\nCB C6 7F 42 C6 18 BA EC 33 56 12 16 7F A4 38 E4\n        96 00 13 13 4D DF 23 9F D4 FD 4E 21 BA B7 8A 6B\n        5B 44 FF 37 62 30 B6 97 00 EA CD 2E 52 93 EF 51\n85 F6 8B B3 E0 4D 97 9E 87 BE E9 DB C4 89 84 E6\n        90 88 80 D5 18 71 21 84 5E 92 41 46 4B 70 42 55\nDumping Root Cert Store contents...\n- Root Certificate Store Loaded Successfully From: Firmware Image\n- Found 3 entries:\n1) RSA Certificate: 11/8/2006 [00:00:00] to 7/16/2036 [23:59:59]\nName Hash (SHA1): B8 0D 5E D3 51 52 3F ED 85 37 20 A0 AC C0 DC 13 77 BE 16 0C\n2) RSA Certificate: 5/26/2015 [00:00:00] to 1/17/2038 [00:00:00]\nName Hash (SHA1): A8 66 80 C4 56 27 2E AF E3 A7 CE 2E 49 D1 31 DC 65 BB B1 ED\n3) RSA Certificate: 5/26/2015 [00:00:00] to 5/26/2040 [00:00:00]\nName Hash (SHA1): 1A 49 C7 63 82 3A 9E 3F 53 2D F1 BA 1F BF 7E B0 13 0F BB 1A\n</code></pre> <p>Which results in:</p> <pre><code>$ tree -a -L 3\n.\n\u251c\u2500\u2500 RSA_AWS IoT Certificate.cer\n\u251c\u2500\u2500 private-key.asn1\n\u251c\u2500\u2500 private-key.bat\n\u251c\u2500\u2500 public-key.bat\n\u251c\u2500\u2500 public-rsa-cert-01.asn1\n\u251c\u2500\u2500 public-rsa-cert-02.asn1\n\u2514\u2500\u2500 public-rsa-cert-03.asn1\n</code></pre> <p>It looks like we have the device's private key named <code>private-key</code> and certificate named <code>RSA_AWS IoT Certificate.cer</code>.</p> <p>Spidey senses tingling?  Yep, feels familar: Hands On IoT MitM (Part 1)#3. Basic MQTTS Connection.</p> <p>Here's what the two look like side-by-side:</p> <p> </p> <p>At this point, we can be 99% certain that the Hunter Pro HC is using vanilla AWS IoT  as its backend service.</p> <p>Is this legal?</p> <p>IANAL, so I'll only speak to technical aspects, but having the private key and certificate in no-way gives us, or our Hunter Pro-HC controller, any \"more\" access to Hunter's AWS IoT backend services than we had before we extracted them.</p>","tags":["microchip","firmware","analysis","uC"]},{"location":"projects/hunter-hacking/reverse-engineering-a-hunter-pro-hc-controller/index.html#production-dry-run","title":"Production Dry-Run","text":"<p>Now that we're at the precipice of MitM'ing our Hunter Pro-HC, it's worth doing a dry-run of what we're going to be doing to our device:</p> <ol> <li>Starting from Hands On IoT MitM (Part 1)#IoT Device Setup, we will start with \"IoT Device\" which connects directly to Amazon IoT.</li> <li>We will extract the contents of the Root Cert Store and TLS Server Store</li> <li>We will use the extracted AWS IoT private key, certificate, and Root CA certificate to configure IOXY</li> <li>We will generate and burn the IOXY verification certs to the Root Cert Store and TLS Server Store </li> <li>We will confirm that the device connects to AWS IoT</li> </ol>","tags":["microchip","firmware","analysis","uC"]},{"location":"projects/hunter-hacking/reverse-engineering-a-hunter-pro-hc-controller/index.html#stage-device-with-aws-iot-certs","title":"Stage Device With AWS IoT Certs","text":"<ol> <li>Upload SerialBridge sketch to device</li> <li> <p>Clear out the device</p> <pre><code>$ atwinc1500_fwtool.exe erase --root --tls\n</code></pre> </li> <li> <p>Upload AWS IoT certs</p> <pre><code># Write AWS IoT private key and certificate to TLS Server Store\n$ atwinc1500_fwtool.exe update --tls --key connect_device_package\\feathermitm.private.key --cert connect_device_package\\feathermitm.cert.pem\n\n# Write AWS Root CA cert to Root Cert Store\n$ atwinc1500_fwtool.exe update --root --ca_dir connect_device_package\n</code></pre> </li> <li> <p>Confirm AWS IoT Connectivity using AWS_IoT_WiFi sketch</p> </li> </ol>","tags":["microchip","firmware","analysis","uC"]},{"location":"projects/hunter-hacking/reverse-engineering-a-hunter-pro-hc-controller/index.html#validate-cert-extraction-process","title":"Validate Cert Extraction Process","text":"<ol> <li>Upload SerialBridge sketch to device</li> <li> <p>Extract certificates</p> <pre><code>$ mkdir output-dryrun\n$ atwinc1500_fwtool.exe read -o output-dryrun\n</code></pre> </li> <li> <p>Examine the certificates</p> <pre><code>$ ls -l\n\nprivate-key.asn1\nprivate-key.bat\npublic-key.bat\npublic-rsa-cert-01.asn1\nRSA_AWS IoT Certificate.cer\n</code></pre> </li> </ol> <p>Note</p> <p><code>RSA_AWS IoT Certificate.cer</code> is the AWS IoT device cert.</p> <ol> <li> <p>Convert certificates to <code>.der</code></p> <p><code>bash $ cd output-dryrun $ private-key.bat $ public-key.bat</code></p> </li> </ol> <pre><code>    $ ls -l private-key.asn1\n    private-key.bat\n    private-key.der\n    private-key.pem\n    public-key.bat\n    public-rsa-cert-01.asn1\n    public-rsa-cert-01.der\n    'RSA_AWS IoT Certificate.cer'\n</code></pre> <p>Info</p> <p><code>public-rsa-cert-01.der</code> is essentially useless, but contains the public key of the certs in the Root Cert Store.  The Root Cert Store actually strips out most of the content of the Root CA certificates that are inserted into it, keeping only the public key.</p>","tags":["microchip","firmware","analysis","uC"]},{"location":"projects/hunter-hacking/reverse-engineering-a-hunter-pro-hc-controller/index.html#confirm-extracted-certificates","title":"Confirm Extracted Certificates","text":"<ol> <li> <p>Clear out the device</p> <pre><code>$ atwinc1500_fwtool.exe erase --root --tls\n</code></pre> </li> <li> <p>Upload extracted AWS Certs</p> <p>```bash $ atwinc1500_fwtool.exe update --tls --key output-dryrun\\private-key.pem --cert output-dryrun\\\"RSA_AWS IoT Certificate.cer\" </p> <p>$ atwinc1500_fwtool.exe update --root --ca_dir connect_device_package ```</p> </li> <li> <p>Confirm AWS IoT Connectivity using AWS_IoT_WiFi sketch</p> </li> </ol>","tags":["microchip","firmware","analysis","uC"]},{"location":"projects/hunter-hacking/reverse-engineering-a-hunter-pro-hc-controller/index.html#validate-ioxy-setup","title":"Validate IOXY Setup","text":"<ol> <li>Upload SerialBridge sketch to device</li> <li> <p>Upload IOXY RootCA certificate </p> <p><code>certs</code> contains <code>rootCA.cer</code> which is generated by the IOXY <code>genCert.sh</code> script.</p> <p>We use the <code>--erase</code> flag to clear out the Root Cert Store before uploading the cert.</p> <pre><code>$ atwinc1500_fwtool.exe update --root --erase --ca_dir certs\n</code></pre> <p>What's interesting is that we don't have to actually replace the device AWS private key and certificate, all we have to do is add the self-signed IOXY Root CA certificate to the Root Cert Store.</p> </li> </ol> <pre><code>$ atwinc1500_fwtool.exe read -p5 Dumping TLS Store contents...\nTLS Certificate Store Loaded Successfully From: Flash\nFound 3 entries...\n- RSA Certificate Chain File List\n  NAME                                             SIZE TYPE         INFO\n  PRIV_62a1f32e421df7f65e2290155189f76dbd6953bd    1208 PRIVATE KEY\n  CERT_62a1f32e421df7f65e2290155189f76dbd6953bd     861 CERTIFICATE  AWS IoT Certificate\n- Private Key Details:\n  Modulus (N) :(00E09DA4)(256)\nA9 34 C5 DD 7F 50 C2 23 90 AA 85 5B DA EC 23 80\n09 AB E7 B8 1E 1F 66 1C 37 9E 3A 28 BB 9D 07 6C\n        AE D9 50 5C 45 D8 F1 5A 09 4A 44 A1 56 1F A6 41\n4C B4 20 2D D9 0F 78 68 E7 6E 11 61 94 54 70 13\nDF A0 86 38 BC 0F 9E 09 B0 04 39 53 F2 29 35 BF\n        8E FA 19 97 86 40 74 3C 20 79 B9 0F 2A 1E 7A 01\nF5 55 C2 BB CE F6 7A AA 14 48 BB 77 92 AB 0E 6D\n        C2 FE 6C 62 F6 DD 76 90 63 40 C8 58 2F 4F D6 B1\n        87 09 CF C7 40 34 24 E7 26 C1 BB 29 F5 45 C1 7D\n        75 4D 79 4A C0 F7 78 FA EA 7F 3F 44 DA F8 BE D0\n        17 3D 9E FF 0C BF F9 B6 C4 06 5F 12 88 7C C2 9F\n        B8 82 D3 E2 21 A9 73 72 AC 09 9B 2B 4F 91 8A 2D\n        E6 5F A0 83 73 82 56 5D 4E 6C 85 A9 43 87 74 81\n2A B3 47 D5 E2 18 F8 39 FC 66 1A 5B D2 C4 06 24\nCC 4C 0E BF 49 2A 90 3D 0F 47 12 16 52 F0 5E B7\n        4A 3E F4 76 02 6E 64 C0 16 0B 14 A7 93 90 58 99\n- TLS Certificate Details:\n    Subject &lt;AWS IoT Certificate&gt;\n    Issuer  &lt; &gt;\n    &lt;2023-03-23 12:47:18&gt; to &lt;2049-12-31 23:59:59&gt;\n\nDumping Root Cert Store contents...\nRoot Certificate Store Loaded Successfully From: Flash\nFound 3 entries:\n1) RSA Certificate: 5/26/2015 [00:00:00] to 1/17/2038 [00:00:00]\nName Hash (SHA1): A8 66 80 C4 56 27 2E AF E3 A7 CE 2E 49 D1 31 DC 65 BB B1 ED\n2) RSA Certificate: 3/19/2023 [20:00:22] to 3/18/2033 [20:00:22]\nName Hash (SHA1): 14 65 65 22 40 7A D1 30 64 06 9E 87 AD BB C5 31 7D 37 94 FF\n3) RSA Certificate: 3/24/2023 [04:48:33] to 1/11/2026 [04:48:33]\nName Hash (SHA1): 85 E9 39 C3 32 E4 60 1F 7E 69 9A 5F 49 99 76 39 FC BB D9 87\n</code></pre> <ol> <li>Confirm AWS IoT Connectivity using AWS_IoT_WiFi sketch</li> </ol> <p>It works!</p> <p></p> <code>#microchip</code> <code>#firmware</code> <code>#analysis</code> <code>#uC</code>","tags":["microchip","firmware","analysis","uC"]},{"location":"tags/index.html","title":"Tags","text":""},{"location":"tags/index.html#tags","title":"Tags","text":""},{"location":"tags/index.html#analysis","title":"analysis","text":"<ul> <li>Generating Complete Genomics build37 Files</li> <li>TARGET AML Data Analysis</li> <li>Hands On IoT MitM (Part 1)</li> <li>Hands On IoT MitM (Part 2)</li> <li>Reverse Engineering A Hunter Pro HC Controller</li> </ul>"},{"location":"tags/index.html#arduino","title":"arduino","text":"<ul> <li>ESP32</li> <li>Black Pill</li> <li>ITead Maple</li> <li>Super Blue Pill</li> </ul>"},{"location":"tags/index.html#binary-analysis","title":"binary-analysis","text":"<ul> <li>ATWINC1500 IoT Module Deep-Dive (Part 1)</li> <li>ATWINC1500 IoT Module Deep-Dive (Part 2)</li> </ul>"},{"location":"tags/index.html#cancer","title":"cancer","text":"<ul> <li>Generating Complete Genomics build37 Files</li> <li>TARGET AML Data Analysis</li> </ul>"},{"location":"tags/index.html#chatgpt","title":"chatgpt","text":"<ul> <li>Debugging Tools</li> <li>Reverse Engineering Tools</li> <li>Git Cheatsheet</li> <li>Rsync Cheatsheet</li> <li>TLS Cheatsheet</li> </ul>"},{"location":"tags/index.html#cheatsheet","title":"cheatsheet","text":"<ul> <li>Git Cheatsheet</li> <li>Rsync Cheatsheet</li> <li>Ruby Cheatsheet</li> <li>TLS Cheatsheet</li> </ul>"},{"location":"tags/index.html#datascience","title":"datascience","text":"<ul> <li>How To Size A Solar Battery Install</li> </ul>"},{"location":"tags/index.html#debugging","title":"debugging","text":"<ul> <li>Debugging Tools</li> </ul>"},{"location":"tags/index.html#diy","title":"diy","text":"<ul> <li>Introducing Sensie</li> </ul>"},{"location":"tags/index.html#dll","title":"dll","text":"<ul> <li>Creating A DLL With Rust</li> <li>Creating A Window With Rust</li> <li>Injecting DLLs With Rust</li> <li>Production Ready DLL Injection</li> </ul>"},{"location":"tags/index.html#docker","title":"docker","text":"<ul> <li>Learning Networking With Mininet</li> </ul>"},{"location":"tags/index.html#edgerouter","title":"edgerouter","text":"<ul> <li>How I Overengineered My Home Network</li> </ul>"},{"location":"tags/index.html#esp32","title":"esp32","text":"<ul> <li>ESP32</li> </ul>"},{"location":"tags/index.html#esp8266","title":"esp8266","text":"<ul> <li>Index</li> <li>ESP-01</li> <li>Wemos Mini</li> </ul>"},{"location":"tags/index.html#firmware","title":"firmware","text":"<ul> <li>ATWINC1500 IoT Module Deep-Dive (Part 1)</li> <li>ATWINC1500 IoT Module Deep-Dive (Part 2)</li> <li>Hands On IoT MitM (Part 1)</li> <li>Hands On IoT MitM (Part 2)</li> <li>Reverse Engineering A Hunter Pro HC Controller</li> </ul>"},{"location":"tags/index.html#git","title":"git","text":"<ul> <li>Git Cheatsheet</li> </ul>"},{"location":"tags/index.html#github","title":"github","text":"<ul> <li>How I Setup This Blog</li> </ul>"},{"location":"tags/index.html#home","title":"home","text":"<ul> <li>How I Overengineered My Home Network</li> </ul>"},{"location":"tags/index.html#home-assistant","title":"home assistant","text":"<ul> <li>My Smart Home Devices</li> </ul>"},{"location":"tags/index.html#howto","title":"howto","text":"<ul> <li>Creating A DLL With Rust</li> <li>Creating A Window With Rust</li> <li>Injecting DLLs With Rust</li> <li>Production Ready DLL Injection</li> </ul>"},{"location":"tags/index.html#hunter","title":"hunter","text":"<ul> <li>A Look Inside A Hunter Pro-HC Controller</li> </ul>"},{"location":"tags/index.html#ios","title":"ios","text":"<ul> <li>CalibreSync Development Notes</li> </ul>"},{"location":"tags/index.html#iot","title":"iot","text":"<ul> <li>How To Quickly Setup A Wireless MitM Proxy</li> <li>Introducing Sensie</li> <li>My Smart Home Devices</li> <li>ATWINC1500 IoT Module Deep-Dive (Part 1)</li> <li>ATWINC1500 IoT Module Deep-Dive (Part 2)</li> <li>Hands On IoT MitM (Part 1)</li> <li>Hands On IoT MitM (Part 2)</li> </ul>"},{"location":"tags/index.html#irrigation","title":"irrigation","text":"<ul> <li>A Look Inside A Hunter Pro-HC Controller</li> </ul>"},{"location":"tags/index.html#kali","title":"kali","text":"<ul> <li>How To Quickly Setup A Wireless MitM Proxy</li> </ul>"},{"location":"tags/index.html#microchip","title":"microchip","text":"<ul> <li>ATWINC1500 IoT Module Deep-Dive (Part 1)</li> <li>ATWINC1500 IoT Module Deep-Dive (Part 2)</li> <li>Hands On IoT MitM (Part 1)</li> <li>Hands On IoT MitM (Part 2)</li> <li>Reverse Engineering A Hunter Pro HC Controller</li> </ul>"},{"location":"tags/index.html#mininet","title":"mininet","text":"<ul> <li>Learning Networking With Mininet</li> </ul>"},{"location":"tags/index.html#mitm","title":"mitm","text":"<ul> <li>How To Quickly Setup A Wireless MitM Proxy</li> <li>Hands On IoT MitM (Part 1)</li> <li>Hands On IoT MitM (Part 2)</li> </ul>"},{"location":"tags/index.html#mkdocs","title":"mkdocs","text":"<ul> <li>How I Setup This Blog</li> <li>How I Write MkDocs Plugins</li> </ul>"},{"location":"tags/index.html#network","title":"network","text":"<ul> <li>How I Overengineered My Home Network</li> </ul>"},{"location":"tags/index.html#networking","title":"networking","text":"<ul> <li>Learning Networking With Mininet</li> </ul>"},{"location":"tags/index.html#obsidian","title":"obsidian","text":"<ul> <li>How I Setup This Blog</li> </ul>"},{"location":"tags/index.html#openssl","title":"openssl","text":"<ul> <li>TLS Cheatsheet</li> </ul>"},{"location":"tags/index.html#plugin","title":"plugin","text":"<ul> <li>How I Write MkDocs Plugins</li> </ul>"},{"location":"tags/index.html#powertoys","title":"powertoys","text":"<ul> <li>Fancy Zones Development Environment Setup</li> <li>Fancy Zones Internals</li> </ul>"},{"location":"tags/index.html#programming","title":"programming","text":"<ul> <li>Creating A DLL With Rust</li> <li>Creating A Window With Rust</li> <li>Injecting DLLs With Rust</li> <li>Production Ready DLL Injection</li> </ul>"},{"location":"tags/index.html#reversing","title":"reversing","text":"<ul> <li>Reverse Engineering Tools</li> </ul>"},{"location":"tags/index.html#rsync","title":"rsync","text":"<ul> <li>Rsync Cheatsheet</li> </ul>"},{"location":"tags/index.html#ruby","title":"ruby","text":"<ul> <li>Ruby Cheatsheet</li> </ul>"},{"location":"tags/index.html#rust","title":"rust","text":"<ul> <li>Creating A DLL With Rust</li> <li>Creating A Window With Rust</li> <li>Injecting DLLs With Rust</li> <li>Production Ready DLL Injection</li> </ul>"},{"location":"tags/index.html#security","title":"security","text":"<ul> <li>How I Overengineered My Home Network</li> </ul>"},{"location":"tags/index.html#solar","title":"solar","text":"<ul> <li>How To Size A Solar Battery Install</li> </ul>"},{"location":"tags/index.html#sprinker","title":"sprinker","text":"<ul> <li>A Look Inside A Hunter Pro-HC Controller</li> </ul>"},{"location":"tags/index.html#stm32","title":"stm32","text":"<ul> <li>Black Pill</li> <li>ITead Maple</li> <li>Super Blue Pill</li> </ul>"},{"location":"tags/index.html#swift","title":"swift","text":"<ul> <li>CalibreSync Development Notes</li> </ul>"},{"location":"tags/index.html#teardown","title":"teardown","text":"<ul> <li>A Look Inside A Hunter Pro-HC Controller</li> </ul>"},{"location":"tags/index.html#tls","title":"tls","text":"<ul> <li>TLS Cheatsheet</li> </ul>"},{"location":"tags/index.html#uc","title":"uC","text":"<ul> <li>A Look Inside A Hunter Pro-HC Controller</li> <li>Reverse Engineering A Hunter Pro HC Controller</li> </ul>"},{"location":"tags/index.html#uc_1","title":"uc","text":"<ul> <li>ESP32</li> <li>Index</li> <li>ESP-01</li> <li>Wemos Mini</li> <li>Black Pill</li> <li>ITead Maple</li> <li>Super Blue Pill</li> </ul>"},{"location":"tags/index.html#unifi","title":"unifi","text":"<ul> <li>How I Overengineered My Home Network</li> </ul>"},{"location":"tags/index.html#vscode","title":"vscode","text":"<ul> <li>How I Write MkDocs Plugins</li> </ul>"},{"location":"tags/index.html#win32","title":"win32","text":"<ul> <li>Creating A Window With Rust</li> </ul>"},{"location":"tags/index.html#windows","title":"windows","text":"<ul> <li>Fancy Zones Development Environment Setup</li> <li>Fancy Zones Internals</li> <li>Creating A DLL With Rust</li> <li>Creating A Window With Rust</li> <li>Injecting DLLs With Rust</li> <li>Production Ready DLL Injection</li> <li>Debugging Tools</li> <li>Reverse Engineering Tools</li> </ul>"},{"location":"tags/index.html#windows-rs","title":"windows-rs","text":"<ul> <li>Creating A Window With Rust</li> </ul>"},{"location":"tags/index.html#wip","title":"wip","text":"<ul> <li>How I Overengineered My Home Network</li> <li>Production Ready DLL Injection</li> <li>Docker Cheatsheet</li> <li>Black Magic Probe</li> <li>Segger J-Link</li> <li>Adafruit Feather M0 WiFi</li> <li>Raspberry Pi</li> <li>Introducing Recon</li> <li>SerialMoose Serial Port Sniffer</li> <li>My Smart Home Devices</li> <li>Samsung Refrigerator Integration</li> </ul>"}]}